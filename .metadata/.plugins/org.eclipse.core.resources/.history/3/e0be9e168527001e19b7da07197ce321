/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t byte;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM5_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t txd_msg_buffer[128] = {0};
uint8_t us100_Rx_flag = 01;
uint8_t rcv_intpt_flag = 00;
uint8_t rpm_tick_count = 0;
uint8_t ADC_CH9 = 0;
uint32_t RPM =0;
uint32_t time = 0;
int distance;
uint16_t inletSpeed;
double inletTime;
uint16_t speed1;
double time1;
uint16_t speed2;
double time2;
uint16_t speed3;
double time3;
uint8_t us100_buffer[2];
uint8_t cmd_dist = 0x55;
double maxWaterLevel = 50; //distance from us-100
double minWaterLevel = 150;
double waterLevel = 0;

void ADC_Select_CH(int CH){
	ADC_ChannelConfTypeDef sConfig = {0};
	switch(CH){
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
	sConfig.Rank = 1;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	break;
	}
}

void DIGIT_A_Display(uint8_t DIGIT_A)
{
	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 buts

	 switch(DIGITA_VAL)
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 1:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 2:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 3:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 4:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 5:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 6:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 7:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
	 break;
	 case 8:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
	 break;
	 case 9:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
	 break;
	 }
}

void DIGIT_B_Display(uint8_t DIGIT_B)
{
	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 buts

	 switch(DIGITB_VAL)
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 1:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 2:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 3:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 4:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 5:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 6:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 7:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
	 break;
	 case 8:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
	 break;
	 case 9:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
	 break;
	 }
}

void changeMotorSpeed(int direction, uint8_t motorSpeed, uint8_t potentiometer){
	if(potentiometer == 1){
		if (direction == 0){
			TIM5->CCR2 = 0;
			TIM5->CCR1 = 50 + ((99 - 50) / (255 - 0)) * (motorSpeed - 0);
			//output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
		}
		else{
			TIM5->CCR1 = 0;
			TIM5->CCR2 = 50 + ((99 - 50) / (255 - 0)) * (motorSpeed - 0);
		}
	}
	else{
		if (direction == 0){
			TIM5->CCR2 = 0;
			TIM5->CCR1 = motorSpeed;
			//output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
		}
		else{
			TIM5->CCR1 = 0;
			TIM5->CCR2 = motorSpeed;
		}
	}
}

void updateADCValue(){
	ADC_Select_CH(9);
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 1000);
	ADC_CH9 = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);

}

void updateWaterLevel(){
	//distance sensor
	us100_Rx_flag = 01;
	HAL_UART_Receive_IT(&huart1,us100_buffer,2);
	HAL_UART_Transmit(&huart1, &cmd_dist,1,500);
	while(us100_Rx_flag == (00)){};

	distance = (us100_buffer[0] << 8) + us100_buffer[1];

	//sprintf((char*)txd_msg_buffer, "\r\n Distance: %d", distance);
	//HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
}

void updateTimerDisplay(){
	DIGIT_A_Display((int)waterLevel/10);
	DIGIT_B_Display((int)waterLevel % 10);
}

void updateRPM(){
	if (HAL_GetTick() - time >= 1000) {
		RPM = (rpm_tick_count/20)*60;
		rpm_tick_count = 0;
		//sprintf((char*)txd_msg_buffer, "\r\n RPM: %d",RPM);
		//HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
		time = HAL_GetTick();
	}
}

void moveServo(int CCRValue){
//	int TIM2_Ch1_DCVAL = 500;
//	int TIM2_Ch1_STEP = 50;
	TIM2->CCR3 = CCRValue;
	//while(TIM2_Ch1_DCVAL < 2500){
	//		  TIM2_Ch1_DCVAL += (TIM2_Ch1_STEP);
	//		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
	//	  }
	//	  while(TIM2_Ch1_DCVAL > 500){
	//		  TIM2_Ch1_DCVAL -= (TIM2_Ch1_STEP);
	//		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
	//	  }
}

void Inlet(){
	if(distance <= maxWaterLevel){
		distance = maxWaterLevel;
		return;
	}
	uint16_t speed;
	double zoneTimeInMS = (inletTime/10)*60*1000;
	double startTime = HAL_GetTick();
	double newTime = startTime + 1;
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
	moveServo(500);

	updateWaterLevel();

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Inlet, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);

	while (newTime - startTime <= zoneTimeInMS || distance > maxWaterLevel){
		updateADCValue();
		if (inletSpeed == 0){
			speed = ADC_CH9;
			changeMotorSpeed(0, speed, 1);
		}
		else{
			speed = inletSpeed * 10;
			changeMotorSpeed(0, speed, 0);
		}
		updateRPM();
		updateWaterLevel();
		if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
			break;
		}
		if(distance > minWaterLevel){
			distance = minWaterLevel;
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
		updateTimerDisplay();
		newTime = (double)HAL_GetTick();
	}
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Inlet, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
}

void Outlet1(){
	uint16_t speed;
	double zoneTimeInMS = (time1/10)*60*1000;
	double startTime = HAL_GetTick();
	double newTime = startTime + 1;
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
	moveServo(1500);

	updateWaterLevel();

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 1, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);

	while (newTime - startTime <= zoneTimeInMS){
		updateADCValue();
		if (speed1 == 0){
			speed = ADC_CH9;
			changeMotorSpeed(1, speed, 1);
		}
		else{
			speed = speed1 * 10;
			changeMotorSpeed(1, speed, 0);
		}
		updateRPM();
		updateWaterLevel();
		if (distance >= minWaterLevel){
			distance = minWaterLevel;
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
			Inlet();
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
			moveServo(1500);
		}
		else if(distance < maxWaterLevel){
			distance = maxWaterLevel;
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
		updateTimerDisplay();
		newTime = (double)HAL_GetTick();
	}
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);


	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 1, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
}

void Outlet2(){
	uint16_t speed;
	double zoneTimeInMS = (time2/10)*60*1000;
	double startTime = HAL_GetTick();
	double newTime = startTime + 1;
	HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
	moveServo(2500);

	updateWaterLevel();

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 2, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);

	while (newTime - startTime <= zoneTimeInMS){
		updateADCValue();
		if (speed2 == 0){
			speed = ADC_CH9;
			changeMotorSpeed(1, speed, 1);
		}
		else{
			speed = speed2 * 10;
			changeMotorSpeed(1, speed, 0);
		}
		updateRPM();
		updateWaterLevel();
		if (distance >= minWaterLevel){
			distance = minWaterLevel;
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
			Inlet();
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
			moveServo(2500);
		}
		else if(distance < maxWaterLevel){
			distance = maxWaterLevel;
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
		updateTimerDisplay();
		newTime = (double)HAL_GetTick();
	}
	HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 2, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
}

void Outlet3(){
	uint16_t speed;
	double zoneTimeInMS = (time3/10)*60*1000;
	double startTime = HAL_GetTick();
	double newTime = startTime + 1;
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
	moveServo(1000);

	updateWaterLevel();
	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 3, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
	while (newTime - startTime <= zoneTimeInMS){
		updateADCValue();
		if (speed3 == 0){
			speed = ADC_CH9;
			changeMotorSpeed(1, speed, 1);
		}
		else{
			speed = speed3 * 10;
			changeMotorSpeed(1, speed, 0);
		}
		updateRPM();
		updateWaterLevel();
		if (distance >= minWaterLevel){
			distance = minWaterLevel;
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
			Inlet();
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
			moveServo(1000);
		}
		else if(distance < maxWaterLevel){
			distance = maxWaterLevel;
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
		updateTimerDisplay();
		newTime = (double)HAL_GetTick();
	}

	if(distance <= maxWaterLevel){
			distance = maxWaterLevel;
	}
	if(distance > minWaterLevel){
		distance = minWaterLevel;
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 3, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.2lf%%", speed, RPM, distance, waterLevel);
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */



  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_USART6_UART_Init();
  MX_TIM5_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);


  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  TIM2->PSC = 16-1;
  TIM2->ARR = 20000-1;
  TIM2->CCR1 = 500;


  //inlet setup
  sprintf((char*)txd_msg_buffer, "\r\n INLET MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
  rcv_intpt_flag = 00;
  HAL_UART_Receive_IT(&huart6, &byte, 1);

  while(rcv_intpt_flag == (00)){}
  inletSpeed = byte - '0';

  sprintf((char*)txd_msg_buffer, "\r\n Inlet Time, 1 to 24 hours: ");
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
      rcv_intpt_flag = 00;
      HAL_UART_Receive_IT(&huart6, &byte, 1);

      while(rcv_intpt_flag == (00)){}
  inletTime = byte - '0';

  //zone 1 setup
  sprintf((char*)txd_msg_buffer, "\r\n ZONE 1 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
  rcv_intpt_flag = 00;
  HAL_UART_Receive_IT(&huart6, &byte, 1);

  while(rcv_intpt_flag == (00)){}

  speed1 = byte - '0';

  sprintf((char*)txd_msg_buffer, "\r\n Zone 1 Time, 1 to 24 hours: ");
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
      rcv_intpt_flag = 00;
      HAL_UART_Receive_IT(&huart6, &byte, 1);

      while(rcv_intpt_flag == (00)){}
  time1 = byte -'0';
  //zone 2 setup
    sprintf((char*)txd_msg_buffer, "\r\n ZONE 2 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
    HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
    rcv_intpt_flag = 00;
    HAL_UART_Receive_IT(&huart6, &byte, 1);

    while(rcv_intpt_flag == (00)){}

    speed2 = byte - '0';
    sprintf((char*)txd_msg_buffer, "\r\n Zone 2 Time, 1 to 24 hours: ");
        HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
        rcv_intpt_flag = 00;
        HAL_UART_Receive_IT(&huart6, &byte, 1);

        while(rcv_intpt_flag == (00)){}

    time2 = byte - '0';
    //zone 3 setup
      sprintf((char*)txd_msg_buffer, "\r\n ZONE 3 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
      rcv_intpt_flag = 00;
      HAL_UART_Receive_IT(&huart6, &byte, 1);

      while(rcv_intpt_flag == (00)){}

      speed3 = byte - '0';

      sprintf((char*)txd_msg_buffer, "\r\n Zone 3 Time, 1 to 24 hours: ");
		HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
		rcv_intpt_flag = 00;
		HAL_UART_Receive_IT(&huart6, &byte, 1);

		while(rcv_intpt_flag == (00)){}

	  time3 = byte - '0';
  HAL_TIM_Base_Start_IT(&htim4);
  time = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  Inlet();
	  Outlet1();
	  Outlet2();
	  Outlet3();
	  //potentiometer code
	  //getADCValue();

	  //motor code
	  //changeMotorSpeed(ADC_CH9, motorSpeed);

	  //RPM sensor code
//	  if (HAL_GetTick() - time >= 1000) {
//		  RPM = (rpm_tick_count/20)*60;
//		  rpm_tick_count =0;
//		  //sprintf((char*)txd_msg_buffer, "\r\n RPM: %d",RPM);
//		  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
//		  time = HAL_GetTick();
//	  }

	  //servo code
//	  while(TIM2_Ch1_DCVAL < 2500){
//		  TIM2_Ch1_DCVAL += (TIM2_Ch1_STEP);
//		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
//	  }
//	  while(TIM2_Ch1_DCVAL > 500){
//		  TIM2_Ch1_DCVAL -= (TIM2_Ch1_STEP);
//		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 16-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 16000-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 160-1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 100-1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 50-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 9600;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin|LD2_Pin|DIGIT_A3_Pin|BLU_Pin
                          |RED_Pin|GRN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin
                          |DIGIT_A1_Pin|DIGIT_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DIGIT_A0_Pin LD2_Pin DIGIT_A3_Pin BLU_Pin
                           RED_Pin GRN_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|LD2_Pin|DIGIT_A3_Pin|BLU_Pin
                          |RED_Pin|GRN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin
                           DIGIT_A1_Pin DIGIT_A2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin
                          |DIGIT_A1_Pin|DIGIT_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == RPM_TICK_Pin){
		rpm_tick_count += 1;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
			us100_Rx_flag = 01;
	}
	else if (huart->Instance == USART6){
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
		rcv_intpt_flag = 1;
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
