
Reservoir_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a010  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800a1b0  0800a1b0  0001a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8bc  0800a8bc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8bc  0800a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c4  0800a8c4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a8cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001f8  0800aac0  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800aac0  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f78e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002052  00000000  00000000  0002f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00032878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018244  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010233  00000000  00000000  0004b864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab9c  00000000  00000000  0005ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  000f6684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a198 	.word	0x0800a198

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a198 	.word	0x0800a198

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <ADC_Select_CH>:
uint8_t cmd_dist = 0x55;
double maxWaterLevel = 50; //distance from us-100
double minWaterLevel = 150;
double waterLevel = 0;

void ADC_Select_CH(int CH){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
	switch(CH){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	f200 814b 	bhi.w	80011b0 <ADC_Select_CH+0x2b4>
 8000f1a:	a201      	add	r2, pc, #4	; (adr r2, 8000f20 <ADC_Select_CH+0x24>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f61 	.word	0x08000f61
 8000f24:	08000f83 	.word	0x08000f83
 8000f28:	08000fa5 	.word	0x08000fa5
 8000f2c:	08000fc7 	.word	0x08000fc7
 8000f30:	08000fe9 	.word	0x08000fe9
 8000f34:	0800100b 	.word	0x0800100b
 8000f38:	0800102d 	.word	0x0800102d
 8000f3c:	0800104f 	.word	0x0800104f
 8000f40:	08001071 	.word	0x08001071
 8000f44:	08001093 	.word	0x08001093
 8000f48:	080010b3 	.word	0x080010b3
 8000f4c:	080010d3 	.word	0x080010d3
 8000f50:	080010f3 	.word	0x080010f3
 8000f54:	08001113 	.word	0x08001113
 8000f58:	08001133 	.word	0x08001133
 8000f5c:	08001153 	.word	0x08001153
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4892      	ldr	r0, [pc, #584]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8000f70:	f003 f89c 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80fb 	beq.w	8001172 <ADC_Select_CH+0x276>
		Error_Handler();
 8000f7c:	f002 fb26 	bl	80035cc <Error_Handler>
	}
	break;
 8000f80:	e0f7      	b.n	8001172 <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4889      	ldr	r0, [pc, #548]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8000f92:	f003 f88b 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80ec 	beq.w	8001176 <ADC_Select_CH+0x27a>
		Error_Handler();
 8000f9e:	f002 fb15 	bl	80035cc <Error_Handler>
	}
	break;
 8000fa2:	e0e8      	b.n	8001176 <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4881      	ldr	r0, [pc, #516]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8000fb4:	f003 f87a 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80dd 	beq.w	800117a <ADC_Select_CH+0x27e>
		Error_Handler();
 8000fc0:	f002 fb04 	bl	80035cc <Error_Handler>
	}
	break;
 8000fc4:	e0d9      	b.n	800117a <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4878      	ldr	r0, [pc, #480]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8000fd6:	f003 f869 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ce 	beq.w	800117e <ADC_Select_CH+0x282>
		Error_Handler();
 8000fe2:	f002 faf3 	bl	80035cc <Error_Handler>
	}
	break;
 8000fe6:	e0ca      	b.n	800117e <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4870      	ldr	r0, [pc, #448]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8000ff8:	f003 f858 	bl	80040ac <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80bf 	beq.w	8001182 <ADC_Select_CH+0x286>
		Error_Handler();
 8001004:	f002 fae2 	bl	80035cc <Error_Handler>
	}
	break;
 8001008:	e0bb      	b.n	8001182 <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 800100a:	2305      	movs	r3, #5
 800100c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	4867      	ldr	r0, [pc, #412]	; (80011b8 <ADC_Select_CH+0x2bc>)
 800101a:	f003 f847 	bl	80040ac <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80b0 	beq.w	8001186 <ADC_Select_CH+0x28a>
		Error_Handler();
 8001026:	f002 fad1 	bl	80035cc <Error_Handler>
	}
	break;
 800102a:	e0ac      	b.n	8001186 <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 800102c:	2306      	movs	r3, #6
 800102e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4619      	mov	r1, r3
 800103a:	485f      	ldr	r0, [pc, #380]	; (80011b8 <ADC_Select_CH+0x2bc>)
 800103c:	f003 f836 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80a1 	beq.w	800118a <ADC_Select_CH+0x28e>
		Error_Handler();
 8001048:	f002 fac0 	bl	80035cc <Error_Handler>
	}
	break;
 800104c:	e09d      	b.n	800118a <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 800104e:	2307      	movs	r3, #7
 8001050:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	4856      	ldr	r0, [pc, #344]	; (80011b8 <ADC_Select_CH+0x2bc>)
 800105e:	f003 f825 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8092 	beq.w	800118e <ADC_Select_CH+0x292>
		Error_Handler();
 800106a:	f002 faaf 	bl	80035cc <Error_Handler>
	}
	break;
 800106e:	e08e      	b.n	800118e <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8001070:	2308      	movs	r3, #8
 8001072:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	484e      	ldr	r0, [pc, #312]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8001080:	f003 f814 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8083 	beq.w	8001192 <ADC_Select_CH+0x296>
		Error_Handler();
 800108c:	f002 fa9e 	bl	80035cc <Error_Handler>
	}
	break;
 8001090:	e07f      	b.n	8001192 <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 8001092:	2309      	movs	r3, #9
 8001094:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4619      	mov	r1, r3
 80010a0:	4845      	ldr	r0, [pc, #276]	; (80011b8 <ADC_Select_CH+0x2bc>)
 80010a2:	f003 f803 	bl	80040ac <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d074      	beq.n	8001196 <ADC_Select_CH+0x29a>
		Error_Handler();
 80010ac:	f002 fa8e 	bl	80035cc <Error_Handler>
	}
	break;
 80010b0:	e071      	b.n	8001196 <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 80010b2:	230a      	movs	r3, #10
 80010b4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	483d      	ldr	r0, [pc, #244]	; (80011b8 <ADC_Select_CH+0x2bc>)
 80010c2:	f002 fff3 	bl	80040ac <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d066      	beq.n	800119a <ADC_Select_CH+0x29e>
		Error_Handler();
 80010cc:	f002 fa7e 	bl	80035cc <Error_Handler>
	}
	break;
 80010d0:	e063      	b.n	800119a <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 80010d2:	230b      	movs	r3, #11
 80010d4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4619      	mov	r1, r3
 80010e0:	4835      	ldr	r0, [pc, #212]	; (80011b8 <ADC_Select_CH+0x2bc>)
 80010e2:	f002 ffe3 	bl	80040ac <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d058      	beq.n	800119e <ADC_Select_CH+0x2a2>
		Error_Handler();
 80010ec:	f002 fa6e 	bl	80035cc <Error_Handler>
	}
	break;
 80010f0:	e055      	b.n	800119e <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 80010f2:	230c      	movs	r3, #12
 80010f4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	482d      	ldr	r0, [pc, #180]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8001102:	f002 ffd3 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d04a      	beq.n	80011a2 <ADC_Select_CH+0x2a6>
		Error_Handler();
 800110c:	f002 fa5e 	bl	80035cc <Error_Handler>
	}
	break;
 8001110:	e047      	b.n	80011a2 <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 8001112:	230d      	movs	r3, #13
 8001114:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	4825      	ldr	r0, [pc, #148]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8001122:	f002 ffc3 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d03c      	beq.n	80011a6 <ADC_Select_CH+0x2aa>
		Error_Handler();
 800112c:	f002 fa4e 	bl	80035cc <Error_Handler>
	}
	break;
 8001130:	e039      	b.n	80011a6 <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 8001132:	230e      	movs	r3, #14
 8001134:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	481d      	ldr	r0, [pc, #116]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8001142:	f002 ffb3 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02e      	beq.n	80011aa <ADC_Select_CH+0x2ae>
		Error_Handler();
 800114c:	f002 fa3e 	bl	80035cc <Error_Handler>
	}
	break;
 8001150:	e02b      	b.n	80011aa <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 8001152:	230f      	movs	r3, #15
 8001154:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <ADC_Select_CH+0x2bc>)
 8001162:	f002 ffa3 	bl	80040ac <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d020      	beq.n	80011ae <ADC_Select_CH+0x2b2>
		Error_Handler();
 800116c:	f002 fa2e 	bl	80035cc <Error_Handler>
	}
	break;
 8001170:	e01d      	b.n	80011ae <ADC_Select_CH+0x2b2>
	break;
 8001172:	bf00      	nop
 8001174:	e01c      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 8001176:	bf00      	nop
 8001178:	e01a      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800117a:	bf00      	nop
 800117c:	e018      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800117e:	bf00      	nop
 8001180:	e016      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 8001182:	bf00      	nop
 8001184:	e014      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 8001186:	bf00      	nop
 8001188:	e012      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800118a:	bf00      	nop
 800118c:	e010      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800118e:	bf00      	nop
 8001190:	e00e      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 8001192:	bf00      	nop
 8001194:	e00c      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 8001196:	bf00      	nop
 8001198:	e00a      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800119a:	bf00      	nop
 800119c:	e008      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 800119e:	bf00      	nop
 80011a0:	e006      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 80011a2:	bf00      	nop
 80011a4:	e004      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 80011a6:	bf00      	nop
 80011a8:	e002      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <ADC_Select_CH+0x2b4>
	break;
 80011ae:	bf00      	nop
	}
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000218 	.word	0x20000218

080011bc <DIGIT_A_Display>:

void DIGIT_A_Display(uint8_t DIGIT_A)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 buts
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	73fb      	strb	r3, [r7, #15]

	 switch(DIGITA_VAL)
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	f200 80fd 	bhi.w	80013d0 <DIGIT_A_Display+0x214>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <DIGIT_A_Display+0x20>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	08001205 	.word	0x08001205
 80011e0:	08001233 	.word	0x08001233
 80011e4:	08001261 	.word	0x08001261
 80011e8:	0800128f 	.word	0x0800128f
 80011ec:	080012bd 	.word	0x080012bd
 80011f0:	080012eb 	.word	0x080012eb
 80011f4:	08001319 	.word	0x08001319
 80011f8:	08001347 	.word	0x08001347
 80011fc:	08001375 	.word	0x08001375
 8001200:	080013a3 	.word	0x080013a3
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2110      	movs	r1, #16
 8001208:	4873      	ldr	r0, [pc, #460]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800120a:	f003 fc95 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	4871      	ldr	r0, [pc, #452]	; (80013dc <DIGIT_A_Display+0x220>)
 8001216:	f003 fc8f 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	486e      	ldr	r0, [pc, #440]	; (80013dc <DIGIT_A_Display+0x220>)
 8001222:	f003 fc89 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	486b      	ldr	r0, [pc, #428]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800122c:	f003 fc84 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001230:	e0ce      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 1:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2110      	movs	r1, #16
 8001236:	4868      	ldr	r0, [pc, #416]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001238:	f003 fc7e 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	4866      	ldr	r0, [pc, #408]	; (80013dc <DIGIT_A_Display+0x220>)
 8001244:	f003 fc78 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124e:	4863      	ldr	r0, [pc, #396]	; (80013dc <DIGIT_A_Display+0x220>)
 8001250:	f003 fc72 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	485f      	ldr	r0, [pc, #380]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800125a:	f003 fc6d 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 800125e:	e0b7      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 2:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	485c      	ldr	r0, [pc, #368]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001266:	f003 fc67 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001270:	485a      	ldr	r0, [pc, #360]	; (80013dc <DIGIT_A_Display+0x220>)
 8001272:	f003 fc61 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4857      	ldr	r0, [pc, #348]	; (80013dc <DIGIT_A_Display+0x220>)
 800127e:	f003 fc5b 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	4854      	ldr	r0, [pc, #336]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001288:	f003 fc56 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 800128c:	e0a0      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 3:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2110      	movs	r1, #16
 8001292:	4851      	ldr	r0, [pc, #324]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001294:	f003 fc50 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129e:	484f      	ldr	r0, [pc, #316]	; (80013dc <DIGIT_A_Display+0x220>)
 80012a0:	f003 fc4a 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012aa:	484c      	ldr	r0, [pc, #304]	; (80013dc <DIGIT_A_Display+0x220>)
 80012ac:	f003 fc44 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2140      	movs	r1, #64	; 0x40
 80012b4:	4848      	ldr	r0, [pc, #288]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80012b6:	f003 fc3f 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80012ba:	e089      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 4:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2110      	movs	r1, #16
 80012c0:	4845      	ldr	r0, [pc, #276]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80012c2:	f003 fc39 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	4843      	ldr	r0, [pc, #268]	; (80013dc <DIGIT_A_Display+0x220>)
 80012ce:	f003 fc33 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	4840      	ldr	r0, [pc, #256]	; (80013dc <DIGIT_A_Display+0x220>)
 80012da:	f003 fc2d 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	483d      	ldr	r0, [pc, #244]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80012e4:	f003 fc28 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80012e8:	e072      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 5:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2110      	movs	r1, #16
 80012ee:	483a      	ldr	r0, [pc, #232]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80012f0:	f003 fc22 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	4838      	ldr	r0, [pc, #224]	; (80013dc <DIGIT_A_Display+0x220>)
 80012fc:	f003 fc1c 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001306:	4835      	ldr	r0, [pc, #212]	; (80013dc <DIGIT_A_Display+0x220>)
 8001308:	f003 fc16 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4831      	ldr	r0, [pc, #196]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001312:	f003 fc11 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001316:	e05b      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 6:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800131e:	f003 fc0b 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <DIGIT_A_Display+0x220>)
 800132a:	f003 fc05 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4829      	ldr	r0, [pc, #164]	; (80013dc <DIGIT_A_Display+0x220>)
 8001336:	f003 fbff 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	4826      	ldr	r0, [pc, #152]	; (80013d8 <DIGIT_A_Display+0x21c>)
 8001340:	f003 fbfa 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001344:	e044      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 7:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4823      	ldr	r0, [pc, #140]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800134c:	f003 fbf4 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <DIGIT_A_Display+0x220>)
 8001358:	f003 fbee 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	481e      	ldr	r0, [pc, #120]	; (80013dc <DIGIT_A_Display+0x220>)
 8001364:	f003 fbe8 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800136e:	f003 fbe3 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001372:	e02d      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 8:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	4817      	ldr	r0, [pc, #92]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800137a:	f003 fbdd 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <DIGIT_A_Display+0x220>)
 8001386:	f003 fbd7 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <DIGIT_A_Display+0x220>)
 8001392:	f003 fbd1 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <DIGIT_A_Display+0x21c>)
 800139c:	f003 fbcc 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80013a0:	e016      	b.n	80013d0 <DIGIT_A_Display+0x214>
	 case 9:
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2110      	movs	r1, #16
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80013a8:	f003 fbc6 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	480a      	ldr	r0, [pc, #40]	; (80013dc <DIGIT_A_Display+0x220>)
 80013b4:	f003 fbc0 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <DIGIT_A_Display+0x220>)
 80013c0:	f003 fbba 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <DIGIT_A_Display+0x21c>)
 80013ca:	f003 fbb5 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80013ce:	bf00      	nop
	 }
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400

080013e0 <DIGIT_B_Display>:

void DIGIT_B_Display(uint8_t DIGIT_B)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 buts
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	73fb      	strb	r3, [r7, #15]

	 switch(DIGITB_VAL)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	f200 80e9 	bhi.w	80015cc <DIGIT_B_Display+0x1ec>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <DIGIT_B_Display+0x20>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001429 	.word	0x08001429
 8001404:	08001453 	.word	0x08001453
 8001408:	0800147d 	.word	0x0800147d
 800140c:	080014a7 	.word	0x080014a7
 8001410:	080014d1 	.word	0x080014d1
 8001414:	080014fb 	.word	0x080014fb
 8001418:	08001525 	.word	0x08001525
 800141c:	0800154f 	.word	0x0800154f
 8001420:	08001579 	.word	0x08001579
 8001424:	080015a3 	.word	0x080015a3
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	4869      	ldr	r0, [pc, #420]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800142e:	f003 fb83 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2110      	movs	r1, #16
 8001436:	4867      	ldr	r0, [pc, #412]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001438:	f003 fb7e 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2120      	movs	r1, #32
 8001440:	4864      	ldr	r0, [pc, #400]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001442:	f003 fb79 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	4862      	ldr	r0, [pc, #392]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800144c:	f003 fb74 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001450:	e0bc      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 1:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	485f      	ldr	r0, [pc, #380]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001458:	f003 fb6e 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2110      	movs	r1, #16
 8001460:	485c      	ldr	r0, [pc, #368]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001462:	f003 fb69 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	485a      	ldr	r0, [pc, #360]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800146c:	f003 fb64 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4857      	ldr	r0, [pc, #348]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001476:	f003 fb5f 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 800147a:	e0a7      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 2:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2101      	movs	r1, #1
 8001480:	4854      	ldr	r0, [pc, #336]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001482:	f003 fb59 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	4852      	ldr	r0, [pc, #328]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800148c:	f003 fb54 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	484f      	ldr	r0, [pc, #316]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001496:	f003 fb4f 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	484d      	ldr	r0, [pc, #308]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014a0:	f003 fb4a 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80014a4:	e092      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 3:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	484a      	ldr	r0, [pc, #296]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014ac:	f003 fb44 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	4847      	ldr	r0, [pc, #284]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014b6:	f003 fb3f 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2120      	movs	r1, #32
 80014be:	4845      	ldr	r0, [pc, #276]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014c0:	f003 fb3a 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4842      	ldr	r0, [pc, #264]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014ca:	f003 fb35 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80014ce:	e07d      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 4:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	483f      	ldr	r0, [pc, #252]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014d6:	f003 fb2f 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2110      	movs	r1, #16
 80014de:	483d      	ldr	r0, [pc, #244]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014e0:	f003 fb2a 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	483a      	ldr	r0, [pc, #232]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014ea:	f003 fb25 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	4838      	ldr	r0, [pc, #224]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80014f4:	f003 fb20 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80014f8:	e068      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 5:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2101      	movs	r1, #1
 80014fe:	4835      	ldr	r0, [pc, #212]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001500:	f003 fb1a 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2110      	movs	r1, #16
 8001508:	4832      	ldr	r0, [pc, #200]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800150a:	f003 fb15 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2120      	movs	r1, #32
 8001512:	4830      	ldr	r0, [pc, #192]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001514:	f003 fb10 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	482d      	ldr	r0, [pc, #180]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800151e:	f003 fb0b 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001522:	e053      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 6:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2101      	movs	r1, #1
 8001528:	482a      	ldr	r0, [pc, #168]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800152a:	f003 fb05 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2110      	movs	r1, #16
 8001532:	4828      	ldr	r0, [pc, #160]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001534:	f003 fb00 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2120      	movs	r1, #32
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800153e:	f003 fafb 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001548:	f003 faf6 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 800154c:	e03e      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 7:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4820      	ldr	r0, [pc, #128]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001554:	f003 faf0 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2110      	movs	r1, #16
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800155e:	f003 faeb 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2120      	movs	r1, #32
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001568:	f003 fae6 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001572:	f003 fae1 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 8001576:	e029      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 8:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2101      	movs	r1, #1
 800157c:	4815      	ldr	r0, [pc, #84]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800157e:	f003 fadb 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2110      	movs	r1, #16
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001588:	f003 fad6 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	4810      	ldr	r0, [pc, #64]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 8001592:	f003 fad1 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 800159c:	f003 facc 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80015a0:	e014      	b.n	80015cc <DIGIT_B_Display+0x1ec>
	 case 9:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80015a8:	f003 fac6 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2110      	movs	r1, #16
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80015b2:	f003 fac1 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2120      	movs	r1, #32
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80015bc:	f003 fabc 	bl	8004b38 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <DIGIT_B_Display+0x1f4>)
 80015c6:	f003 fab7 	bl	8004b38 <HAL_GPIO_WritePin>
	 break;
 80015ca:	bf00      	nop
	 }
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40020400 	.word	0x40020400

080015d8 <changeMotorSpeed>:

void changeMotorSpeed(int direction, uint8_t motorSpeed, uint8_t potentiometer){
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	4613      	mov	r3, r2
 80015e6:	70bb      	strb	r3, [r7, #2]
	if(potentiometer == 1){
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d140      	bne.n	8001670 <changeMotorSpeed+0x98>
		if (direction == 0){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11e      	bne.n	8001632 <changeMotorSpeed+0x5a>
			TIM5->CCR2 = 0;
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <changeMotorSpeed+0xd0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIM5->CCR1 = 0 + ((99 - 0) / (255 - 0)) * (motorSpeed - 0);
			TIM5->CCR1 = ((double)motorSpeed/255) * 99;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff89 	bl	8000514 <__aeabi_ui2d>
 8001602:	a325      	add	r3, pc, #148	; (adr r3, 8001698 <changeMotorSpeed+0xc0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f928 	bl	800085c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a322      	add	r3, pc, #136	; (adr r3, 80016a0 <changeMotorSpeed+0xc8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fff5 	bl	8000608 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4c21      	ldr	r4, [pc, #132]	; (80016a8 <changeMotorSpeed+0xd0>)
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fac6 	bl	8000bb8 <__aeabi_d2uiz>
 800162c:	4603      	mov	r3, r0
 800162e:	6363      	str	r3, [r4, #52]	; 0x34
		else{
			TIM5->CCR1 = 0;
			TIM5->CCR2 = motorSpeed;
		}
	}
}
 8001630:	e02e      	b.n	8001690 <changeMotorSpeed+0xb8>
			TIM5->CCR1 = 0;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <changeMotorSpeed+0xd0>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
			TIM5->CCR2 = ((double)motorSpeed/255) * 99;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff6a 	bl	8000514 <__aeabi_ui2d>
 8001640:	a315      	add	r3, pc, #84	; (adr r3, 8001698 <changeMotorSpeed+0xc0>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f909 	bl	800085c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	a313      	add	r3, pc, #76	; (adr r3, 80016a0 <changeMotorSpeed+0xc8>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffd6 	bl	8000608 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4c11      	ldr	r4, [pc, #68]	; (80016a8 <changeMotorSpeed+0xd0>)
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff faa7 	bl	8000bb8 <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800166e:	e00f      	b.n	8001690 <changeMotorSpeed+0xb8>
		if (direction == 0){
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <changeMotorSpeed+0xac>
			TIM5->CCR2 = 0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <changeMotorSpeed+0xd0>)
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM5->CCR1 = motorSpeed;
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <changeMotorSpeed+0xd0>)
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001682:	e005      	b.n	8001690 <changeMotorSpeed+0xb8>
			TIM5->CCR1 = 0;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <changeMotorSpeed+0xd0>)
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
			TIM5->CCR2 = motorSpeed;
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <changeMotorSpeed+0xd0>)
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	00000000 	.word	0x00000000
 800169c:	406fe000 	.word	0x406fe000
 80016a0:	00000000 	.word	0x00000000
 80016a4:	4058c000 	.word	0x4058c000
 80016a8:	40000c00 	.word	0x40000c00

080016ac <updateADCValue>:

void updateADCValue(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	ADC_Select_CH(9);
 80016b0:	2009      	movs	r0, #9
 80016b2:	f7ff fc23 	bl	8000efc <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <updateADCValue+0x34>)
 80016b8:	f002 fb78 	bl	8003dac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80016bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <updateADCValue+0x34>)
 80016c2:	f002 fc5a 	bl	8003f7a <HAL_ADC_PollForConversion>
	ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <updateADCValue+0x34>)
 80016c8:	f002 fce2 	bl	8004090 <HAL_ADC_GetValue>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <updateADCValue+0x38>)
 80016d2:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <updateADCValue+0x34>)
 80016d6:	f002 fc1d 	bl	8003f14 <HAL_ADC_Stop>

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000218 	.word	0x20000218
 80016e4:	20000506 	.word	0x20000506

080016e8 <updateWaterLevel>:

void updateWaterLevel(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	//distance sensor
	us100_Rx_flag = 01;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <updateWaterLevel+0x40>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,us100_buffer,2);
 80016f2:	2202      	movs	r2, #2
 80016f4:	490d      	ldr	r1, [pc, #52]	; (800172c <updateWaterLevel+0x44>)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <updateWaterLevel+0x48>)
 80016f8:	f004 fea1 	bl	800643e <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, &cmd_dist,1,500);
 80016fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001700:	2201      	movs	r2, #1
 8001702:	490c      	ldr	r1, [pc, #48]	; (8001734 <updateWaterLevel+0x4c>)
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <updateWaterLevel+0x48>)
 8001706:	f004 fe08 	bl	800631a <HAL_UART_Transmit>
	while(us100_Rx_flag == (00)){};
 800170a:	bf00      	nop
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <updateWaterLevel+0x40>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0fb      	beq.n	800170c <updateWaterLevel+0x24>

	distance = (us100_buffer[0] << 8) + us100_buffer[1];
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <updateWaterLevel+0x44>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <updateWaterLevel+0x44>)
 800171c:	7852      	ldrb	r2, [r2, #1]
 800171e:	4413      	add	r3, r2
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <updateWaterLevel+0x50>)
 8001722:	6013      	str	r3, [r2, #0]

	//sprintf((char*)txd_msg_buffer, "\r\n Distance: %d", distance);
	//HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000550 	.word	0x20000550
 8001730:	20000338 	.word	0x20000338
 8001734:	20000001 	.word	0x20000001
 8001738:	20000510 	.word	0x20000510

0800173c <updateTimerDisplay>:

void updateTimerDisplay(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	DIGIT_A_Display((int)waterLevel/10);
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <updateTimerDisplay+0x5c>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa0d 	bl	8000b68 <__aeabi_d2iz>
 800174e:	4603      	mov	r3, r0
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <updateTimerDisplay+0x60>)
 8001752:	fb82 1203 	smull	r1, r2, r2, r3
 8001756:	1092      	asrs	r2, r2, #2
 8001758:	17db      	asrs	r3, r3, #31
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd2c 	bl	80011bc <DIGIT_A_Display>
	DIGIT_B_Display((int)waterLevel % 10);
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <updateTimerDisplay+0x5c>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9fb 	bl	8000b68 <__aeabi_d2iz>
 8001772:	4602      	mov	r2, r0
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <updateTimerDisplay+0x60>)
 8001776:	fb83 1302 	smull	r1, r3, r3, r2
 800177a:	1099      	asrs	r1, r3, #2
 800177c:	17d3      	asrs	r3, r2, #31
 800177e:	1ac9      	subs	r1, r1, r3
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1ad1      	subs	r1, r2, r3
 800178a:	b2cb      	uxtb	r3, r1
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe27 	bl	80013e0 <DIGIT_B_Display>
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000558 	.word	0x20000558
 800179c:	66666667 	.word	0x66666667

080017a0 <updateRPM>:

void updateRPM(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - time >= 1000) {
 80017a4:	f002 fab2 	bl	8003d0c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <updateRPM+0x6c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b4:	d328      	bcc.n	8001808 <updateRPM+0x68>
		RPM = ((float)rpm_tick_count/20.0)*60.0;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <updateRPM+0x70>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	ee17 0a90 	vmov	r0, s15
 80017c6:	f7fe fec7 	bl	8000558 <__aeabi_f2d>
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <updateRPM+0x74>)
 80017d0:	f7ff f844 	bl	800085c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <updateRPM+0x78>)
 80017e2:	f7fe ff11 	bl	8000608 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f9e3 	bl	8000bb8 <__aeabi_d2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a09      	ldr	r2, [pc, #36]	; (800181c <updateRPM+0x7c>)
 80017f6:	6013      	str	r3, [r2, #0]
		rpm_tick_count = 0;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <updateRPM+0x70>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		//sprintf((char*)txd_msg_buffer, "\r\n RPM: %d",RPM);
		//HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
		time = HAL_GetTick();
 80017fe:	f002 fa85 	bl	8003d0c <HAL_GetTick>
 8001802:	4603      	mov	r3, r0
 8001804:	4a01      	ldr	r2, [pc, #4]	; (800180c <updateRPM+0x6c>)
 8001806:	6013      	str	r3, [r2, #0]
	}
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000050c 	.word	0x2000050c
 8001810:	20000505 	.word	0x20000505
 8001814:	40340000 	.word	0x40340000
 8001818:	404e0000 	.word	0x404e0000
 800181c:	20000508 	.word	0x20000508

08001820 <moveServo>:

void moveServo(int CCRValue){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
//	int TIM2_Ch1_DCVAL = 500;
//	int TIM2_Ch1_STEP = 50;
	TIM2->CCR3 = CCRValue;
 8001828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	63d3      	str	r3, [r2, #60]	; 0x3c
	//	  }
	//	  while(TIM2_Ch1_DCVAL > 500){
	//		  TIM2_Ch1_DCVAL -= (TIM2_Ch1_STEP);
	//		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
	//	  }
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	0000      	movs	r0, r0
	...

08001840 <Inlet>:

void Inlet(){
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af04      	add	r7, sp, #16
	if(distance <= maxWaterLevel){
 8001846:	4ba4      	ldr	r3, [pc, #656]	; (8001ad8 <Inlet+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe72 	bl	8000534 <__aeabi_i2d>
 8001850:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <Inlet+0x29c>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7ff f953 	bl	8000b00 <__aeabi_dcmple>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <Inlet+0x36>
		distance = maxWaterLevel;
 8001860:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <Inlet+0x29c>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f97d 	bl	8000b68 <__aeabi_d2iz>
 800186e:	4603      	mov	r3, r0
 8001870:	4a99      	ldr	r2, [pc, #612]	; (8001ad8 <Inlet+0x298>)
 8001872:	6013      	str	r3, [r2, #0]
		return;
 8001874:	e253      	b.n	8001d1e <Inlet+0x4de>
	}
	uint16_t speed;
	double zoneTimeInMS = (inletTime/10)*60*1000;
 8001876:	4b9a      	ldr	r3, [pc, #616]	; (8001ae0 <Inlet+0x2a0>)
 8001878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b98      	ldr	r3, [pc, #608]	; (8001ae4 <Inlet+0x2a4>)
 8001882:	f7fe ffeb 	bl	800085c <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b95      	ldr	r3, [pc, #596]	; (8001ae8 <Inlet+0x2a8>)
 8001894:	f7fe feb8 	bl	8000608 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b91      	ldr	r3, [pc, #580]	; (8001aec <Inlet+0x2ac>)
 80018a6:	f7fe feaf 	bl	8000608 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double startTime = HAL_GetTick();
 80018b2:	f002 fa2b 	bl	8003d0c <HAL_GetTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe2b 	bl	8000514 <__aeabi_ui2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9c7 2300 	strd	r2, r3, [r7]
	double newTime = startTime + 1;
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <Inlet+0x2b0>)
 80018cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d0:	f7fe fce4 	bl	800029c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e2:	4884      	ldr	r0, [pc, #528]	; (8001af4 <Inlet+0x2b4>)
 80018e4:	f003 f928 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	4881      	ldr	r0, [pc, #516]	; (8001af4 <Inlet+0x2b4>)
 80018f0:	f003 f922 	bl	8004b38 <HAL_GPIO_WritePin>
	moveServo(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f7ff ff92 	bl	8001820 <moveServo>

	updateWaterLevel();
 80018fc:	f7ff fef4 	bl	80016e8 <updateWaterLevel>

	if(distance <= maxWaterLevel){
 8001900:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <Inlet+0x298>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe15 	bl	8000534 <__aeabi_i2d>
 800190a:	4b74      	ldr	r3, [pc, #464]	; (8001adc <Inlet+0x29c>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7ff f8f6 	bl	8000b00 <__aeabi_dcmple>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <Inlet+0xee>
			distance = maxWaterLevel;
 800191a:	4b70      	ldr	r3, [pc, #448]	; (8001adc <Inlet+0x29c>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f920 	bl	8000b68 <__aeabi_d2iz>
 8001928:	4603      	mov	r3, r0
 800192a:	4a6b      	ldr	r2, [pc, #428]	; (8001ad8 <Inlet+0x298>)
 800192c:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <Inlet+0x298>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdfe 	bl	8000534 <__aeabi_i2d>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <Inlet+0x2b8>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7ff f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <Inlet+0x11c>
		distance = minWaterLevel;
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <Inlet+0x2b8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f909 	bl	8000b68 <__aeabi_d2iz>
 8001956:	4603      	mov	r3, r0
 8001958:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <Inlet+0x298>)
 800195a:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <Inlet+0x2b8>)
 800195e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <Inlet+0x298>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fde4 	bl	8000534 <__aeabi_i2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc90 	bl	8000298 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <Inlet+0x2bc>)
 8001986:	f7fe ff69 	bl	800085c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	a34f      	add	r3, pc, #316	; (adr r3, 8001ad0 <Inlet+0x290>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe36 	bl	8000608 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4957      	ldr	r1, [pc, #348]	; (8001b00 <Inlet+0x2c0>)
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]
	if (inletSpeed == 0){
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <Inlet+0x2c4>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <Inlet+0x188>
		updateADCValue();
 80019ae:	f7ff fe7d 	bl	80016ac <updateADCValue>
		speed = ADC_CH9;
 80019b2:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <Inlet+0x2c8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	83fb      	strh	r3, [r7, #30]
		changeMotorSpeed(0, speed, 1);
 80019b8:	8bfb      	ldrh	r3, [r7, #30]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	4619      	mov	r1, r3
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fe09 	bl	80015d8 <changeMotorSpeed>
 80019c6:	e01b      	b.n	8001a00 <Inlet+0x1c0>
	}
	else{
		if(inletSpeed == 8){
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <Inlet+0x2c4>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d102      	bne.n	80019d6 <Inlet+0x196>
			speed = 85;
 80019d0:	2355      	movs	r3, #85	; 0x55
 80019d2:	83fb      	strh	r3, [r7, #30]
 80019d4:	e00d      	b.n	80019f2 <Inlet+0x1b2>
		}
		else if(inletSpeed == 9){
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <Inlet+0x2c4>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2b09      	cmp	r3, #9
 80019dc:	d102      	bne.n	80019e4 <Inlet+0x1a4>
			speed = 99;
 80019de:	2363      	movs	r3, #99	; 0x63
 80019e0:	83fb      	strh	r3, [r7, #30]
 80019e2:	e006      	b.n	80019f2 <Inlet+0x1b2>
		}
		else{
			speed = inletSpeed * 10;
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <Inlet+0x2c4>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	83fb      	strh	r3, [r7, #30]
		}
		changeMotorSpeed(0, speed, 0);
 80019f2:	8bfb      	ldrh	r3, [r7, #30]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fdec 	bl	80015d8 <changeMotorSpeed>
	}
	updateRPM();
 8001a00:	f7ff fece 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Inlet, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8001a04:	8bf8      	ldrh	r0, [r7, #30]
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <Inlet+0x2cc>)
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <Inlet+0x298>)
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <Inlet+0x2c0>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	493c      	ldr	r1, [pc, #240]	; (8001b10 <Inlet+0x2d0>)
 8001a20:	483c      	ldr	r0, [pc, #240]	; (8001b14 <Inlet+0x2d4>)
 8001a22:	f006 f941 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001a26:	483b      	ldr	r0, [pc, #236]	; (8001b14 <Inlet+0x2d4>)
 8001a28:	f7fe fbda 	bl	80001e0 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a34:	4937      	ldr	r1, [pc, #220]	; (8001b14 <Inlet+0x2d4>)
 8001a36:	4838      	ldr	r0, [pc, #224]	; (8001b18 <Inlet+0x2d8>)
 8001a38:	f004 fc6f 	bl	800631a <HAL_UART_Transmit>

	while (newTime - startTime <= zoneTimeInMS || distance > maxWaterLevel){
 8001a3c:	e0d4      	b.n	8001be8 <Inlet+0x3a8>
		if (inletSpeed == 0){
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <Inlet+0x2c4>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <Inlet+0x220>
			updateADCValue();
 8001a46:	f7ff fe31 	bl	80016ac <updateADCValue>
			speed = ADC_CH9;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <Inlet+0x2c8>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	83fb      	strh	r3, [r7, #30]
			changeMotorSpeed(0, speed, 1);
 8001a50:	8bfb      	ldrh	r3, [r7, #30]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2201      	movs	r2, #1
 8001a56:	4619      	mov	r1, r3
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fdbd 	bl	80015d8 <changeMotorSpeed>
 8001a5e:	e01b      	b.n	8001a98 <Inlet+0x258>
		}
		else{
			if(inletSpeed == 8){
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <Inlet+0x2c4>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d102      	bne.n	8001a6e <Inlet+0x22e>
				speed = 85;
 8001a68:	2355      	movs	r3, #85	; 0x55
 8001a6a:	83fb      	strh	r3, [r7, #30]
 8001a6c:	e00d      	b.n	8001a8a <Inlet+0x24a>
			}
			else if(inletSpeed == 9){
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <Inlet+0x2c4>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	d102      	bne.n	8001a7c <Inlet+0x23c>
				speed = 99;
 8001a76:	2363      	movs	r3, #99	; 0x63
 8001a78:	83fb      	strh	r3, [r7, #30]
 8001a7a:	e006      	b.n	8001a8a <Inlet+0x24a>
			}
			else{
				speed = inletSpeed * 10;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <Inlet+0x2c4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	83fb      	strh	r3, [r7, #30]
			}
			changeMotorSpeed(0, speed, 0);
 8001a8a:	8bfb      	ldrh	r3, [r7, #30]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fda0 	bl	80015d8 <changeMotorSpeed>
		}
		updateWaterLevel();
 8001a98:	f7ff fe26 	bl	80016e8 <updateWaterLevel>
		if(distance <= maxWaterLevel){
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <Inlet+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd47 	bl	8000534 <__aeabi_i2d>
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <Inlet+0x29c>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7ff f828 	bl	8000b00 <__aeabi_dcmple>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d032      	beq.n	8001b1c <Inlet+0x2dc>
			distance = maxWaterLevel;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <Inlet+0x29c>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f852 	bl	8000b68 <__aeabi_d2iz>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <Inlet+0x298>)
 8001ac8:	6013      	str	r3, [r2, #0]
			break;
 8001aca:	e0ab      	b.n	8001c24 <Inlet+0x3e4>
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	4058c000 	.word	0x4058c000
 8001ad8:	20000510 	.word	0x20000510
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000518 	.word	0x20000518
 8001ae4:	40240000 	.word	0x40240000
 8001ae8:	404e0000 	.word	0x404e0000
 8001aec:	408f4000 	.word	0x408f4000
 8001af0:	3ff00000 	.word	0x3ff00000
 8001af4:	40020000 	.word	0x40020000
 8001af8:	20000010 	.word	0x20000010
 8001afc:	40590000 	.word	0x40590000
 8001b00:	20000558 	.word	0x20000558
 8001b04:	20000514 	.word	0x20000514
 8001b08:	20000506 	.word	0x20000506
 8001b0c:	20000508 	.word	0x20000508
 8001b10:	0800a1b0 	.word	0x0800a1b0
 8001b14:	20000404 	.word	0x20000404
 8001b18:	200003c0 	.word	0x200003c0
		}
		if(distance > minWaterLevel){
 8001b1c:	4b84      	ldr	r3, [pc, #528]	; (8001d30 <Inlet+0x4f0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd07 	bl	8000534 <__aeabi_i2d>
 8001b26:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <Inlet+0x4f4>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fffc 	bl	8000b28 <__aeabi_dcmpgt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <Inlet+0x30a>
			distance = minWaterLevel;
 8001b36:	4b7f      	ldr	r3, [pc, #508]	; (8001d34 <Inlet+0x4f4>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f812 	bl	8000b68 <__aeabi_d2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <Inlet+0x4f0>)
 8001b48:	6013      	str	r3, [r2, #0]
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <Inlet+0x4f4>)
 8001b4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b50:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <Inlet+0x4f0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fced 	bl	8000534 <__aeabi_i2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fb99 	bl	8000298 <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b71      	ldr	r3, [pc, #452]	; (8001d38 <Inlet+0x4f8>)
 8001b74:	f7fe fe72 	bl	800085c <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	a369      	add	r3, pc, #420	; (adr r3, 8001d28 <Inlet+0x4e8>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fd3f 	bl	8000608 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	496b      	ldr	r1, [pc, #428]	; (8001d3c <Inlet+0x4fc>)
 8001b90:	e9c1 2300 	strd	r2, r3, [r1]
		updateTimerDisplay();
 8001b94:	f7ff fdd2 	bl	800173c <updateTimerDisplay>
		newTime = (double)HAL_GetTick();
 8001b98:	f002 f8b8 	bl	8003d0c <HAL_GetTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcb8 	bl	8000514 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		updateRPM();
 8001bac:	f7ff fdf8 	bl	80017a0 <updateRPM>
		sprintf((char*)txd_msg_buffer, "\r\n Zone: Inlet, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8001bb0:	8bf8      	ldrh	r0, [r7, #30]
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <Inlet+0x500>)
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <Inlet+0x4f0>)
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <Inlet+0x4fc>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bc4:	9100      	str	r1, [sp, #0]
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	4602      	mov	r2, r0
 8001bca:	495e      	ldr	r1, [pc, #376]	; (8001d44 <Inlet+0x504>)
 8001bcc:	485e      	ldr	r0, [pc, #376]	; (8001d48 <Inlet+0x508>)
 8001bce:	f006 f86b 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001bd2:	485d      	ldr	r0, [pc, #372]	; (8001d48 <Inlet+0x508>)
 8001bd4:	f7fe fb04 	bl	80001e0 <strlen>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be0:	4959      	ldr	r1, [pc, #356]	; (8001d48 <Inlet+0x508>)
 8001be2:	485a      	ldr	r0, [pc, #360]	; (8001d4c <Inlet+0x50c>)
 8001be4:	f004 fb99 	bl	800631a <HAL_UART_Transmit>
	while (newTime - startTime <= zoneTimeInMS || distance > maxWaterLevel){
 8001be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf0:	f7fe fb52 	bl	8000298 <__aeabi_dsub>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bfc:	f7fe ff8a 	bl	8000b14 <__aeabi_dcmpge>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f af1b 	bne.w	8001a3e <Inlet+0x1fe>
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <Inlet+0x4f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc91 	bl	8000534 <__aeabi_i2d>
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <Inlet+0x510>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff86 	bl	8000b28 <__aeabi_dcmpgt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f af0d 	bne.w	8001a3e <Inlet+0x1fe>
	}
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	484a      	ldr	r0, [pc, #296]	; (8001d54 <Inlet+0x514>)
 8001c2c:	f002 ff84 	bl	8004b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c36:	4847      	ldr	r0, [pc, #284]	; (8001d54 <Inlet+0x514>)
 8001c38:	f002 ff7e 	bl	8004b38 <HAL_GPIO_WritePin>

	if(distance <= maxWaterLevel){
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <Inlet+0x4f0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc77 	bl	8000534 <__aeabi_i2d>
 8001c46:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <Inlet+0x510>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe ff58 	bl	8000b00 <__aeabi_dcmple>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <Inlet+0x42a>
			distance = maxWaterLevel;
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <Inlet+0x510>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7fe ff82 	bl	8000b68 <__aeabi_d2iz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <Inlet+0x4f0>)
 8001c68:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <Inlet+0x4f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc60 	bl	8000534 <__aeabi_i2d>
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <Inlet+0x4f4>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe ff55 	bl	8000b28 <__aeabi_dcmpgt>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <Inlet+0x458>
		distance = minWaterLevel;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <Inlet+0x4f4>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ff6b 	bl	8000b68 <__aeabi_d2iz>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <Inlet+0x4f0>)
 8001c96:	6013      	str	r3, [r2, #0]
	}
	updateRPM();
 8001c98:	f7ff fd82 	bl	80017a0 <updateRPM>
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <Inlet+0x4f4>)
 8001c9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <Inlet+0x4f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc44 	bl	8000534 <__aeabi_i2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe faf0 	bl	8000298 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <Inlet+0x4f8>)
 8001cc6:	f7fe fdc9 	bl	800085c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	a315      	add	r3, pc, #84	; (adr r3, 8001d28 <Inlet+0x4e8>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fc96 	bl	8000608 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <Inlet+0x4fc>)
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Inlet, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8001ce6:	8bf8      	ldrh	r0, [r7, #30]
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <Inlet+0x500>)
 8001cea:	681c      	ldr	r4, [r3, #0]
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <Inlet+0x4f0>)
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <Inlet+0x4fc>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cfa:	9100      	str	r1, [sp, #0]
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4910      	ldr	r1, [pc, #64]	; (8001d44 <Inlet+0x504>)
 8001d02:	4811      	ldr	r0, [pc, #68]	; (8001d48 <Inlet+0x508>)
 8001d04:	f005 ffd0 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <Inlet+0x508>)
 8001d0a:	f7fe fa69 	bl	80001e0 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	490c      	ldr	r1, [pc, #48]	; (8001d48 <Inlet+0x508>)
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <Inlet+0x50c>)
 8001d1a:	f004 fafe 	bl	800631a <HAL_UART_Transmit>
}
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	f3af 8000 	nop.w
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	4058c000 	.word	0x4058c000
 8001d30:	20000510 	.word	0x20000510
 8001d34:	20000010 	.word	0x20000010
 8001d38:	40590000 	.word	0x40590000
 8001d3c:	20000558 	.word	0x20000558
 8001d40:	20000508 	.word	0x20000508
 8001d44:	0800a1b0 	.word	0x0800a1b0
 8001d48:	20000404 	.word	0x20000404
 8001d4c:	200003c0 	.word	0x200003c0
 8001d50:	20000008 	.word	0x20000008
 8001d54:	40020000 	.word	0x40020000

08001d58 <Outlet1>:

void Outlet1(){
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af04      	add	r7, sp, #16
	uint16_t speed;
	double zoneTimeInMS = (time1/10)*60*1000;
 8001d5e:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <Outlet1+0x280>)
 8001d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <Outlet1+0x284>)
 8001d6a:	f7fe fd77 	bl	800085c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <Outlet1+0x288>)
 8001d7c:	f7fe fc44 	bl	8000608 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <Outlet1+0x28c>)
 8001d8e:	f7fe fc3b 	bl	8000608 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double startTime = HAL_GetTick();
 8001d9a:	f001 ffb7 	bl	8003d0c <HAL_GetTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbb7 	bl	8000514 <__aeabi_ui2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	e9c7 2300 	strd	r2, r3, [r7]
	double newTime = startTime + 1;
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <Outlet1+0x290>)
 8001db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dca:	4888      	ldr	r0, [pc, #544]	; (8001fec <Outlet1+0x294>)
 8001dcc:	f002 feb4 	bl	8004b38 <HAL_GPIO_WritePin>
	moveServo(1500);
 8001dd0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001dd4:	f7ff fd24 	bl	8001820 <moveServo>

	updateWaterLevel();
 8001dd8:	f7ff fc86 	bl	80016e8 <updateWaterLevel>

	if(distance <= maxWaterLevel){
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <Outlet1+0x298>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fba7 	bl	8000534 <__aeabi_i2d>
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <Outlet1+0x29c>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fe88 	bl	8000b00 <__aeabi_dcmple>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <Outlet1+0xb2>
			distance = maxWaterLevel;
 8001df6:	4b7f      	ldr	r3, [pc, #508]	; (8001ff4 <Outlet1+0x29c>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe feb2 	bl	8000b68 <__aeabi_d2iz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <Outlet1+0x298>)
 8001e08:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 8001e0a:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <Outlet1+0x298>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb90 	bl	8000534 <__aeabi_i2d>
 8001e14:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <Outlet1+0x2a0>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <Outlet1+0xe0>
		distance = minWaterLevel;
 8001e24:	4b74      	ldr	r3, [pc, #464]	; (8001ff8 <Outlet1+0x2a0>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe9b 	bl	8000b68 <__aeabi_d2iz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a6e      	ldr	r2, [pc, #440]	; (8001ff0 <Outlet1+0x298>)
 8001e36:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <Outlet1+0x2a0>)
 8001e3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <Outlet1+0x298>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb76 	bl	8000534 <__aeabi_i2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa22 	bl	8000298 <__aeabi_dsub>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <Outlet1+0x2a4>)
 8001e62:	f7fe fcfb 	bl	800085c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	a358      	add	r3, pc, #352	; (adr r3, 8001fd0 <Outlet1+0x278>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fbc8 	bl	8000608 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4960      	ldr	r1, [pc, #384]	; (8002000 <Outlet1+0x2a8>)
 8001e7e:	e9c1 2300 	strd	r2, r3, [r1]
	if (speed1 == 0){
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <Outlet1+0x2ac>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <Outlet1+0x14c>
		updateADCValue();
 8001e8a:	f7ff fc0f 	bl	80016ac <updateADCValue>
		speed = ADC_CH9;
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <Outlet1+0x2b0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	83fb      	strh	r3, [r7, #30]
		changeMotorSpeed(0, speed, 1);
 8001e94:	8bfb      	ldrh	r3, [r7, #30]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fb9b 	bl	80015d8 <changeMotorSpeed>
 8001ea2:	e01b      	b.n	8001edc <Outlet1+0x184>
	}
	else{
		if(speed1 == 8){
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <Outlet1+0x2ac>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d102      	bne.n	8001eb2 <Outlet1+0x15a>
			speed = 85;
 8001eac:	2355      	movs	r3, #85	; 0x55
 8001eae:	83fb      	strh	r3, [r7, #30]
 8001eb0:	e00d      	b.n	8001ece <Outlet1+0x176>
		}
		else if(speed1 == 9){
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <Outlet1+0x2ac>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	2b09      	cmp	r3, #9
 8001eb8:	d102      	bne.n	8001ec0 <Outlet1+0x168>
			speed = 99;
 8001eba:	2363      	movs	r3, #99	; 0x63
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	e006      	b.n	8001ece <Outlet1+0x176>
		}
		else{
			speed = speed1 * 10;
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <Outlet1+0x2ac>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	83fb      	strh	r3, [r7, #30]
		}
		changeMotorSpeed(0, speed, 0);
 8001ece:	8bfb      	ldrh	r3, [r7, #30]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fb7e 	bl	80015d8 <changeMotorSpeed>
	}
	updateRPM();
 8001edc:	f7ff fc60 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 1, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8001ee0:	8bf8      	ldrh	r0, [r7, #30]
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <Outlet1+0x2b4>)
 8001ee4:	681c      	ldr	r4, [r3, #0]
 8001ee6:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <Outlet1+0x298>)
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	4b45      	ldr	r3, [pc, #276]	; (8002000 <Outlet1+0x2a8>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef4:	9100      	str	r1, [sp, #0]
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4945      	ldr	r1, [pc, #276]	; (8002010 <Outlet1+0x2b8>)
 8001efc:	4845      	ldr	r0, [pc, #276]	; (8002014 <Outlet1+0x2bc>)
 8001efe:	f005 fed3 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001f02:	4844      	ldr	r0, [pc, #272]	; (8002014 <Outlet1+0x2bc>)
 8001f04:	f7fe f96c 	bl	80001e0 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f10:	4940      	ldr	r1, [pc, #256]	; (8002014 <Outlet1+0x2bc>)
 8001f12:	4841      	ldr	r0, [pc, #260]	; (8002018 <Outlet1+0x2c0>)
 8001f14:	f004 fa01 	bl	800631a <HAL_UART_Transmit>

	while (newTime - startTime <= zoneTimeInMS){
 8001f18:	e0e6      	b.n	80020e8 <Outlet1+0x390>
		if (speed1 == 0){
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <Outlet1+0x2ac>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <Outlet1+0x1e4>
			updateADCValue();
 8001f22:	f7ff fbc3 	bl	80016ac <updateADCValue>
			speed = ADC_CH9;
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <Outlet1+0x2b0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	83fb      	strh	r3, [r7, #30]
			changeMotorSpeed(1, speed, 1);
 8001f2c:	8bfb      	ldrh	r3, [r7, #30]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fb4f 	bl	80015d8 <changeMotorSpeed>
 8001f3a:	e01b      	b.n	8001f74 <Outlet1+0x21c>
		}
		else{
			if(speed1 == 8){
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <Outlet1+0x2ac>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d102      	bne.n	8001f4a <Outlet1+0x1f2>
				speed = 85;
 8001f44:	2355      	movs	r3, #85	; 0x55
 8001f46:	83fb      	strh	r3, [r7, #30]
 8001f48:	e00d      	b.n	8001f66 <Outlet1+0x20e>
			}
			else if(speed1 == 9){
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <Outlet1+0x2ac>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2b09      	cmp	r3, #9
 8001f50:	d102      	bne.n	8001f58 <Outlet1+0x200>
				speed = 99;
 8001f52:	2363      	movs	r3, #99	; 0x63
 8001f54:	83fb      	strh	r3, [r7, #30]
 8001f56:	e006      	b.n	8001f66 <Outlet1+0x20e>
			}
			else{
				speed = speed1 * 10;
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Outlet1+0x2ac>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	83fb      	strh	r3, [r7, #30]
			}
			changeMotorSpeed(1, speed, 0);
 8001f66:	8bfb      	ldrh	r3, [r7, #30]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff fb32 	bl	80015d8 <changeMotorSpeed>
		}
		updateWaterLevel();
 8001f74:	f7ff fbb8 	bl	80016e8 <updateWaterLevel>
		if (distance >= minWaterLevel){
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <Outlet1+0x298>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fad9 	bl	8000534 <__aeabi_i2d>
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <Outlet1+0x2a0>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fdc4 	bl	8000b14 <__aeabi_dcmpge>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d044      	beq.n	800201c <Outlet1+0x2c4>
			distance = minWaterLevel;
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <Outlet1+0x2a0>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fde4 	bl	8000b68 <__aeabi_d2iz>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <Outlet1+0x298>)
 8001fa4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <Outlet1+0x294>)
 8001fae:	f002 fdc3 	bl	8004b38 <HAL_GPIO_WritePin>
			Inlet();
 8001fb2:	f7ff fc45 	bl	8001840 <Inlet>
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <Outlet1+0x294>)
 8001fbe:	f002 fdbb 	bl	8004b38 <HAL_GPIO_WritePin>
			moveServo(1500);
 8001fc2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001fc6:	f7ff fc2b 	bl	8001820 <moveServo>
 8001fca:	e03e      	b.n	800204a <Outlet1+0x2f2>
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	4058c000 	.word	0x4058c000
 8001fd8:	20000528 	.word	0x20000528
 8001fdc:	40240000 	.word	0x40240000
 8001fe0:	404e0000 	.word	0x404e0000
 8001fe4:	408f4000 	.word	0x408f4000
 8001fe8:	3ff00000 	.word	0x3ff00000
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	20000510 	.word	0x20000510
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	40590000 	.word	0x40590000
 8002000:	20000558 	.word	0x20000558
 8002004:	20000520 	.word	0x20000520
 8002008:	20000506 	.word	0x20000506
 800200c:	20000508 	.word	0x20000508
 8002010:	0800a20c 	.word	0x0800a20c
 8002014:	20000404 	.word	0x20000404
 8002018:	200003c0 	.word	0x200003c0
		}
		else if(distance < maxWaterLevel){
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <Outlet1+0x4b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa87 	bl	8000534 <__aeabi_i2d>
 8002026:	4b79      	ldr	r3, [pc, #484]	; (800220c <Outlet1+0x4b4>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fd5e 	bl	8000aec <__aeabi_dcmplt>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <Outlet1+0x2f2>
			distance = maxWaterLevel;
 8002036:	4b75      	ldr	r3, [pc, #468]	; (800220c <Outlet1+0x4b4>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fd92 	bl	8000b68 <__aeabi_d2iz>
 8002044:	4603      	mov	r3, r0
 8002046:	4a70      	ldr	r2, [pc, #448]	; (8002208 <Outlet1+0x4b0>)
 8002048:	6013      	str	r3, [r2, #0]
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
 800204a:	4b71      	ldr	r3, [pc, #452]	; (8002210 <Outlet1+0x4b8>)
 800204c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <Outlet1+0x4b0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa6d 	bl	8000534 <__aeabi_i2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f7fe f919 	bl	8000298 <__aeabi_dsub>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b68      	ldr	r3, [pc, #416]	; (8002214 <Outlet1+0x4bc>)
 8002074:	f7fe fbf2 	bl	800085c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	a35f      	add	r3, pc, #380	; (adr r3, 8002200 <Outlet1+0x4a8>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe fabf 	bl	8000608 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4962      	ldr	r1, [pc, #392]	; (8002218 <Outlet1+0x4c0>)
 8002090:	e9c1 2300 	strd	r2, r3, [r1]
		updateTimerDisplay();
 8002094:	f7ff fb52 	bl	800173c <updateTimerDisplay>
		newTime = (double)HAL_GetTick();
 8002098:	f001 fe38 	bl	8003d0c <HAL_GetTick>
 800209c:	4603      	mov	r3, r0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa38 	bl	8000514 <__aeabi_ui2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		updateRPM();
 80020ac:	f7ff fb78 	bl	80017a0 <updateRPM>
		sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 1, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 80020b0:	8bf8      	ldrh	r0, [r7, #30]
 80020b2:	4b5a      	ldr	r3, [pc, #360]	; (800221c <Outlet1+0x4c4>)
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <Outlet1+0x4b0>)
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	4b57      	ldr	r3, [pc, #348]	; (8002218 <Outlet1+0x4c0>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020c4:	9100      	str	r1, [sp, #0]
 80020c6:	4623      	mov	r3, r4
 80020c8:	4602      	mov	r2, r0
 80020ca:	4955      	ldr	r1, [pc, #340]	; (8002220 <Outlet1+0x4c8>)
 80020cc:	4855      	ldr	r0, [pc, #340]	; (8002224 <Outlet1+0x4cc>)
 80020ce:	f005 fdeb 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80020d2:	4854      	ldr	r0, [pc, #336]	; (8002224 <Outlet1+0x4cc>)
 80020d4:	f7fe f884 	bl	80001e0 <strlen>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e0:	4950      	ldr	r1, [pc, #320]	; (8002224 <Outlet1+0x4cc>)
 80020e2:	4851      	ldr	r0, [pc, #324]	; (8002228 <Outlet1+0x4d0>)
 80020e4:	f004 f919 	bl	800631a <HAL_UART_Transmit>
	while (newTime - startTime <= zoneTimeInMS){
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f0:	f7fe f8d2 	bl	8000298 <__aeabi_dsub>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020fc:	f7fe fd0a 	bl	8000b14 <__aeabi_dcmpge>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f af09 	bne.w	8001f1a <Outlet1+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210e:	4847      	ldr	r0, [pc, #284]	; (800222c <Outlet1+0x4d4>)
 8002110:	f002 fd12 	bl	8004b38 <HAL_GPIO_WritePin>


	if(distance <= maxWaterLevel){
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <Outlet1+0x4b0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa0b 	bl	8000534 <__aeabi_i2d>
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <Outlet1+0x4b4>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fcec 	bl	8000b00 <__aeabi_dcmple>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <Outlet1+0x3ea>
			distance = maxWaterLevel;
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <Outlet1+0x4b4>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd16 	bl	8000b68 <__aeabi_d2iz>
 800213c:	4603      	mov	r3, r0
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <Outlet1+0x4b0>)
 8002140:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <Outlet1+0x4b0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9f4 	bl	8000534 <__aeabi_i2d>
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <Outlet1+0x4b8>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fce9 	bl	8000b28 <__aeabi_dcmpgt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <Outlet1+0x418>
		distance = minWaterLevel;
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <Outlet1+0x4b8>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fcff 	bl	8000b68 <__aeabi_d2iz>
 800216a:	4603      	mov	r3, r0
 800216c:	4a26      	ldr	r2, [pc, #152]	; (8002208 <Outlet1+0x4b0>)
 800216e:	6013      	str	r3, [r2, #0]
	}
	updateRPM();
 8002170:	f7ff fb16 	bl	80017a0 <updateRPM>
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <Outlet1+0x4b8>)
 8002176:	e9d3 4500 	ldrd	r4, r5, [r3]
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <Outlet1+0x4b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9d8 	bl	8000534 <__aeabi_i2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe f884 	bl	8000298 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <Outlet1+0x4bc>)
 800219e:	f7fe fb5d 	bl	800085c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	a315      	add	r3, pc, #84	; (adr r3, 8002200 <Outlet1+0x4a8>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa2a 	bl	8000608 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4917      	ldr	r1, [pc, #92]	; (8002218 <Outlet1+0x4c0>)
 80021ba:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 1, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 80021be:	8bf8      	ldrh	r0, [r7, #30]
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <Outlet1+0x4c4>)
 80021c2:	681c      	ldr	r4, [r3, #0]
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <Outlet1+0x4b0>)
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <Outlet1+0x4c0>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021d2:	9100      	str	r1, [sp, #0]
 80021d4:	4623      	mov	r3, r4
 80021d6:	4602      	mov	r2, r0
 80021d8:	4911      	ldr	r1, [pc, #68]	; (8002220 <Outlet1+0x4c8>)
 80021da:	4812      	ldr	r0, [pc, #72]	; (8002224 <Outlet1+0x4cc>)
 80021dc:	f005 fd64 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80021e0:	4810      	ldr	r0, [pc, #64]	; (8002224 <Outlet1+0x4cc>)
 80021e2:	f7fd fffd 	bl	80001e0 <strlen>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ee:	490d      	ldr	r1, [pc, #52]	; (8002224 <Outlet1+0x4cc>)
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <Outlet1+0x4d0>)
 80021f2:	f004 f892 	bl	800631a <HAL_UART_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
 80021fe:	bf00      	nop
 8002200:	00000000 	.word	0x00000000
 8002204:	4058c000 	.word	0x4058c000
 8002208:	20000510 	.word	0x20000510
 800220c:	20000008 	.word	0x20000008
 8002210:	20000010 	.word	0x20000010
 8002214:	40590000 	.word	0x40590000
 8002218:	20000558 	.word	0x20000558
 800221c:	20000508 	.word	0x20000508
 8002220:	0800a20c 	.word	0x0800a20c
 8002224:	20000404 	.word	0x20000404
 8002228:	200003c0 	.word	0x200003c0
 800222c:	40020000 	.word	0x40020000

08002230 <Outlet2>:

void Outlet2(){
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af04      	add	r7, sp, #16
	uint16_t speed;
	double zoneTimeInMS = (time2/10)*60*1000;
 8002236:	4b9e      	ldr	r3, [pc, #632]	; (80024b0 <Outlet2+0x280>)
 8002238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b9c      	ldr	r3, [pc, #624]	; (80024b4 <Outlet2+0x284>)
 8002242:	f7fe fb0b 	bl	800085c <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b99      	ldr	r3, [pc, #612]	; (80024b8 <Outlet2+0x288>)
 8002254:	f7fe f9d8 	bl	8000608 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b95      	ldr	r3, [pc, #596]	; (80024bc <Outlet2+0x28c>)
 8002266:	f7fe f9cf 	bl	8000608 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double startTime = HAL_GetTick();
 8002272:	f001 fd4b 	bl	8003d0c <HAL_GetTick>
 8002276:	4603      	mov	r3, r0
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f94b 	bl	8000514 <__aeabi_ui2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	e9c7 2300 	strd	r2, r3, [r7]
	double newTime = startTime + 1;
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b8d      	ldr	r3, [pc, #564]	; (80024c0 <Outlet2+0x290>)
 800228c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002290:	f7fe f804 	bl	800029c <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	e9c7 2304 	strd	r2, r3, [r7, #16]
	HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a2:	4888      	ldr	r0, [pc, #544]	; (80024c4 <Outlet2+0x294>)
 80022a4:	f002 fc48 	bl	8004b38 <HAL_GPIO_WritePin>
	moveServo(2500);
 80022a8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80022ac:	f7ff fab8 	bl	8001820 <moveServo>

	updateWaterLevel();
 80022b0:	f7ff fa1a 	bl	80016e8 <updateWaterLevel>

	if(distance <= maxWaterLevel){
 80022b4:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <Outlet2+0x298>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f93b 	bl	8000534 <__aeabi_i2d>
 80022be:	4b83      	ldr	r3, [pc, #524]	; (80024cc <Outlet2+0x29c>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe fc1c 	bl	8000b00 <__aeabi_dcmple>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <Outlet2+0xb2>
			distance = maxWaterLevel;
 80022ce:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <Outlet2+0x29c>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc46 	bl	8000b68 <__aeabi_d2iz>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <Outlet2+0x298>)
 80022e0:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 80022e2:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <Outlet2+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f924 	bl	8000534 <__aeabi_i2d>
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <Outlet2+0x2a0>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe fc19 	bl	8000b28 <__aeabi_dcmpgt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <Outlet2+0xe0>
		distance = minWaterLevel;
 80022fc:	4b74      	ldr	r3, [pc, #464]	; (80024d0 <Outlet2+0x2a0>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc2f 	bl	8000b68 <__aeabi_d2iz>
 800230a:	4603      	mov	r3, r0
 800230c:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <Outlet2+0x298>)
 800230e:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8002310:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <Outlet2+0x2a0>)
 8002312:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <Outlet2+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f90a 	bl	8000534 <__aeabi_i2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fd ffb6 	bl	8000298 <__aeabi_dsub>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <Outlet2+0x2a4>)
 800233a:	f7fe fa8f 	bl	800085c <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	a358      	add	r3, pc, #352	; (adr r3, 80024a8 <Outlet2+0x278>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f95c 	bl	8000608 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4960      	ldr	r1, [pc, #384]	; (80024d8 <Outlet2+0x2a8>)
 8002356:	e9c1 2300 	strd	r2, r3, [r1]
	if (speed2 == 0){
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <Outlet2+0x2ac>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <Outlet2+0x14c>
		updateADCValue();
 8002362:	f7ff f9a3 	bl	80016ac <updateADCValue>
		speed = ADC_CH9;
 8002366:	4b5e      	ldr	r3, [pc, #376]	; (80024e0 <Outlet2+0x2b0>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	83fb      	strh	r3, [r7, #30]
		changeMotorSpeed(0, speed, 1);
 800236c:	8bfb      	ldrh	r3, [r7, #30]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2201      	movs	r2, #1
 8002372:	4619      	mov	r1, r3
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff f92f 	bl	80015d8 <changeMotorSpeed>
 800237a:	e01b      	b.n	80023b4 <Outlet2+0x184>
	}
	else{
		if(speed2 == 8){
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <Outlet2+0x2ac>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d102      	bne.n	800238a <Outlet2+0x15a>
			speed = 85;
 8002384:	2355      	movs	r3, #85	; 0x55
 8002386:	83fb      	strh	r3, [r7, #30]
 8002388:	e00d      	b.n	80023a6 <Outlet2+0x176>
		}
		else if(speed2 == 9){
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <Outlet2+0x2ac>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b09      	cmp	r3, #9
 8002390:	d102      	bne.n	8002398 <Outlet2+0x168>
			speed = 99;
 8002392:	2363      	movs	r3, #99	; 0x63
 8002394:	83fb      	strh	r3, [r7, #30]
 8002396:	e006      	b.n	80023a6 <Outlet2+0x176>
		}
		else{
			speed = speed2 * 10;
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <Outlet2+0x2ac>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	83fb      	strh	r3, [r7, #30]
		}
		changeMotorSpeed(0, speed, 0);
 80023a6:	8bfb      	ldrh	r3, [r7, #30]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff f912 	bl	80015d8 <changeMotorSpeed>
	}
	updateRPM();
 80023b4:	f7ff f9f4 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 2, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 80023b8:	8bf8      	ldrh	r0, [r7, #30]
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <Outlet2+0x2b4>)
 80023bc:	681c      	ldr	r4, [r3, #0]
 80023be:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <Outlet2+0x298>)
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <Outlet2+0x2a8>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023cc:	9100      	str	r1, [sp, #0]
 80023ce:	4623      	mov	r3, r4
 80023d0:	4602      	mov	r2, r0
 80023d2:	4945      	ldr	r1, [pc, #276]	; (80024e8 <Outlet2+0x2b8>)
 80023d4:	4845      	ldr	r0, [pc, #276]	; (80024ec <Outlet2+0x2bc>)
 80023d6:	f005 fc67 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80023da:	4844      	ldr	r0, [pc, #272]	; (80024ec <Outlet2+0x2bc>)
 80023dc:	f7fd ff00 	bl	80001e0 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	4940      	ldr	r1, [pc, #256]	; (80024ec <Outlet2+0x2bc>)
 80023ea:	4841      	ldr	r0, [pc, #260]	; (80024f0 <Outlet2+0x2c0>)
 80023ec:	f003 ff95 	bl	800631a <HAL_UART_Transmit>

	while (newTime - startTime <= zoneTimeInMS){
 80023f0:	e0e6      	b.n	80025c0 <Outlet2+0x390>
		if (speed2 == 0){
 80023f2:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <Outlet2+0x2ac>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <Outlet2+0x1e4>
			updateADCValue();
 80023fa:	f7ff f957 	bl	80016ac <updateADCValue>
			speed = ADC_CH9;
 80023fe:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <Outlet2+0x2b0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	83fb      	strh	r3, [r7, #30]
			changeMotorSpeed(1, speed, 1);
 8002404:	8bfb      	ldrh	r3, [r7, #30]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2201      	movs	r2, #1
 800240a:	4619      	mov	r1, r3
 800240c:	2001      	movs	r0, #1
 800240e:	f7ff f8e3 	bl	80015d8 <changeMotorSpeed>
 8002412:	e01b      	b.n	800244c <Outlet2+0x21c>
		}
		else{
			if(speed2 == 8){
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <Outlet2+0x2ac>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d102      	bne.n	8002422 <Outlet2+0x1f2>
				speed = 85;
 800241c:	2355      	movs	r3, #85	; 0x55
 800241e:	83fb      	strh	r3, [r7, #30]
 8002420:	e00d      	b.n	800243e <Outlet2+0x20e>
			}
			else if(speed2 == 9){
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <Outlet2+0x2ac>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	2b09      	cmp	r3, #9
 8002428:	d102      	bne.n	8002430 <Outlet2+0x200>
				speed = 99;
 800242a:	2363      	movs	r3, #99	; 0x63
 800242c:	83fb      	strh	r3, [r7, #30]
 800242e:	e006      	b.n	800243e <Outlet2+0x20e>
			}
			else{
				speed = speed2 * 10;
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <Outlet2+0x2ac>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4413      	add	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	83fb      	strh	r3, [r7, #30]
			}
			changeMotorSpeed(1, speed, 0);
 800243e:	8bfb      	ldrh	r3, [r7, #30]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2200      	movs	r2, #0
 8002444:	4619      	mov	r1, r3
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff f8c6 	bl	80015d8 <changeMotorSpeed>
		}
		updateWaterLevel();
 800244c:	f7ff f94c 	bl	80016e8 <updateWaterLevel>
		if (distance >= minWaterLevel){
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <Outlet2+0x298>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f86d 	bl	8000534 <__aeabi_i2d>
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <Outlet2+0x2a0>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe fb58 	bl	8000b14 <__aeabi_dcmpge>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d044      	beq.n	80024f4 <Outlet2+0x2c4>
			distance = minWaterLevel;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <Outlet2+0x2a0>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb78 	bl	8000b68 <__aeabi_d2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <Outlet2+0x298>)
 800247c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002484:	480f      	ldr	r0, [pc, #60]	; (80024c4 <Outlet2+0x294>)
 8002486:	f002 fb57 	bl	8004b38 <HAL_GPIO_WritePin>
			Inlet();
 800248a:	f7ff f9d9 	bl	8001840 <Inlet>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <Outlet2+0x294>)
 8002496:	f002 fb4f 	bl	8004b38 <HAL_GPIO_WritePin>
			moveServo(2500);
 800249a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800249e:	f7ff f9bf 	bl	8001820 <moveServo>
 80024a2:	e03e      	b.n	8002522 <Outlet2+0x2f2>
 80024a4:	f3af 8000 	nop.w
 80024a8:	00000000 	.word	0x00000000
 80024ac:	4058c000 	.word	0x4058c000
 80024b0:	20000538 	.word	0x20000538
 80024b4:	40240000 	.word	0x40240000
 80024b8:	404e0000 	.word	0x404e0000
 80024bc:	408f4000 	.word	0x408f4000
 80024c0:	3ff00000 	.word	0x3ff00000
 80024c4:	40020000 	.word	0x40020000
 80024c8:	20000510 	.word	0x20000510
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000010 	.word	0x20000010
 80024d4:	40590000 	.word	0x40590000
 80024d8:	20000558 	.word	0x20000558
 80024dc:	20000530 	.word	0x20000530
 80024e0:	20000506 	.word	0x20000506
 80024e4:	20000508 	.word	0x20000508
 80024e8:	0800a26c 	.word	0x0800a26c
 80024ec:	20000404 	.word	0x20000404
 80024f0:	200003c0 	.word	0x200003c0
		}
		else if(distance < maxWaterLevel){
 80024f4:	4b7a      	ldr	r3, [pc, #488]	; (80026e0 <Outlet2+0x4b0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f81b 	bl	8000534 <__aeabi_i2d>
 80024fe:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <Outlet2+0x4b4>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe faf2 	bl	8000aec <__aeabi_dcmplt>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <Outlet2+0x2f2>
			distance = maxWaterLevel;
 800250e:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <Outlet2+0x4b4>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe fb26 	bl	8000b68 <__aeabi_d2iz>
 800251c:	4603      	mov	r3, r0
 800251e:	4a70      	ldr	r2, [pc, #448]	; (80026e0 <Outlet2+0x4b0>)
 8002520:	6013      	str	r3, [r2, #0]
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
 8002522:	4b71      	ldr	r3, [pc, #452]	; (80026e8 <Outlet2+0x4b8>)
 8002524:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002528:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <Outlet2+0x4b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f801 	bl	8000534 <__aeabi_i2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f7fd fead 	bl	8000298 <__aeabi_dsub>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	4b68      	ldr	r3, [pc, #416]	; (80026ec <Outlet2+0x4bc>)
 800254c:	f7fe f986 	bl	800085c <__aeabi_ddiv>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	a35f      	add	r3, pc, #380	; (adr r3, 80026d8 <Outlet2+0x4a8>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f853 	bl	8000608 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4962      	ldr	r1, [pc, #392]	; (80026f0 <Outlet2+0x4c0>)
 8002568:	e9c1 2300 	strd	r2, r3, [r1]
		updateTimerDisplay();
 800256c:	f7ff f8e6 	bl	800173c <updateTimerDisplay>
		newTime = (double)HAL_GetTick();
 8002570:	f001 fbcc 	bl	8003d0c <HAL_GetTick>
 8002574:	4603      	mov	r3, r0
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffcc 	bl	8000514 <__aeabi_ui2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	e9c7 2304 	strd	r2, r3, [r7, #16]
		updateRPM();
 8002584:	f7ff f90c 	bl	80017a0 <updateRPM>
			sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 2, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8002588:	8bf8      	ldrh	r0, [r7, #30]
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <Outlet2+0x4c4>)
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <Outlet2+0x4b0>)
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <Outlet2+0x4c0>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800259c:	9100      	str	r1, [sp, #0]
 800259e:	4623      	mov	r3, r4
 80025a0:	4602      	mov	r2, r0
 80025a2:	4955      	ldr	r1, [pc, #340]	; (80026f8 <Outlet2+0x4c8>)
 80025a4:	4855      	ldr	r0, [pc, #340]	; (80026fc <Outlet2+0x4cc>)
 80025a6:	f005 fb7f 	bl	8007ca8 <siprintf>
			HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80025aa:	4854      	ldr	r0, [pc, #336]	; (80026fc <Outlet2+0x4cc>)
 80025ac:	f7fd fe18 	bl	80001e0 <strlen>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b8:	4950      	ldr	r1, [pc, #320]	; (80026fc <Outlet2+0x4cc>)
 80025ba:	4851      	ldr	r0, [pc, #324]	; (8002700 <Outlet2+0x4d0>)
 80025bc:	f003 fead 	bl	800631a <HAL_UART_Transmit>
	while (newTime - startTime <= zoneTimeInMS){
 80025c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025c8:	f7fd fe66 	bl	8000298 <__aeabi_dsub>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025d4:	f7fe fa9e 	bl	8000b14 <__aeabi_dcmpge>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f af09 	bne.w	80023f2 <Outlet2+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e6:	4847      	ldr	r0, [pc, #284]	; (8002704 <Outlet2+0x4d4>)
 80025e8:	f002 faa6 	bl	8004b38 <HAL_GPIO_WritePin>

	if(distance <= maxWaterLevel){
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <Outlet2+0x4b0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ff9f 	bl	8000534 <__aeabi_i2d>
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <Outlet2+0x4b4>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe fa80 	bl	8000b00 <__aeabi_dcmple>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <Outlet2+0x3ea>
			distance = maxWaterLevel;
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <Outlet2+0x4b4>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe faaa 	bl	8000b68 <__aeabi_d2iz>
 8002614:	4603      	mov	r3, r0
 8002616:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <Outlet2+0x4b0>)
 8002618:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <Outlet2+0x4b0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff88 	bl	8000534 <__aeabi_i2d>
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <Outlet2+0x4b8>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fe fa7d 	bl	8000b28 <__aeabi_dcmpgt>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <Outlet2+0x418>
		distance = minWaterLevel;
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <Outlet2+0x4b8>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa93 	bl	8000b68 <__aeabi_d2iz>
 8002642:	4603      	mov	r3, r0
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <Outlet2+0x4b0>)
 8002646:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <Outlet2+0x4b8>)
 800264a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <Outlet2+0x4b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff6e 	bl	8000534 <__aeabi_i2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fd fe1a 	bl	8000298 <__aeabi_dsub>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <Outlet2+0x4bc>)
 8002672:	f7fe f8f3 	bl	800085c <__aeabi_ddiv>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	a316      	add	r3, pc, #88	; (adr r3, 80026d8 <Outlet2+0x4a8>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd ffc0 	bl	8000608 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4918      	ldr	r1, [pc, #96]	; (80026f0 <Outlet2+0x4c0>)
 800268e:	e9c1 2300 	strd	r2, r3, [r1]
	updateRPM();
 8002692:	f7ff f885 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 2, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8002696:	8bf8      	ldrh	r0, [r7, #30]
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <Outlet2+0x4c4>)
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <Outlet2+0x4b0>)
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <Outlet2+0x4c0>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026aa:	9100      	str	r1, [sp, #0]
 80026ac:	4623      	mov	r3, r4
 80026ae:	4602      	mov	r2, r0
 80026b0:	4911      	ldr	r1, [pc, #68]	; (80026f8 <Outlet2+0x4c8>)
 80026b2:	4812      	ldr	r0, [pc, #72]	; (80026fc <Outlet2+0x4cc>)
 80026b4:	f005 faf8 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80026b8:	4810      	ldr	r0, [pc, #64]	; (80026fc <Outlet2+0x4cc>)
 80026ba:	f7fd fd91 	bl	80001e0 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <Outlet2+0x4cc>)
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <Outlet2+0x4d0>)
 80026ca:	f003 fe26 	bl	800631a <HAL_UART_Transmit>
}
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00000000 	.word	0x00000000
 80026dc:	4058c000 	.word	0x4058c000
 80026e0:	20000510 	.word	0x20000510
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000010 	.word	0x20000010
 80026ec:	40590000 	.word	0x40590000
 80026f0:	20000558 	.word	0x20000558
 80026f4:	20000508 	.word	0x20000508
 80026f8:	0800a26c 	.word	0x0800a26c
 80026fc:	20000404 	.word	0x20000404
 8002700:	200003c0 	.word	0x200003c0
 8002704:	40020000 	.word	0x40020000

08002708 <Outlet3>:

void Outlet3(){
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af04      	add	r7, sp, #16
	uint16_t speed;
	double zoneTimeInMS = (time3/10)*60*1000;
 800270e:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <Outlet3+0x280>)
 8002710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	4b9c      	ldr	r3, [pc, #624]	; (800298c <Outlet3+0x284>)
 800271a:	f7fe f89f 	bl	800085c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b99      	ldr	r3, [pc, #612]	; (8002990 <Outlet3+0x288>)
 800272c:	f7fd ff6c 	bl	8000608 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	4b95      	ldr	r3, [pc, #596]	; (8002994 <Outlet3+0x28c>)
 800273e:	f7fd ff63 	bl	8000608 <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double startTime = HAL_GetTick();
 800274a:	f001 fadf 	bl	8003d0c <HAL_GetTick>
 800274e:	4603      	mov	r3, r0
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fedf 	bl	8000514 <__aeabi_ui2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2300 	strd	r2, r3, [r7]
	double newTime = startTime + 1;
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b8d      	ldr	r3, [pc, #564]	; (8002998 <Outlet3+0x290>)
 8002764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002768:	f7fd fd98 	bl	800029c <__adddf3>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	e9c7 2304 	strd	r2, r3, [r7, #16]
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277a:	4888      	ldr	r0, [pc, #544]	; (800299c <Outlet3+0x294>)
 800277c:	f002 f9dc 	bl	8004b38 <HAL_GPIO_WritePin>
	moveServo(1000);
 8002780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002784:	f7ff f84c 	bl	8001820 <moveServo>

	updateWaterLevel();
 8002788:	f7fe ffae 	bl	80016e8 <updateWaterLevel>
	if(distance <= maxWaterLevel){
 800278c:	4b84      	ldr	r3, [pc, #528]	; (80029a0 <Outlet3+0x298>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fecf 	bl	8000534 <__aeabi_i2d>
 8002796:	4b83      	ldr	r3, [pc, #524]	; (80029a4 <Outlet3+0x29c>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fe f9b0 	bl	8000b00 <__aeabi_dcmple>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <Outlet3+0xb2>
			distance = maxWaterLevel;
 80027a6:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <Outlet3+0x29c>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f9da 	bl	8000b68 <__aeabi_d2iz>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <Outlet3+0x298>)
 80027b8:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 80027ba:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <Outlet3+0x298>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd feb8 	bl	8000534 <__aeabi_i2d>
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <Outlet3+0x2a0>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fe f9ad 	bl	8000b28 <__aeabi_dcmpgt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <Outlet3+0xe0>
		distance = minWaterLevel;
 80027d4:	4b74      	ldr	r3, [pc, #464]	; (80029a8 <Outlet3+0x2a0>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f7fe f9c3 	bl	8000b68 <__aeabi_d2iz>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <Outlet3+0x298>)
 80027e6:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <Outlet3+0x2a0>)
 80027ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027ee:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <Outlet3+0x298>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fe9e 	bl	8000534 <__aeabi_i2d>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fd fd4a 	bl	8000298 <__aeabi_dsub>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <Outlet3+0x2a4>)
 8002812:	f7fe f823 	bl	800085c <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	a358      	add	r3, pc, #352	; (adr r3, 8002980 <Outlet3+0x278>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fef0 	bl	8000608 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4960      	ldr	r1, [pc, #384]	; (80029b0 <Outlet3+0x2a8>)
 800282e:	e9c1 2300 	strd	r2, r3, [r1]
	if (inletSpeed == 0){
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <Outlet3+0x2ac>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <Outlet3+0x14c>
		updateADCValue();
 800283a:	f7fe ff37 	bl	80016ac <updateADCValue>
		speed = ADC_CH9;
 800283e:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <Outlet3+0x2b0>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	83fb      	strh	r3, [r7, #30]
		changeMotorSpeed(0, speed, 1);
 8002844:	8bfb      	ldrh	r3, [r7, #30]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2201      	movs	r2, #1
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fec3 	bl	80015d8 <changeMotorSpeed>
 8002852:	e01b      	b.n	800288c <Outlet3+0x184>
	}
	else{
		if(speed3 == 8){
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <Outlet3+0x2b4>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d102      	bne.n	8002862 <Outlet3+0x15a>
			speed = 85;
 800285c:	2355      	movs	r3, #85	; 0x55
 800285e:	83fb      	strh	r3, [r7, #30]
 8002860:	e00d      	b.n	800287e <Outlet3+0x176>
		}
		else if(speed3 == 9){
 8002862:	4b56      	ldr	r3, [pc, #344]	; (80029bc <Outlet3+0x2b4>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	2b09      	cmp	r3, #9
 8002868:	d102      	bne.n	8002870 <Outlet3+0x168>
			speed = 99;
 800286a:	2363      	movs	r3, #99	; 0x63
 800286c:	83fb      	strh	r3, [r7, #30]
 800286e:	e006      	b.n	800287e <Outlet3+0x176>
		}
		else{
			speed = speed3 * 10;
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <Outlet3+0x2b4>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	83fb      	strh	r3, [r7, #30]
		}
		changeMotorSpeed(0, speed, 0);
 800287e:	8bfb      	ldrh	r3, [r7, #30]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2200      	movs	r2, #0
 8002884:	4619      	mov	r1, r3
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe fea6 	bl	80015d8 <changeMotorSpeed>
	}
	updateRPM();
 800288c:	f7fe ff88 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 3, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8002890:	8bf8      	ldrh	r0, [r7, #30]
 8002892:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <Outlet3+0x2b8>)
 8002894:	681c      	ldr	r4, [r3, #0]
 8002896:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <Outlet3+0x298>)
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <Outlet3+0x2a8>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028a4:	9100      	str	r1, [sp, #0]
 80028a6:	4623      	mov	r3, r4
 80028a8:	4602      	mov	r2, r0
 80028aa:	4946      	ldr	r1, [pc, #280]	; (80029c4 <Outlet3+0x2bc>)
 80028ac:	4846      	ldr	r0, [pc, #280]	; (80029c8 <Outlet3+0x2c0>)
 80028ae:	f005 f9fb 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80028b2:	4845      	ldr	r0, [pc, #276]	; (80029c8 <Outlet3+0x2c0>)
 80028b4:	f7fd fc94 	bl	80001e0 <strlen>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c0:	4941      	ldr	r1, [pc, #260]	; (80029c8 <Outlet3+0x2c0>)
 80028c2:	4842      	ldr	r0, [pc, #264]	; (80029cc <Outlet3+0x2c4>)
 80028c4:	f003 fd29 	bl	800631a <HAL_UART_Transmit>
	while (newTime - startTime <= zoneTimeInMS){
 80028c8:	e0e8      	b.n	8002a9c <Outlet3+0x394>
		if (speed3 == 0){
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <Outlet3+0x2b4>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <Outlet3+0x1e4>
			updateADCValue();
 80028d2:	f7fe feeb 	bl	80016ac <updateADCValue>
			speed = ADC_CH9;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <Outlet3+0x2b0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	83fb      	strh	r3, [r7, #30]
			changeMotorSpeed(1, speed, 1);
 80028dc:	8bfb      	ldrh	r3, [r7, #30]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2201      	movs	r2, #1
 80028e2:	4619      	mov	r1, r3
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe fe77 	bl	80015d8 <changeMotorSpeed>
 80028ea:	e01b      	b.n	8002924 <Outlet3+0x21c>
		}
		else{
			if(speed3 == 8){
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <Outlet3+0x2b4>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d102      	bne.n	80028fa <Outlet3+0x1f2>
				speed = 85;
 80028f4:	2355      	movs	r3, #85	; 0x55
 80028f6:	83fb      	strh	r3, [r7, #30]
 80028f8:	e00d      	b.n	8002916 <Outlet3+0x20e>
			}
			else if(speed3 == 9){
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <Outlet3+0x2b4>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d102      	bne.n	8002908 <Outlet3+0x200>
				speed = 99;
 8002902:	2363      	movs	r3, #99	; 0x63
 8002904:	83fb      	strh	r3, [r7, #30]
 8002906:	e006      	b.n	8002916 <Outlet3+0x20e>
			}
			else{
				speed = speed3 * 10;
 8002908:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <Outlet3+0x2b4>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	83fb      	strh	r3, [r7, #30]
			}
			changeMotorSpeed(1, speed, 0);
 8002916:	8bfb      	ldrh	r3, [r7, #30]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2200      	movs	r2, #0
 800291c:	4619      	mov	r1, r3
 800291e:	2001      	movs	r0, #1
 8002920:	f7fe fe5a 	bl	80015d8 <changeMotorSpeed>
		}
		updateWaterLevel();
 8002924:	f7fe fee0 	bl	80016e8 <updateWaterLevel>
		if (distance >= minWaterLevel){
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <Outlet3+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fe01 	bl	8000534 <__aeabi_i2d>
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <Outlet3+0x2a0>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fe f8ec 	bl	8000b14 <__aeabi_dcmpge>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d046      	beq.n	80029d0 <Outlet3+0x2c8>
			distance = minWaterLevel;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <Outlet3+0x2a0>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f90c 	bl	8000b68 <__aeabi_d2iz>
 8002950:	4603      	mov	r3, r0
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <Outlet3+0x298>)
 8002954:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295c:	480f      	ldr	r0, [pc, #60]	; (800299c <Outlet3+0x294>)
 800295e:	f002 f8eb 	bl	8004b38 <HAL_GPIO_WritePin>
			Inlet();
 8002962:	f7fe ff6d 	bl	8001840 <Inlet>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8002966:	2201      	movs	r2, #1
 8002968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <Outlet3+0x294>)
 800296e:	f002 f8e3 	bl	8004b38 <HAL_GPIO_WritePin>
			moveServo(1000);
 8002972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002976:	f7fe ff53 	bl	8001820 <moveServo>
 800297a:	e040      	b.n	80029fe <Outlet3+0x2f6>
 800297c:	f3af 8000 	nop.w
 8002980:	00000000 	.word	0x00000000
 8002984:	4058c000 	.word	0x4058c000
 8002988:	20000548 	.word	0x20000548
 800298c:	40240000 	.word	0x40240000
 8002990:	404e0000 	.word	0x404e0000
 8002994:	408f4000 	.word	0x408f4000
 8002998:	3ff00000 	.word	0x3ff00000
 800299c:	40020000 	.word	0x40020000
 80029a0:	20000510 	.word	0x20000510
 80029a4:	20000008 	.word	0x20000008
 80029a8:	20000010 	.word	0x20000010
 80029ac:	40590000 	.word	0x40590000
 80029b0:	20000558 	.word	0x20000558
 80029b4:	20000514 	.word	0x20000514
 80029b8:	20000506 	.word	0x20000506
 80029bc:	20000540 	.word	0x20000540
 80029c0:	20000508 	.word	0x20000508
 80029c4:	0800a2cc 	.word	0x0800a2cc
 80029c8:	20000404 	.word	0x20000404
 80029cc:	200003c0 	.word	0x200003c0
		}
		else if(distance < maxWaterLevel){
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <Outlet3+0x4b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdad 	bl	8000534 <__aeabi_i2d>
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <Outlet3+0x4bc>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fe f884 	bl	8000aec <__aeabi_dcmplt>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <Outlet3+0x2f6>
			distance = maxWaterLevel;
 80029ea:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <Outlet3+0x4bc>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f8b8 	bl	8000b68 <__aeabi_d2iz>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a71      	ldr	r2, [pc, #452]	; (8002bc0 <Outlet3+0x4b8>)
 80029fc:	6013      	str	r3, [r2, #0]
		}
		waterLevel = ((minWaterLevel - distance)/100) * 99;
 80029fe:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <Outlet3+0x4c0>)
 8002a00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a04:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <Outlet3+0x4b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd93 	bl	8000534 <__aeabi_i2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fc3f 	bl	8000298 <__aeabi_dsub>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b69      	ldr	r3, [pc, #420]	; (8002bcc <Outlet3+0x4c4>)
 8002a28:	f7fd ff18 	bl	800085c <__aeabi_ddiv>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	a360      	add	r3, pc, #384	; (adr r3, 8002bb8 <Outlet3+0x4b0>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fde5 	bl	8000608 <__aeabi_dmul>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4963      	ldr	r1, [pc, #396]	; (8002bd0 <Outlet3+0x4c8>)
 8002a44:	e9c1 2300 	strd	r2, r3, [r1]
		updateTimerDisplay();
 8002a48:	f7fe fe78 	bl	800173c <updateTimerDisplay>
		newTime = (double)HAL_GetTick();
 8002a4c:	f001 f95e 	bl	8003d0c <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd5e 	bl	8000514 <__aeabi_ui2d>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		updateRPM();
 8002a60:	f7fe fe9e 	bl	80017a0 <updateRPM>
		sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 3, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8002a64:	8bf8      	ldrh	r0, [r7, #30]
 8002a66:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <Outlet3+0x4cc>)
 8002a68:	681c      	ldr	r4, [r3, #0]
 8002a6a:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <Outlet3+0x4b8>)
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <Outlet3+0x4c8>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a78:	9100      	str	r1, [sp, #0]
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4956      	ldr	r1, [pc, #344]	; (8002bd8 <Outlet3+0x4d0>)
 8002a80:	4856      	ldr	r0, [pc, #344]	; (8002bdc <Outlet3+0x4d4>)
 8002a82:	f005 f911 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002a86:	4855      	ldr	r0, [pc, #340]	; (8002bdc <Outlet3+0x4d4>)
 8002a88:	f7fd fbaa 	bl	80001e0 <strlen>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a94:	4951      	ldr	r1, [pc, #324]	; (8002bdc <Outlet3+0x4d4>)
 8002a96:	4852      	ldr	r0, [pc, #328]	; (8002be0 <Outlet3+0x4d8>)
 8002a98:	f003 fc3f 	bl	800631a <HAL_UART_Transmit>
	while (newTime - startTime <= zoneTimeInMS){
 8002a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aa4:	f7fd fbf8 	bl	8000298 <__aeabi_dsub>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab0:	f7fe f830 	bl	8000b14 <__aeabi_dcmpge>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f af07 	bne.w	80028ca <Outlet3+0x1c2>
	}

	if(distance <= maxWaterLevel){
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <Outlet3+0x4b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd37 	bl	8000534 <__aeabi_i2d>
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <Outlet3+0x4bc>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fe f818 	bl	8000b00 <__aeabi_dcmple>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <Outlet3+0x3e2>
			distance = maxWaterLevel;
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <Outlet3+0x4bc>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f842 	bl	8000b68 <__aeabi_d2iz>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a36      	ldr	r2, [pc, #216]	; (8002bc0 <Outlet3+0x4b8>)
 8002ae8:	6013      	str	r3, [r2, #0]
	}
	if(distance > minWaterLevel){
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <Outlet3+0x4b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd20 	bl	8000534 <__aeabi_i2d>
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <Outlet3+0x4c0>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fe f815 	bl	8000b28 <__aeabi_dcmpgt>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <Outlet3+0x410>
		distance = minWaterLevel;
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <Outlet3+0x4c0>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f82b 	bl	8000b68 <__aeabi_d2iz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <Outlet3+0x4b8>)
 8002b16:	6013      	str	r3, [r2, #0]
	}
	waterLevel = ((minWaterLevel - distance)/100) * 99;
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <Outlet3+0x4c0>)
 8002b1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <Outlet3+0x4b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd06 	bl	8000534 <__aeabi_i2d>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd fbb2 	bl	8000298 <__aeabi_dsub>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <Outlet3+0x4c4>)
 8002b42:	f7fd fe8b 	bl	800085c <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	a31a      	add	r3, pc, #104	; (adr r3, 8002bb8 <Outlet3+0x4b0>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fd58 	bl	8000608 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	491c      	ldr	r1, [pc, #112]	; (8002bd0 <Outlet3+0x4c8>)
 8002b5e:	e9c1 2300 	strd	r2, r3, [r1]
	updateRPM();
 8002b62:	f7fe fe1d 	bl	80017a0 <updateRPM>
	sprintf((char*)txd_msg_buffer, "\r\n Zone: Pipe 3, Motor Speed: %d, Pump RPM: %d, distance %d, Reservoir Water Level: %0.0lf%%", speed, RPM, distance, waterLevel);
 8002b66:	8bf8      	ldrh	r0, [r7, #30]
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <Outlet3+0x4cc>)
 8002b6a:	681c      	ldr	r4, [r3, #0]
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <Outlet3+0x4b8>)
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <Outlet3+0x4c8>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7a:	9100      	str	r1, [sp, #0]
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4915      	ldr	r1, [pc, #84]	; (8002bd8 <Outlet3+0x4d0>)
 8002b82:	4816      	ldr	r0, [pc, #88]	; (8002bdc <Outlet3+0x4d4>)
 8002b84:	f005 f890 	bl	8007ca8 <siprintf>
	HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <Outlet3+0x4d4>)
 8002b8a:	f7fd fb29 	bl	80001e0 <strlen>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	4911      	ldr	r1, [pc, #68]	; (8002bdc <Outlet3+0x4d4>)
 8002b98:	4811      	ldr	r0, [pc, #68]	; (8002be0 <Outlet3+0x4d8>)
 8002b9a:	f003 fbbe 	bl	800631a <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <Outlet3+0x4dc>)
 8002ba6:	f001 ffc7 	bl	8004b38 <HAL_GPIO_WritePin>
}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	4058c000 	.word	0x4058c000
 8002bc0:	20000510 	.word	0x20000510
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	20000010 	.word	0x20000010
 8002bcc:	40590000 	.word	0x40590000
 8002bd0:	20000558 	.word	0x20000558
 8002bd4:	20000508 	.word	0x20000508
 8002bd8:	0800a2cc 	.word	0x0800a2cc
 8002bdc:	20000404 	.word	0x20000404
 8002be0:	200003c0 	.word	0x200003c0
 8002be4:	40020000 	.word	0x40020000

08002be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bec:	f001 f828 	bl	8003c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bf0:	f000 f99a 	bl	8002f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf4:	f000 fc0c 	bl	8003410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002bf8:	f000 fbb6 	bl	8003368 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002bfc:	f000 f9f4 	bl	8002fe8 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002c00:	f000 fbdc 	bl	80033bc <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002c04:	f000 fb06 	bl	8003214 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8002c08:	f000 fb84 	bl	8003314 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002c0c:	f000 fa3e 	bl	800308c <MX_TIM2_Init>
  MX_TIM4_Init();
 8002c10:	f000 fab2 	bl	8003178 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim5);
 8002c14:	48ac      	ldr	r0, [pc, #688]	; (8002ec8 <main+0x2e0>)
 8002c16:	f002 fc59 	bl	80054cc <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	48aa      	ldr	r0, [pc, #680]	; (8002ec8 <main+0x2e0>)
 8002c1e:	f002 fdbb 	bl	8005798 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002c22:	2104      	movs	r1, #4
 8002c24:	48a8      	ldr	r0, [pc, #672]	; (8002ec8 <main+0x2e0>)
 8002c26:	f002 fdb7 	bl	8005798 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim2);
 8002c2a:	48a8      	ldr	r0, [pc, #672]	; (8002ecc <main+0x2e4>)
 8002c2c:	f002 fc9e 	bl	800556c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c30:	2108      	movs	r1, #8
 8002c32:	48a6      	ldr	r0, [pc, #664]	; (8002ecc <main+0x2e4>)
 8002c34:	f002 fdb0 	bl	8005798 <HAL_TIM_PWM_Start>
  TIM2->PSC = 16-1;
 8002c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 20000-1;
 8002c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c44:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 500;
 8002c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34


  //inlet setup
  sprintf((char*)txd_msg_buffer, "\r\n INLET MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
 8002c54:	499e      	ldr	r1, [pc, #632]	; (8002ed0 <main+0x2e8>)
 8002c56:	489f      	ldr	r0, [pc, #636]	; (8002ed4 <main+0x2ec>)
 8002c58:	f005 f826 	bl	8007ca8 <siprintf>
  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002c5c:	489d      	ldr	r0, [pc, #628]	; (8002ed4 <main+0x2ec>)
 8002c5e:	f7fd fabf 	bl	80001e0 <strlen>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6a:	499a      	ldr	r1, [pc, #616]	; (8002ed4 <main+0x2ec>)
 8002c6c:	489a      	ldr	r0, [pc, #616]	; (8002ed8 <main+0x2f0>)
 8002c6e:	f003 fb54 	bl	800631a <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8002c72:	4b9a      	ldr	r3, [pc, #616]	; (8002edc <main+0x2f4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4999      	ldr	r1, [pc, #612]	; (8002ee0 <main+0x2f8>)
 8002c7c:	4896      	ldr	r0, [pc, #600]	; (8002ed8 <main+0x2f0>)
 8002c7e:	f003 fbde 	bl	800643e <HAL_UART_Receive_IT>

  while(rcv_intpt_flag == (00)){}
 8002c82:	bf00      	nop
 8002c84:	4b95      	ldr	r3, [pc, #596]	; (8002edc <main+0x2f4>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0fb      	beq.n	8002c84 <main+0x9c>
  inletSpeed = byte - '0';
 8002c8c:	4b94      	ldr	r3, [pc, #592]	; (8002ee0 <main+0x2f8>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b30      	subs	r3, #48	; 0x30
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <main+0x2fc>)
 8002c98:	801a      	strh	r2, [r3, #0]

  sprintf((char*)txd_msg_buffer, "\r\n Inlet Time, 1 to 24 hours: ");
 8002c9a:	4993      	ldr	r1, [pc, #588]	; (8002ee8 <main+0x300>)
 8002c9c:	488d      	ldr	r0, [pc, #564]	; (8002ed4 <main+0x2ec>)
 8002c9e:	f005 f803 	bl	8007ca8 <siprintf>
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002ca2:	488c      	ldr	r0, [pc, #560]	; (8002ed4 <main+0x2ec>)
 8002ca4:	f7fd fa9c 	bl	80001e0 <strlen>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	4988      	ldr	r1, [pc, #544]	; (8002ed4 <main+0x2ec>)
 8002cb2:	4889      	ldr	r0, [pc, #548]	; (8002ed8 <main+0x2f0>)
 8002cb4:	f003 fb31 	bl	800631a <HAL_UART_Transmit>
      rcv_intpt_flag = 00;
 8002cb8:	4b88      	ldr	r3, [pc, #544]	; (8002edc <main+0x2f4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4987      	ldr	r1, [pc, #540]	; (8002ee0 <main+0x2f8>)
 8002cc2:	4885      	ldr	r0, [pc, #532]	; (8002ed8 <main+0x2f0>)
 8002cc4:	f003 fbbb 	bl	800643e <HAL_UART_Receive_IT>

      while(rcv_intpt_flag == (00)){}
 8002cc8:	bf00      	nop
 8002cca:	4b84      	ldr	r3, [pc, #528]	; (8002edc <main+0x2f4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0fb      	beq.n	8002cca <main+0xe2>
  inletTime = byte - '0';
 8002cd2:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <main+0x2f8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3b30      	subs	r3, #48	; 0x30
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fc2b 	bl	8000534 <__aeabi_i2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4982      	ldr	r1, [pc, #520]	; (8002eec <main+0x304>)
 8002ce4:	e9c1 2300 	strd	r2, r3, [r1]

  //zone 1 setup
  sprintf((char*)txd_msg_buffer, "\r\n ZONE 1 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
 8002ce8:	4981      	ldr	r1, [pc, #516]	; (8002ef0 <main+0x308>)
 8002cea:	487a      	ldr	r0, [pc, #488]	; (8002ed4 <main+0x2ec>)
 8002cec:	f004 ffdc 	bl	8007ca8 <siprintf>
  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002cf0:	4878      	ldr	r0, [pc, #480]	; (8002ed4 <main+0x2ec>)
 8002cf2:	f7fd fa75 	bl	80001e0 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	4975      	ldr	r1, [pc, #468]	; (8002ed4 <main+0x2ec>)
 8002d00:	4875      	ldr	r0, [pc, #468]	; (8002ed8 <main+0x2f0>)
 8002d02:	f003 fb0a 	bl	800631a <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8002d06:	4b75      	ldr	r3, [pc, #468]	; (8002edc <main+0x2f4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4974      	ldr	r1, [pc, #464]	; (8002ee0 <main+0x2f8>)
 8002d10:	4871      	ldr	r0, [pc, #452]	; (8002ed8 <main+0x2f0>)
 8002d12:	f003 fb94 	bl	800643e <HAL_UART_Receive_IT>

  while(rcv_intpt_flag == (00)){}
 8002d16:	bf00      	nop
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <main+0x2f4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0fb      	beq.n	8002d18 <main+0x130>

  speed1 = byte - '0';
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <main+0x2f8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b30      	subs	r3, #48	; 0x30
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <main+0x30c>)
 8002d2c:	801a      	strh	r2, [r3, #0]

  sprintf((char*)txd_msg_buffer, "\r\n Zone 1 Time, 1 to 24 hours: ");
 8002d2e:	4972      	ldr	r1, [pc, #456]	; (8002ef8 <main+0x310>)
 8002d30:	4868      	ldr	r0, [pc, #416]	; (8002ed4 <main+0x2ec>)
 8002d32:	f004 ffb9 	bl	8007ca8 <siprintf>
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002d36:	4867      	ldr	r0, [pc, #412]	; (8002ed4 <main+0x2ec>)
 8002d38:	f7fd fa52 	bl	80001e0 <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d44:	4963      	ldr	r1, [pc, #396]	; (8002ed4 <main+0x2ec>)
 8002d46:	4864      	ldr	r0, [pc, #400]	; (8002ed8 <main+0x2f0>)
 8002d48:	f003 fae7 	bl	800631a <HAL_UART_Transmit>
      rcv_intpt_flag = 00;
 8002d4c:	4b63      	ldr	r3, [pc, #396]	; (8002edc <main+0x2f4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002d52:	2201      	movs	r2, #1
 8002d54:	4962      	ldr	r1, [pc, #392]	; (8002ee0 <main+0x2f8>)
 8002d56:	4860      	ldr	r0, [pc, #384]	; (8002ed8 <main+0x2f0>)
 8002d58:	f003 fb71 	bl	800643e <HAL_UART_Receive_IT>

      while(rcv_intpt_flag == (00)){}
 8002d5c:	bf00      	nop
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <main+0x2f4>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0fb      	beq.n	8002d5e <main+0x176>
  time1 = byte -'0';
 8002d66:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <main+0x2f8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3b30      	subs	r3, #48	; 0x30
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fbe1 	bl	8000534 <__aeabi_i2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4961      	ldr	r1, [pc, #388]	; (8002efc <main+0x314>)
 8002d78:	e9c1 2300 	strd	r2, r3, [r1]
  //zone 2 setup
    sprintf((char*)txd_msg_buffer, "\r\n ZONE 2 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
 8002d7c:	4960      	ldr	r1, [pc, #384]	; (8002f00 <main+0x318>)
 8002d7e:	4855      	ldr	r0, [pc, #340]	; (8002ed4 <main+0x2ec>)
 8002d80:	f004 ff92 	bl	8007ca8 <siprintf>
    HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002d84:	4853      	ldr	r0, [pc, #332]	; (8002ed4 <main+0x2ec>)
 8002d86:	f7fd fa2b 	bl	80001e0 <strlen>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d92:	4950      	ldr	r1, [pc, #320]	; (8002ed4 <main+0x2ec>)
 8002d94:	4850      	ldr	r0, [pc, #320]	; (8002ed8 <main+0x2f0>)
 8002d96:	f003 fac0 	bl	800631a <HAL_UART_Transmit>
    rcv_intpt_flag = 00;
 8002d9a:	4b50      	ldr	r3, [pc, #320]	; (8002edc <main+0x2f4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002da0:	2201      	movs	r2, #1
 8002da2:	494f      	ldr	r1, [pc, #316]	; (8002ee0 <main+0x2f8>)
 8002da4:	484c      	ldr	r0, [pc, #304]	; (8002ed8 <main+0x2f0>)
 8002da6:	f003 fb4a 	bl	800643e <HAL_UART_Receive_IT>

    while(rcv_intpt_flag == (00)){}
 8002daa:	bf00      	nop
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <main+0x2f4>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0fb      	beq.n	8002dac <main+0x1c4>

    speed2 = byte - '0';
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <main+0x2f8>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b30      	subs	r3, #48	; 0x30
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <main+0x31c>)
 8002dc0:	801a      	strh	r2, [r3, #0]
    sprintf((char*)txd_msg_buffer, "\r\n Zone 2 Time, 1 to 24 hours: ");
 8002dc2:	4951      	ldr	r1, [pc, #324]	; (8002f08 <main+0x320>)
 8002dc4:	4843      	ldr	r0, [pc, #268]	; (8002ed4 <main+0x2ec>)
 8002dc6:	f004 ff6f 	bl	8007ca8 <siprintf>
        HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002dca:	4842      	ldr	r0, [pc, #264]	; (8002ed4 <main+0x2ec>)
 8002dcc:	f7fd fa08 	bl	80001e0 <strlen>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd8:	493e      	ldr	r1, [pc, #248]	; (8002ed4 <main+0x2ec>)
 8002dda:	483f      	ldr	r0, [pc, #252]	; (8002ed8 <main+0x2f0>)
 8002ddc:	f003 fa9d 	bl	800631a <HAL_UART_Transmit>
        rcv_intpt_flag = 00;
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <main+0x2f4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002de6:	2201      	movs	r2, #1
 8002de8:	493d      	ldr	r1, [pc, #244]	; (8002ee0 <main+0x2f8>)
 8002dea:	483b      	ldr	r0, [pc, #236]	; (8002ed8 <main+0x2f0>)
 8002dec:	f003 fb27 	bl	800643e <HAL_UART_Receive_IT>

        while(rcv_intpt_flag == (00)){}
 8002df0:	bf00      	nop
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <main+0x2f4>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0fb      	beq.n	8002df2 <main+0x20a>

    time2 = byte - '0';
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <main+0x2f8>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	3b30      	subs	r3, #48	; 0x30
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb97 	bl	8000534 <__aeabi_i2d>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4940      	ldr	r1, [pc, #256]	; (8002f0c <main+0x324>)
 8002e0c:	e9c1 2300 	strd	r2, r3, [r1]
    //zone 3 setup
      sprintf((char*)txd_msg_buffer, "\r\n ZONE 3 MOTOR SPEED - enter 0 for manual mode, else choose 5 to 9: ");
 8002e10:	493f      	ldr	r1, [pc, #252]	; (8002f10 <main+0x328>)
 8002e12:	4830      	ldr	r0, [pc, #192]	; (8002ed4 <main+0x2ec>)
 8002e14:	f004 ff48 	bl	8007ca8 <siprintf>
      HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002e18:	482e      	ldr	r0, [pc, #184]	; (8002ed4 <main+0x2ec>)
 8002e1a:	f7fd f9e1 	bl	80001e0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <main+0x2ec>)
 8002e28:	482b      	ldr	r0, [pc, #172]	; (8002ed8 <main+0x2f0>)
 8002e2a:	f003 fa76 	bl	800631a <HAL_UART_Transmit>
      rcv_intpt_flag = 00;
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <main+0x2f4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	492a      	ldr	r1, [pc, #168]	; (8002ee0 <main+0x2f8>)
 8002e38:	4827      	ldr	r0, [pc, #156]	; (8002ed8 <main+0x2f0>)
 8002e3a:	f003 fb00 	bl	800643e <HAL_UART_Receive_IT>

      while(rcv_intpt_flag == (00)){}
 8002e3e:	bf00      	nop
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <main+0x2f4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0fb      	beq.n	8002e40 <main+0x258>

      speed3 = byte - '0';
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <main+0x2f8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b30      	subs	r3, #48	; 0x30
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <main+0x32c>)
 8002e54:	801a      	strh	r2, [r3, #0]

      sprintf((char*)txd_msg_buffer, "\r\n Zone 3 Time, 1 to 24 hours: ");
 8002e56:	4930      	ldr	r1, [pc, #192]	; (8002f18 <main+0x330>)
 8002e58:	481e      	ldr	r0, [pc, #120]	; (8002ed4 <main+0x2ec>)
 8002e5a:	f004 ff25 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8002e5e:	481d      	ldr	r0, [pc, #116]	; (8002ed4 <main+0x2ec>)
 8002e60:	f7fd f9be 	bl	80001e0 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6c:	4919      	ldr	r1, [pc, #100]	; (8002ed4 <main+0x2ec>)
 8002e6e:	481a      	ldr	r0, [pc, #104]	; (8002ed8 <main+0x2f0>)
 8002e70:	f003 fa53 	bl	800631a <HAL_UART_Transmit>
		rcv_intpt_flag = 00;
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <main+0x2f4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &byte, 1);
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4918      	ldr	r1, [pc, #96]	; (8002ee0 <main+0x2f8>)
 8002e7e:	4816      	ldr	r0, [pc, #88]	; (8002ed8 <main+0x2f0>)
 8002e80:	f003 fadd 	bl	800643e <HAL_UART_Receive_IT>

		while(rcv_intpt_flag == (00)){}
 8002e84:	bf00      	nop
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <main+0x2f4>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0fb      	beq.n	8002e86 <main+0x29e>

	  time3 = byte - '0';
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <main+0x2f8>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb4d 	bl	8000534 <__aeabi_i2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	491f      	ldr	r1, [pc, #124]	; (8002f1c <main+0x334>)
 8002ea0:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_TIM_Base_Start_IT(&htim4);
 8002ea4:	481e      	ldr	r0, [pc, #120]	; (8002f20 <main+0x338>)
 8002ea6:	f002 fbbb 	bl	8005620 <HAL_TIM_Base_Start_IT>
  time = HAL_GetTick();
 8002eaa:	f000 ff2f 	bl	8003d0c <HAL_GetTick>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <main+0x33c>)
 8002eb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  Inlet();
 8002eb4:	f7fe fcc4 	bl	8001840 <Inlet>
	  Outlet1();
 8002eb8:	f7fe ff4e 	bl	8001d58 <Outlet1>
	  Outlet2();
 8002ebc:	f7ff f9b8 	bl	8002230 <Outlet2>
	  Outlet3();
 8002ec0:	f7ff fc22 	bl	8002708 <Outlet3>
	  Inlet();
 8002ec4:	e7f6      	b.n	8002eb4 <main+0x2cc>
 8002ec6:	bf00      	nop
 8002ec8:	200002f0 	.word	0x200002f0
 8002ecc:	20000260 	.word	0x20000260
 8002ed0:	0800a32c 	.word	0x0800a32c
 8002ed4:	20000404 	.word	0x20000404
 8002ed8:	200003c0 	.word	0x200003c0
 8002edc:	20000504 	.word	0x20000504
 8002ee0:	20000214 	.word	0x20000214
 8002ee4:	20000514 	.word	0x20000514
 8002ee8:	0800a374 	.word	0x0800a374
 8002eec:	20000518 	.word	0x20000518
 8002ef0:	0800a394 	.word	0x0800a394
 8002ef4:	20000520 	.word	0x20000520
 8002ef8:	0800a3dc 	.word	0x0800a3dc
 8002efc:	20000528 	.word	0x20000528
 8002f00:	0800a3fc 	.word	0x0800a3fc
 8002f04:	20000530 	.word	0x20000530
 8002f08:	0800a444 	.word	0x0800a444
 8002f0c:	20000538 	.word	0x20000538
 8002f10:	0800a464 	.word	0x0800a464
 8002f14:	20000540 	.word	0x20000540
 8002f18:	0800a4ac 	.word	0x0800a4ac
 8002f1c:	20000548 	.word	0x20000548
 8002f20:	200002a8 	.word	0x200002a8
 8002f24:	2000050c 	.word	0x2000050c

08002f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b094      	sub	sp, #80	; 0x50
 8002f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2e:	f107 0320 	add.w	r3, r7, #32
 8002f32:	2230      	movs	r2, #48	; 0x30
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fa44 	bl	80073c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <SystemClock_Config+0xb8>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <SystemClock_Config+0xb8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <SystemClock_Config+0xb8>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <SystemClock_Config+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <SystemClock_Config+0xbc>)
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <SystemClock_Config+0xbc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f90:	2310      	movs	r3, #16
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f98:	f107 0320 	add.w	r3, r7, #32
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fdfd 	bl	8004b9c <HAL_RCC_OscConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002fa8:	f000 fb10 	bl	80035cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fac:	230f      	movs	r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 f860 	bl	800508c <HAL_RCC_ClockConfig>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002fd2:	f000 fafb 	bl	80035cc <Error_Handler>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3750      	adds	r7, #80	; 0x50
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fee:	463b      	mov	r3, r7
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <MX_ADC1_Init+0x98>)
 8002ffc:	4a21      	ldr	r2, [pc, #132]	; (8003084 <MX_ADC1_Init+0x9c>)
 8002ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <MX_ADC1_Init+0x98>)
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <MX_ADC1_Init+0x98>)
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <MX_ADC1_Init+0x98>)
 8003010:	2201      	movs	r2, #1
 8003012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <MX_ADC1_Init+0x98>)
 8003016:	2200      	movs	r2, #0
 8003018:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <MX_ADC1_Init+0x98>)
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <MX_ADC1_Init+0x98>)
 8003024:	2200      	movs	r2, #0
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <MX_ADC1_Init+0x98>)
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <MX_ADC1_Init+0xa0>)
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <MX_ADC1_Init+0x98>)
 8003030:	2200      	movs	r2, #0
 8003032:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <MX_ADC1_Init+0x98>)
 8003036:	2201      	movs	r2, #1
 8003038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <MX_ADC1_Init+0x98>)
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <MX_ADC1_Init+0x98>)
 8003044:	2201      	movs	r2, #1
 8003046:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <MX_ADC1_Init+0x98>)
 800304a:	f000 fe6b 	bl	8003d24 <HAL_ADC_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003054:	f000 faba 	bl	80035cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003058:	2309      	movs	r3, #9
 800305a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003060:	2301      	movs	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003064:	463b      	mov	r3, r7
 8003066:	4619      	mov	r1, r3
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_ADC1_Init+0x98>)
 800306a:	f001 f81f 	bl	80040ac <HAL_ADC_ConfigChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003074:	f000 faaa 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000218 	.word	0x20000218
 8003084:	40012000 	.word	0x40012000
 8003088:	0f000001 	.word	0x0f000001

0800308c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	f107 0320 	add.w	r3, r7, #32
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030c6:	220f      	movs	r2, #15
 80030c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80030d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030e4:	4823      	ldr	r0, [pc, #140]	; (8003174 <MX_TIM2_Init+0xe8>)
 80030e6:	f002 f9f1 	bl	80054cc <HAL_TIM_Base_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80030f0:	f000 fa6c 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030fe:	4619      	mov	r1, r3
 8003100:	481c      	ldr	r0, [pc, #112]	; (8003174 <MX_TIM2_Init+0xe8>)
 8003102:	f002 fcbb 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800310c:	f000 fa5e 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003110:	4818      	ldr	r0, [pc, #96]	; (8003174 <MX_TIM2_Init+0xe8>)
 8003112:	f002 fae7 	bl	80056e4 <HAL_TIM_PWM_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800311c:	f000 fa56 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003128:	f107 0320 	add.w	r3, r7, #32
 800312c:	4619      	mov	r1, r3
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <MX_TIM2_Init+0xe8>)
 8003130:	f003 f838 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800313a:	f000 fa47 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313e:	2360      	movs	r3, #96	; 0x60
 8003140:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	2208      	movs	r2, #8
 8003152:	4619      	mov	r1, r3
 8003154:	4807      	ldr	r0, [pc, #28]	; (8003174 <MX_TIM2_Init+0xe8>)
 8003156:	f002 fbcf 	bl	80058f8 <HAL_TIM_PWM_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003160:	f000 fa34 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <MX_TIM2_Init+0xe8>)
 8003166:	f000 faef 	bl	8003748 <HAL_TIM_MspPostInit>

}
 800316a:	bf00      	nop
 800316c:	3738      	adds	r7, #56	; 0x38
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000260 	.word	0x20000260

08003178 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800318c:	463b      	mov	r3, r7
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <MX_TIM4_Init+0x94>)
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <MX_TIM4_Init+0x98>)
 8003198:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <MX_TIM4_Init+0x94>)
 800319c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80031a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <MX_TIM4_Init+0x94>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <MX_TIM4_Init+0x94>)
 80031aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <MX_TIM4_Init+0x94>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <MX_TIM4_Init+0x94>)
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031bc:	4813      	ldr	r0, [pc, #76]	; (800320c <MX_TIM4_Init+0x94>)
 80031be:	f002 f985 	bl	80054cc <HAL_TIM_Base_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80031c8:	f000 fa00 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	4619      	mov	r1, r3
 80031d8:	480c      	ldr	r0, [pc, #48]	; (800320c <MX_TIM4_Init+0x94>)
 80031da:	f002 fc4f 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80031e4:	f000 f9f2 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031f0:	463b      	mov	r3, r7
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_TIM4_Init+0x94>)
 80031f6:	f002 ffd5 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003200:	f000 f9e4 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200002a8 	.word	0x200002a8
 8003210:	40000800 	.word	0x40000800

08003214 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
 8003240:	615a      	str	r2, [r3, #20]
 8003242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <MX_TIM5_Init+0xf8>)
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <MX_TIM5_Init+0xfc>)
 8003248:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 160-1;
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <MX_TIM5_Init+0xf8>)
 800324c:	229f      	movs	r2, #159	; 0x9f
 800324e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <MX_TIM5_Init+0xf8>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <MX_TIM5_Init+0xf8>)
 8003258:	2263      	movs	r2, #99	; 0x63
 800325a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_TIM5_Init+0xf8>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <MX_TIM5_Init+0xf8>)
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003268:	4828      	ldr	r0, [pc, #160]	; (800330c <MX_TIM5_Init+0xf8>)
 800326a:	f002 f92f 	bl	80054cc <HAL_TIM_Base_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003274:	f000 f9aa 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800327e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003282:	4619      	mov	r1, r3
 8003284:	4821      	ldr	r0, [pc, #132]	; (800330c <MX_TIM5_Init+0xf8>)
 8003286:	f002 fbf9 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003290:	f000 f99c 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003294:	481d      	ldr	r0, [pc, #116]	; (800330c <MX_TIM5_Init+0xf8>)
 8003296:	f002 fa25 	bl	80056e4 <HAL_TIM_PWM_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80032a0:	f000 f994 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032ac:	f107 0320 	add.w	r3, r7, #32
 80032b0:	4619      	mov	r1, r3
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <MX_TIM5_Init+0xf8>)
 80032b4:	f002 ff76 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80032be:	f000 f985 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c2:	2360      	movs	r3, #96	; 0x60
 80032c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80-1;
 80032c6:	234f      	movs	r3, #79	; 0x4f
 80032c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	4619      	mov	r1, r3
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <MX_TIM5_Init+0xf8>)
 80032da:	f002 fb0d 	bl	80058f8 <HAL_TIM_PWM_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80032e4:	f000 f972 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	2204      	movs	r2, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4807      	ldr	r0, [pc, #28]	; (800330c <MX_TIM5_Init+0xf8>)
 80032f0:	f002 fb02 	bl	80058f8 <HAL_TIM_PWM_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80032fa:	f000 f967 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <MX_TIM5_Init+0xf8>)
 8003300:	f000 fa22 	bl	8003748 <HAL_TIM_MspPostInit>

}
 8003304:	bf00      	nop
 8003306:	3738      	adds	r7, #56	; 0x38
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200002f0 	.word	0x200002f0
 8003310:	40000c00 	.word	0x40000c00

08003314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <MX_USART1_UART_Init+0x50>)
 800331c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 8003320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 800333a:	220c      	movs	r2, #12
 800333c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_USART1_UART_Init+0x4c>)
 800334c:	f002 ff98 	bl	8006280 <HAL_UART_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003356:	f000 f939 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000338 	.word	0x20000338
 8003364:	40011000 	.word	0x40011000

08003368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <MX_USART2_UART_Init+0x50>)
 8003370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 8003374:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 800338e:	220c      	movs	r2, #12
 8003390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_USART2_UART_Init+0x4c>)
 80033a0:	f002 ff6e 	bl	8006280 <HAL_UART_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033aa:	f000 f90f 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000037c 	.word	0x2000037c
 80033b8:	40004400 	.word	0x40004400

080033bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <MX_USART6_UART_Init+0x50>)
 80033c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033e2:	220c      	movs	r2, #12
 80033e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <MX_USART6_UART_Init+0x4c>)
 80033f4:	f002 ff44 	bl	8006280 <HAL_UART_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80033fe:	f000 f8e5 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200003c0 	.word	0x200003c0
 800340c:	40011400 	.word	0x40011400

08003410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	4b43      	ldr	r3, [pc, #268]	; (8003538 <MX_GPIO_Init+0x128>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a42      	ldr	r2, [pc, #264]	; (8003538 <MX_GPIO_Init+0x128>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <MX_GPIO_Init+0x128>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <MX_GPIO_Init+0x128>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <MX_GPIO_Init+0x128>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <MX_GPIO_Init+0x128>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b35      	ldr	r3, [pc, #212]	; (8003538 <MX_GPIO_Init+0x128>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <MX_GPIO_Init+0x128>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b32      	ldr	r3, [pc, #200]	; (8003538 <MX_GPIO_Init+0x128>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <MX_GPIO_Init+0x128>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <MX_GPIO_Init+0x128>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <MX_GPIO_Init+0x128>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin|LD2_Pin|DIGIT_A3_Pin|BLU_Pin
 8003496:	2200      	movs	r2, #0
 8003498:	f641 1170 	movw	r1, #6512	; 0x1970
 800349c:	4827      	ldr	r0, [pc, #156]	; (800353c <MX_GPIO_Init+0x12c>)
 800349e:	f001 fb4b 	bl	8004b38 <HAL_GPIO_WritePin>
                          |RED_Pin|GRN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin
 80034a2:	2200      	movs	r2, #0
 80034a4:	f240 3171 	movw	r1, #881	; 0x371
 80034a8:	4825      	ldr	r0, [pc, #148]	; (8003540 <MX_GPIO_Init+0x130>)
 80034aa:	f001 fb45 	bl	8004b38 <HAL_GPIO_WritePin>
                          |DIGIT_A1_Pin|DIGIT_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	4619      	mov	r1, r3
 80034c4:	481f      	ldr	r0, [pc, #124]	; (8003544 <MX_GPIO_Init+0x134>)
 80034c6:	f001 f9b3 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A0_Pin LD2_Pin DIGIT_A3_Pin BLU_Pin
                           RED_Pin GRN_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|LD2_Pin|DIGIT_A3_Pin|BLU_Pin
 80034ca:	f641 1370 	movw	r3, #6512	; 0x1970
 80034ce:	617b      	str	r3, [r7, #20]
                          |RED_Pin|GRN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	4816      	ldr	r0, [pc, #88]	; (800353c <MX_GPIO_Init+0x12c>)
 80034e4:	f001 f9a4 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin
                           DIGIT_A1_Pin DIGIT_A2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin
 80034e8:	f240 3371 	movw	r3, #881	; 0x371
 80034ec:	617b      	str	r3, [r7, #20]
                          |DIGIT_A1_Pin|DIGIT_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	480f      	ldr	r0, [pc, #60]	; (8003540 <MX_GPIO_Init+0x130>)
 8003502:	f001 f995 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8003506:	2304      	movs	r3, #4
 8003508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800350a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	4809      	ldr	r0, [pc, #36]	; (8003540 <MX_GPIO_Init+0x130>)
 800351c:	f001 f988 	bl	8004830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	2008      	movs	r0, #8
 8003526:	f001 f8ba 	bl	800469e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800352a:	2008      	movs	r0, #8
 800352c:	f001 f8d3 	bl	80046d6 <HAL_NVIC_EnableIRQ>

}
 8003530:	bf00      	nop
 8003532:	3728      	adds	r7, #40	; 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	40020000 	.word	0x40020000
 8003540:	40020400 	.word	0x40020400
 8003544:	40020800 	.word	0x40020800

08003548 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RPM_TICK_Pin){
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d105      	bne.n	8003564 <HAL_GPIO_EXTI_Callback+0x1c>
		rpm_tick_count += 1;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_GPIO_EXTI_Callback+0x28>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_GPIO_EXTI_Callback+0x28>)
 8003562:	701a      	strb	r2, [r3, #0]
	}
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	20000505 	.word	0x20000505

08003574 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <HAL_UART_RxCpltCallback+0x40>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_UART_RxCpltCallback+0x1a>
			us100_Rx_flag = 01;
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_UART_RxCpltCallback+0x44>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
	}
	else if (huart->Instance == USART6){
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
		rcv_intpt_flag = 1;
	}
}
 800358c:	e00d      	b.n	80035aa <HAL_UART_RxCpltCallback+0x36>
	else if (huart->Instance == USART6){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_UART_RxCpltCallback+0x48>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <HAL_UART_RxCpltCallback+0x36>
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
 8003598:	2364      	movs	r3, #100	; 0x64
 800359a:	2201      	movs	r2, #1
 800359c:	4908      	ldr	r1, [pc, #32]	; (80035c0 <HAL_UART_RxCpltCallback+0x4c>)
 800359e:	4809      	ldr	r0, [pc, #36]	; (80035c4 <HAL_UART_RxCpltCallback+0x50>)
 80035a0:	f002 febb 	bl	800631a <HAL_UART_Transmit>
		rcv_intpt_flag = 1;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_UART_RxCpltCallback+0x54>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	20000000 	.word	0x20000000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	20000214 	.word	0x20000214
 80035c4:	200003c0 	.word	0x200003c0
 80035c8:	20000504 	.word	0x20000504

080035cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d0:	b672      	cpsid	i
}
 80035d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035d4:	e7fe      	b.n	80035d4 <Error_Handler+0x8>
	...

080035d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_MspInit+0x4c>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_MspInit+0x4c>)
 80035e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ec:	6453      	str	r3, [r2, #68]	; 0x44
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_MspInit+0x4c>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_MspInit+0x4c>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_MspInit+0x4c>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_MspInit+0x4c>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003616:	2007      	movs	r0, #7
 8003618:	f001 f836 	bl	8004688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <HAL_ADC_MspInit+0x7c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d127      	bne.n	800369a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_ADC_MspInit+0x80>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003682:	2302      	movs	r3, #2
 8003684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003686:	2303      	movs	r3, #3
 8003688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368e:	f107 0314 	add.w	r3, r7, #20
 8003692:	4619      	mov	r1, r3
 8003694:	4805      	ldr	r0, [pc, #20]	; (80036ac <HAL_ADC_MspInit+0x84>)
 8003696:	f001 f8cb 	bl	8004830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800369a:	bf00      	nop
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40012000 	.word	0x40012000
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020400 	.word	0x40020400

080036b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036de:	e026      	b.n	800372e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_TIM_Base_MspInit+0x90>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
}
 8003706:	e012      	b.n	800372e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0x94>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_TIM_Base_MspInit+0x8c>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00

08003748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d11f      	bne.n	80037aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	2300      	movs	r3, #0
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003798:	2301      	movs	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	4816      	ldr	r0, [pc, #88]	; (80037fc <HAL_TIM_MspPostInit+0xb4>)
 80037a4:	f001 f844 	bl	8004830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80037a8:	e022      	b.n	80037f0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_TIM_MspPostInit+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d11d      	bne.n	80037f0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6313      	str	r3, [r2, #48]	; 0x30
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037d0:	2303      	movs	r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037e0:	2302      	movs	r3, #2
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	4806      	ldr	r0, [pc, #24]	; (8003804 <HAL_TIM_MspPostInit+0xbc>)
 80037ec:	f001 f820 	bl	8004830 <HAL_GPIO_Init>
}
 80037f0:	bf00      	nop
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020400 	.word	0x40020400
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40020000 	.word	0x40020000

08003808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_UART_MspInit+0x17c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d135      	bne.n	8003896 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	4a55      	ldr	r2, [pc, #340]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	6453      	str	r3, [r2, #68]	; 0x44
 800383a:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_UART_MspInit+0x180>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_UART_MspInit+0x180>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a4e      	ldr	r2, [pc, #312]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003874:	2307      	movs	r3, #7
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	4843      	ldr	r0, [pc, #268]	; (800398c <HAL_UART_MspInit+0x184>)
 8003880:	f000 ffd6 	bl	8004830 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2025      	movs	r0, #37	; 0x25
 800388a:	f000 ff08 	bl	800469e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800388e:	2025      	movs	r0, #37	; 0x25
 8003890:	f000 ff21 	bl	80046d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003894:	e072      	b.n	800397c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <HAL_UART_MspInit+0x188>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d134      	bne.n	800390a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a37      	ldr	r2, [pc, #220]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6313      	str	r3, [r2, #48]	; 0x30
 80038cc:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <HAL_UART_MspInit+0x180>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038d8:	230c      	movs	r3, #12
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038e8:	2307      	movs	r3, #7
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	4826      	ldr	r0, [pc, #152]	; (800398c <HAL_UART_MspInit+0x184>)
 80038f4:	f000 ff9c 	bl	8004830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	2026      	movs	r0, #38	; 0x26
 80038fe:	f000 fece 	bl	800469e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003902:	2026      	movs	r0, #38	; 0x26
 8003904:	f000 fee7 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 8003908:	e038      	b.n	800397c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_UART_MspInit+0x18c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d133      	bne.n	800397c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_UART_MspInit+0x180>)
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_UART_MspInit+0x180>)
 800391e:	f043 0320 	orr.w	r3, r3, #32
 8003922:	6453      	str	r3, [r2, #68]	; 0x44
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <HAL_UART_MspInit+0x180>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_UART_MspInit+0x180>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800394c:	23c0      	movs	r3, #192	; 0xc0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	2303      	movs	r3, #3
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800395c:	2308      	movs	r3, #8
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	4619      	mov	r1, r3
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <HAL_UART_MspInit+0x190>)
 8003968:	f000 ff62 	bl	8004830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	2047      	movs	r0, #71	; 0x47
 8003972:	f000 fe94 	bl	800469e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003976:	2047      	movs	r0, #71	; 0x47
 8003978:	f000 fead 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3738      	adds	r7, #56	; 0x38
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40011000 	.word	0x40011000
 8003988:	40023800 	.word	0x40023800
 800398c:	40020000 	.word	0x40020000
 8003990:	40004400 	.word	0x40004400
 8003994:	40011400 	.word	0x40011400
 8003998:	40020800 	.word	0x40020800

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <NMI_Handler+0x4>

080039a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a6:	e7fe      	b.n	80039a6 <HardFault_Handler+0x4>

080039a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <MemManage_Handler+0x4>

080039ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b2:	e7fe      	b.n	80039b2 <BusFault_Handler+0x4>

080039b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <UsageFault_Handler+0x4>

080039ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039e8:	f000 f97c 	bl	8003ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80039f4:	2004      	movs	r0, #4
 80039f6:	f001 f8b9 	bl	8004b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <USART1_IRQHandler+0x10>)
 8003a06:	f002 fd4b 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000338 	.word	0x20000338

08003a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <USART2_IRQHandler+0x10>)
 8003a1a:	f002 fd41 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000037c 	.word	0x2000037c

08003a28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <USART6_IRQHandler+0x10>)
 8003a2e:	f002 fd37 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200003c0 	.word	0x200003c0

08003a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
	return 1;
 8003a40:	2301      	movs	r3, #1
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_kill>:

int _kill(int pid, int sig)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a56:	f003 fc8b 	bl	8007370 <__errno>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2216      	movs	r2, #22
 8003a5e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_exit>:

void _exit (int status)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ffe7 	bl	8003a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a7e:	e7fe      	b.n	8003a7e <_exit+0x12>

08003a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00a      	b.n	8003aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a92:	f3af 8000 	nop.w
 8003a96:	4601      	mov	r1, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	60ba      	str	r2, [r7, #8]
 8003a9e:	b2ca      	uxtb	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	dbf0      	blt.n	8003a92 <_read+0x12>
	}

return len;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e009      	b.n	8003ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	60ba      	str	r2, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbf1      	blt.n	8003acc <_write+0x12>
	}
	return len;
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_close>:

int _close(int file)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
	return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_isatty>:

int _isatty(int file)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
	return 1;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <_sbrk+0x5c>)
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <_sbrk+0x60>)
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <_sbrk+0x64>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <_sbrk+0x64>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <_sbrk+0x68>)
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <_sbrk+0x64>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d207      	bcs.n	8003b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b8c:	f003 fbf0 	bl	8007370 <__errno>
 8003b90:	4603      	mov	r3, r0
 8003b92:	220c      	movs	r2, #12
 8003b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e009      	b.n	8003bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <_sbrk+0x64>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <_sbrk+0x64>)
 8003bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20018000 	.word	0x20018000
 8003bbc:	00000400 	.word	0x00000400
 8003bc0:	20000560 	.word	0x20000560
 8003bc4:	20000578 	.word	0x20000578

08003bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <SystemInit+0x20>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <SystemInit+0x20>)
 8003bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c08:	4c0b      	ldr	r4, [pc, #44]	; (8003c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c16:	f7ff ffd7 	bl	8003bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f003 fbaf 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fe ffe3 	bl	8002be8 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c2c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003c30:	0800a8cc 	.word	0x0800a8cc
  ldr r2, =_sbss
 8003c34:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003c38:	20000578 	.word	0x20000578

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 fd0d 	bl	8004688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 f808 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7ff fcb0 	bl	80035d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x54>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x58>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd25 	bl	80046f2 <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00e      	b.n	8003cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d80a      	bhi.n	8003cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f000 fced 	bl	800469e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <HAL_InitTick+0x5c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000018 	.word	0x20000018
 8003cdc:	20000020 	.word	0x20000020
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000020 	.word	0x20000020
 8003d08:	20000564 	.word	0x20000564

08003d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_GetTick+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000564 	.word	0x20000564

08003d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e033      	b.n	8003da2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fc70 	bl	8003628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d6a:	f023 0302 	bic.w	r3, r3, #2
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 faba 	bl	80042f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
 8003d92:	e001      	b.n	8003d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_Start+0x1a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e097      	b.n	8003ef6 <HAL_ADC_Start+0x14a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d018      	beq.n	8003e0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <HAL_ADC_Start+0x158>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a45      	ldr	r2, [pc, #276]	; (8003f08 <HAL_ADC_Start+0x15c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9a      	lsrs	r2, r3, #18
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e00:	e002      	b.n	8003e08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f9      	bne.n	8003e02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d15f      	bne.n	8003edc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d106      	bne.n	8003e6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f023 0206 	bic.w	r2, r3, #6
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_ADC_Start+0x160>)
 8003e7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d129      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e020      	b.n	8003ef4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_ADC_Start+0x164>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d11b      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d114      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000018 	.word	0x20000018
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	40012300 	.word	0x40012300
 8003f10:	40012000 	.word	0x40012000

08003f14 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_Stop+0x16>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e021      	b.n	8003f6e <HAL_ADC_Stop+0x5a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d113      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e063      	b.n	8004088 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003fc0:	f7ff fea4 	bl	8003d0c <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fc6:	e021      	b.n	800400c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d01d      	beq.n	800400c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_ADC_PollForConversion+0x6c>
 8003fd6:	f7ff fe99 	bl	8003d0c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d212      	bcs.n	800400c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d00b      	beq.n	800400c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03d      	b.n	8004088 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d1d6      	bne.n	8003fc8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0212 	mvn.w	r2, #18
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d123      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11f      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d111      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e105      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x228>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d925      	bls.n	8004124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	3b1e      	subs	r3, #30
 80040ee:	2207      	movs	r2, #7
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43da      	mvns	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	400a      	ands	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68d9      	ldr	r1, [r3, #12]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	4618      	mov	r0, r3
 8004110:	4603      	mov	r3, r0
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4403      	add	r3, r0
 8004116:	3b1e      	subs	r3, #30
 8004118:	409a      	lsls	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e022      	b.n	800416a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	2207      	movs	r2, #7
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	400a      	ands	r2, r1
 8004146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6919      	ldr	r1, [r3, #16]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	4618      	mov	r0, r3
 800415a:	4603      	mov	r3, r0
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4403      	add	r3, r0
 8004160:	409a      	lsls	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d824      	bhi.n	80041bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	3b05      	subs	r3, #5
 8004184:	221f      	movs	r2, #31
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	3b05      	subs	r3, #5
 80041ae:	fa00 f203 	lsl.w	r2, r0, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ba:	e04c      	b.n	8004256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d824      	bhi.n	800420e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	3b23      	subs	r3, #35	; 0x23
 80041d6:	221f      	movs	r2, #31
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43da      	mvns	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	400a      	ands	r2, r1
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4618      	mov	r0, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	3b23      	subs	r3, #35	; 0x23
 8004200:	fa00 f203 	lsl.w	r2, r0, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
 800420c:	e023      	b.n	8004256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b41      	subs	r3, #65	; 0x41
 8004220:	221f      	movs	r2, #31
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	400a      	ands	r2, r1
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	4618      	mov	r0, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	3b41      	subs	r3, #65	; 0x41
 800424a:	fa00 f203 	lsl.w	r2, r0, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_ADC_ConfigChannel+0x234>)
 8004258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <HAL_ADC_ConfigChannel+0x238>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x1cc>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b12      	cmp	r3, #18
 800426a:	d105      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_ADC_ConfigChannel+0x238>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d123      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x21e>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b10      	cmp	r3, #16
 8004288:	d003      	beq.n	8004292 <HAL_ADC_ConfigChannel+0x1e6>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b11      	cmp	r3, #17
 8004290:	d11b      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d111      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_ADC_ConfigChannel+0x23c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HAL_ADC_ConfigChannel+0x240>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	0c9a      	lsrs	r2, r3, #18
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042bc:	e002      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f9      	bne.n	80042be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012300 	.word	0x40012300
 80042e4:	40012000 	.word	0x40012000
 80042e8:	20000018 	.word	0x20000018
 80042ec:	431bde83 	.word	0x431bde83

080042f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f8:	4b79      	ldr	r3, [pc, #484]	; (80044e0 <ADC_Init+0x1f0>)
 80042fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	021a      	lsls	r2, r3, #8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	4a58      	ldr	r2, [pc, #352]	; (80044e4 <ADC_Init+0x1f4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	e00f      	b.n	80043ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0202 	bic.w	r2, r2, #2
 80043fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7e1b      	ldrb	r3, [r3, #24]
 8004408:	005a      	lsls	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800443a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	3b01      	subs	r3, #1
 8004448:	035a      	lsls	r2, r3, #13
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e007      	b.n	8004464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	3b01      	subs	r3, #1
 8004480:	051a      	lsls	r2, r3, #20
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044a6:	025a      	lsls	r2, r3, #9
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	029a      	lsls	r2, r3, #10
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40012300 	.word	0x40012300
 80044e4:	0f000001 	.word	0x0f000001

080044e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <__NVIC_SetPriorityGrouping+0x44>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004504:	4013      	ands	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451a:	4a04      	ldr	r2, [pc, #16]	; (800452c <__NVIC_SetPriorityGrouping+0x44>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	60d3      	str	r3, [r2, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <__NVIC_GetPriorityGrouping+0x18>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	f003 0307 	and.w	r3, r3, #7
}
 800453e:	4618      	mov	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db0b      	blt.n	8004576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	4907      	ldr	r1, [pc, #28]	; (8004584 <__NVIC_EnableIRQ+0x38>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2001      	movs	r0, #1
 800456e:	fa00 f202 	lsl.w	r2, r0, r2
 8004572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	e000e100 	.word	0xe000e100

08004588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004598:	2b00      	cmp	r3, #0
 800459a:	db0a      	blt.n	80045b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	490c      	ldr	r1, [pc, #48]	; (80045d4 <__NVIC_SetPriority+0x4c>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	440b      	add	r3, r1
 80045ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b0:	e00a      	b.n	80045c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <__NVIC_SetPriority+0x50>)
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	3b04      	subs	r3, #4
 80045c0:	0112      	lsls	r2, r2, #4
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	440b      	add	r3, r1
 80045c6:	761a      	strb	r2, [r3, #24]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f1c3 0307 	rsb	r3, r3, #7
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	bf28      	it	cs
 80045fa:	2304      	movcs	r3, #4
 80045fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3304      	adds	r3, #4
 8004602:	2b06      	cmp	r3, #6
 8004604:	d902      	bls.n	800460c <NVIC_EncodePriority+0x30>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3b03      	subs	r3, #3
 800460a:	e000      	b.n	800460e <NVIC_EncodePriority+0x32>
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	401a      	ands	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004624:	f04f 31ff 	mov.w	r1, #4294967295
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	43d9      	mvns	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	4313      	orrs	r3, r2
         );
}
 8004636:	4618      	mov	r0, r3
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004654:	d301      	bcc.n	800465a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004656:	2301      	movs	r3, #1
 8004658:	e00f      	b.n	800467a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <SysTick_Config+0x40>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3b01      	subs	r3, #1
 8004660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004662:	210f      	movs	r1, #15
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	f7ff ff8e 	bl	8004588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <SysTick_Config+0x40>)
 800466e:	2200      	movs	r2, #0
 8004670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004672:	4b04      	ldr	r3, [pc, #16]	; (8004684 <SysTick_Config+0x40>)
 8004674:	2207      	movs	r2, #7
 8004676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	e000e010 	.word	0xe000e010

08004688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ff29 	bl	80044e8 <__NVIC_SetPriorityGrouping>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800469e:	b580      	push	{r7, lr}
 80046a0:	b086      	sub	sp, #24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b0:	f7ff ff3e 	bl	8004530 <__NVIC_GetPriorityGrouping>
 80046b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	f7ff ff8e 	bl	80045dc <NVIC_EncodePriority>
 80046c0:	4602      	mov	r2, r0
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff5d 	bl	8004588 <__NVIC_SetPriority>
}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff31 	bl	800454c <__NVIC_EnableIRQ>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ffa2 	bl	8004644 <SysTick_Config>
 8004700:	4603      	mov	r3, r0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7ff faf8 	bl	8003d0c <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d008      	beq.n	800473c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e052      	b.n	80047e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0216 	bic.w	r2, r2, #22
 800474a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800475a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <HAL_DMA_Abort+0x62>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478c:	e013      	b.n	80047b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478e:	f7ff fabd 	bl	8003d0c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b05      	cmp	r3, #5
 800479a:	d90c      	bls.n	80047b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2203      	movs	r2, #3
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e015      	b.n	80047e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e4      	bne.n	800478e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	223f      	movs	r2, #63	; 0x3f
 80047ca:	409a      	lsls	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e00c      	b.n	8004822 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2205      	movs	r2, #5
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e159      	b.n	8004b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800484c:	2201      	movs	r2, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	429a      	cmp	r2, r3
 8004866:	f040 8148 	bne.w	8004afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d005      	beq.n	8004882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800487e:	2b02      	cmp	r3, #2
 8004880:	d130      	bne.n	80048e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	2203      	movs	r2, #3
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048b8:	2201      	movs	r2, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0201 	and.w	r2, r3, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d017      	beq.n	8004920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d123      	bne.n	8004974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	220f      	movs	r2, #15
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	08da      	lsrs	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3208      	adds	r2, #8
 800496e:	69b9      	ldr	r1, [r7, #24]
 8004970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0203 	and.w	r2, r3, #3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a2 	beq.w	8004afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <HAL_GPIO_Init+0x2e8>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	4a56      	ldr	r2, [pc, #344]	; (8004b18 <HAL_GPIO_Init+0x2e8>)
 80049c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c4:	6453      	str	r3, [r2, #68]	; 0x44
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_GPIO_Init+0x2e8>)
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d2:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_GPIO_Init+0x2ec>)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3302      	adds	r3, #2
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	220f      	movs	r2, #15
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <HAL_GPIO_Init+0x2f0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d019      	beq.n	8004a32 <HAL_GPIO_Init+0x202>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a48      	ldr	r2, [pc, #288]	; (8004b24 <HAL_GPIO_Init+0x2f4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_GPIO_Init+0x1fe>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_GPIO_Init+0x2f8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00d      	beq.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a46      	ldr	r2, [pc, #280]	; (8004b2c <HAL_GPIO_Init+0x2fc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <HAL_GPIO_Init+0x1f6>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a45      	ldr	r2, [pc, #276]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_GPIO_Init+0x1f2>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e008      	b.n	8004a34 <HAL_GPIO_Init+0x204>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e006      	b.n	8004a34 <HAL_GPIO_Init+0x204>
 8004a26:	2303      	movs	r3, #3
 8004a28:	e004      	b.n	8004a34 <HAL_GPIO_Init+0x204>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e002      	b.n	8004a34 <HAL_GPIO_Init+0x204>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_GPIO_Init+0x204>
 8004a32:	2300      	movs	r3, #0
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f002 0203 	and.w	r2, r2, #3
 8004a3a:	0092      	lsls	r2, r2, #2
 8004a3c:	4093      	lsls	r3, r2
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a44:	4935      	ldr	r1, [pc, #212]	; (8004b1c <HAL_GPIO_Init+0x2ec>)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a76:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aca:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af4:	4a0f      	ldr	r2, [pc, #60]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	f67f aea2 	bls.w	800484c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	40020000 	.word	0x40020000
 8004b24:	40020400 	.word	0x40020400
 8004b28:	40020800 	.word	0x40020800
 8004b2c:	40020c00 	.word	0x40020c00
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40013c00 	.word	0x40013c00

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b54:	e003      	b.n	8004b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	041a      	lsls	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d006      	beq.n	8004b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fcdc 	bl	8003548 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40013c00 	.word	0x40013c00

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e267      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d075      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bba:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00c      	beq.n	8004be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc6:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d112      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd2:	4b82      	ldr	r3, [pc, #520]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bde:	d10b      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be0:	4b7e      	ldr	r3, [pc, #504]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d05b      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x108>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d157      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e242      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d106      	bne.n	8004c10 <HAL_RCC_OscConfig+0x74>
 8004c02:	4b76      	ldr	r3, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a75      	ldr	r2, [pc, #468]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e01d      	b.n	8004c4c <HAL_RCC_OscConfig+0xb0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x98>
 8004c1a:	4b70      	ldr	r3, [pc, #448]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6f      	ldr	r2, [pc, #444]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6c      	ldr	r2, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e00b      	b.n	8004c4c <HAL_RCC_OscConfig+0xb0>
 8004c34:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a68      	ldr	r2, [pc, #416]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7ff f85a 	bl	8003d0c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7ff f856 	bl	8003d0c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	; 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e207      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0xc0>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7ff f846 	bl	8003d0c <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c84:	f7ff f842 	bl	8003d0c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e1f3      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c96:	4b51      	ldr	r3, [pc, #324]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0xe8>
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d063      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b47      	ldr	r3, [pc, #284]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d11c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cca:	4b44      	ldr	r3, [pc, #272]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_RCC_OscConfig+0x152>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e1c7      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4937      	ldr	r1, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d02:	e03a      	b.n	8004d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fe fffb 	bl	8003d0c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fe fff7 	bl	8003d0c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1a8      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4925      	ldr	r1, [pc, #148]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
 8004d4c:	e015      	b.n	8004d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_RCC_OscConfig+0x244>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe ffda 	bl	8003d0c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fe ffd6 	bl	8003d0c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e187      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d036      	beq.n	8004df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_RCC_OscConfig+0x248>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fe ffba 	bl	8003d0c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fe ffb6 	bl	8003d0c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e167      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x200>
 8004dba:	e01b      	b.n	8004df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_OscConfig+0x248>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe ffa3 	bl	8003d0c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	e00e      	b.n	8004de8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fe ff9f 	bl	8003d0c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d907      	bls.n	8004de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e150      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	42470000 	.word	0x42470000
 8004de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ea      	bne.n	8004dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8097 	beq.w	8004f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	4b7d      	ldr	r3, [pc, #500]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4a7c      	ldr	r2, [pc, #496]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	; 0x40
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	4b77      	ldr	r3, [pc, #476]	; (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3e:	4b74      	ldr	r3, [pc, #464]	; (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a73      	ldr	r2, [pc, #460]	; (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe ff5f 	bl	8003d0c <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fe ff5b 	bl	8003d0c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e10c      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2ea>
 8004e78:	4b64      	ldr	r3, [pc, #400]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a63      	ldr	r2, [pc, #396]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
 8004e84:	e01c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x324>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x30c>
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a5e      	ldr	r2, [pc, #376]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	4b5c      	ldr	r3, [pc, #368]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a5b      	ldr	r2, [pc, #364]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x324>
 8004ea8:	4b58      	ldr	r3, [pc, #352]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a57      	ldr	r2, [pc, #348]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	4b55      	ldr	r3, [pc, #340]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a54      	ldr	r2, [pc, #336]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004eba:	f023 0304 	bic.w	r3, r3, #4
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fe ff20 	bl	8003d0c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fe ff1c 	bl	8003d0c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0cb      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	4b49      	ldr	r3, [pc, #292]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ee      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x334>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef4:	f7fe ff0a 	bl	8003d0c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fe ff06 	bl	8003d0c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0b5      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1ee      	bne.n	8004efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f24:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	4a38      	ldr	r2, [pc, #224]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80a1 	beq.w	800507c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3a:	4b34      	ldr	r3, [pc, #208]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d05c      	beq.n	8005000 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d141      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <HAL_RCC_OscConfig+0x478>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe feda 	bl	8003d0c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fe fed6 	bl	8003d0c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e087      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b27      	ldr	r3, [pc, #156]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	491b      	ldr	r1, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x478>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fe feaf 	bl	8003d0c <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fe feab 	bl	8003d0c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e05c      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x416>
 8004fd0:	e054      	b.n	800507c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_RCC_OscConfig+0x478>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fe98 	bl	8003d0c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fe fe94 	bl	8003d0c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e045      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCC_OscConfig+0x470>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x444>
 8004ffe:	e03d      	b.n	800507c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e038      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
 800500c:	40023800 	.word	0x40023800
 8005010:	40007000 	.word	0x40007000
 8005014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005018:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x4ec>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d028      	beq.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005030:	429a      	cmp	r2, r3
 8005032:	d121      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d11a      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005048:	4013      	ands	r3, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800504e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005050:	4293      	cmp	r3, r2
 8005052:	d111      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	3b01      	subs	r3, #1
 8005062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800

0800508c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0cc      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b68      	ldr	r3, [pc, #416]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90c      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b65      	ldr	r3, [pc, #404]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b63      	ldr	r3, [pc, #396]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0b8      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b59      	ldr	r3, [pc, #356]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a58      	ldr	r2, [pc, #352]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b53      	ldr	r3, [pc, #332]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a52      	ldr	r2, [pc, #328]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b50      	ldr	r3, [pc, #320]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	494d      	ldr	r1, [pc, #308]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d044      	beq.n	80051ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d119      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d003      	beq.n	800514a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005146:	2b03      	cmp	r3, #3
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514a:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e06f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515a:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e067      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516a:	4b37      	ldr	r3, [pc, #220]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 0203 	bic.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4934      	ldr	r1, [pc, #208]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800517c:	f7fe fdc6 	bl	8003d0c <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	e00a      	b.n	800519a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005184:	f7fe fdc2 	bl	8003d0c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e04f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 020c 	and.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1eb      	bne.n	8005184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d20c      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b22      	ldr	r3, [pc, #136]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e032      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	490e      	ldr	r1, [pc, #56]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	490a      	ldr	r1, [pc, #40]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe fd26 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40023c00 	.word	0x40023c00
 8005248:	40023800 	.word	0x40023800
 800524c:	0800a4cc 	.word	0x0800a4cc
 8005250:	20000018 	.word	0x20000018
 8005254:	2000001c 	.word	0x2000001c

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b094      	sub	sp, #80	; 0x50
 800525e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	647b      	str	r3, [r7, #68]	; 0x44
 8005264:	2300      	movs	r3, #0
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005268:	2300      	movs	r3, #0
 800526a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005270:	4b79      	ldr	r3, [pc, #484]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b08      	cmp	r3, #8
 800527a:	d00d      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x40>
 800527c:	2b08      	cmp	r3, #8
 800527e:	f200 80e1 	bhi.w	8005444 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x34>
 8005286:	2b04      	cmp	r3, #4
 8005288:	d003      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x3a>
 800528a:	e0db      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800528c:	4b73      	ldr	r3, [pc, #460]	; (800545c <HAL_RCC_GetSysClockFreq+0x204>)
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005290:	e0db      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005292:	4b73      	ldr	r3, [pc, #460]	; (8005460 <HAL_RCC_GetSysClockFreq+0x208>)
 8005294:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005296:	e0d8      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005298:	4b6f      	ldr	r3, [pc, #444]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a2:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d063      	beq.n	8005376 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ae:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	2200      	movs	r2, #0
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f04f 0000 	mov.w	r0, #0
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	0159      	lsls	r1, r3, #5
 80052d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052dc:	0150      	lsls	r0, r2, #5
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4621      	mov	r1, r4
 80052e4:	1a51      	subs	r1, r2, r1
 80052e6:	6139      	str	r1, [r7, #16]
 80052e8:	4629      	mov	r1, r5
 80052ea:	eb63 0301 	sbc.w	r3, r3, r1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052fc:	4659      	mov	r1, fp
 80052fe:	018b      	lsls	r3, r1, #6
 8005300:	4651      	mov	r1, sl
 8005302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005306:	4651      	mov	r1, sl
 8005308:	018a      	lsls	r2, r1, #6
 800530a:	4651      	mov	r1, sl
 800530c:	ebb2 0801 	subs.w	r8, r2, r1
 8005310:	4659      	mov	r1, fp
 8005312:	eb63 0901 	sbc.w	r9, r3, r1
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532a:	4690      	mov	r8, r2
 800532c:	4699      	mov	r9, r3
 800532e:	4623      	mov	r3, r4
 8005330:	eb18 0303 	adds.w	r3, r8, r3
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	462b      	mov	r3, r5
 8005338:	eb49 0303 	adc.w	r3, r9, r3
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800534a:	4629      	mov	r1, r5
 800534c:	024b      	lsls	r3, r1, #9
 800534e:	4621      	mov	r1, r4
 8005350:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005354:	4621      	mov	r1, r4
 8005356:	024a      	lsls	r2, r1, #9
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535e:	2200      	movs	r2, #0
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005368:	f7fb fc46 	bl	8000bf8 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4613      	mov	r3, r2
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	e058      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4b38      	ldr	r3, [pc, #224]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	2200      	movs	r2, #0
 800537e:	4618      	mov	r0, r3
 8005380:	4611      	mov	r1, r2
 8005382:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	2300      	movs	r3, #0
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	0159      	lsls	r1, r3, #5
 800539e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a2:	0150      	lsls	r0, r2, #5
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4641      	mov	r1, r8
 80053aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053c8:	ebb2 040a 	subs.w	r4, r2, sl
 80053cc:	eb63 050b 	sbc.w	r5, r3, fp
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	00eb      	lsls	r3, r5, #3
 80053da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053de:	00e2      	lsls	r2, r4, #3
 80053e0:	4614      	mov	r4, r2
 80053e2:	461d      	mov	r5, r3
 80053e4:	4643      	mov	r3, r8
 80053e6:	18e3      	adds	r3, r4, r3
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	464b      	mov	r3, r9
 80053ec:	eb45 0303 	adc.w	r3, r5, r3
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053fe:	4629      	mov	r1, r5
 8005400:	028b      	lsls	r3, r1, #10
 8005402:	4621      	mov	r1, r4
 8005404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005408:	4621      	mov	r1, r4
 800540a:	028a      	lsls	r2, r1, #10
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	2200      	movs	r2, #0
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541c:	f7fb fbec 	bl	8000bf8 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_GetSysClockFreq+0x200>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	3301      	adds	r3, #1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800543a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCC_GetSysClockFreq+0x204>)
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800544c:	4618      	mov	r0, r3
 800544e:	3750      	adds	r7, #80	; 0x50
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800
 800545c:	00f42400 	.word	0x00f42400
 8005460:	007a1200 	.word	0x007a1200

08005464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_GetHCLKFreq+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000018 	.word	0x20000018

0800547c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005480:	f7ff fff0 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4903      	ldr	r1, [pc, #12]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40023800 	.word	0x40023800
 80054a0:	0800a4dc 	.word	0x0800a4dc

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054a8:	f7ff ffdc 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0b5b      	lsrs	r3, r3, #13
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	0800a4dc 	.word	0x0800a4dc

080054cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e041      	b.n	8005562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fe f8dc 	bl	80036b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 fb7e 	bl	8005c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e03c      	b.n	80055fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_TIM_Base_Start+0xa0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_TIM_Base_Start+0x5c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d013      	beq.n	80055c8 <HAL_TIM_Base_Start+0x5c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIM_Base_Start+0xa4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIM_Base_Start+0x5c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_TIM_Base_Start+0xa8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIM_Base_Start+0x5c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIM_Base_Start+0xac>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_Base_Start+0x5c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_TIM_Base_Start+0xb0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d010      	beq.n	80055fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e007      	b.n	80055fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d001      	beq.n	8005638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e044      	b.n	80056c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1e      	ldr	r2, [pc, #120]	; (80056d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d018      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x6c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d013      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x6c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00e      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x6c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x6c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_TIM_Base_Start_IT+0xbc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x6c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d111      	bne.n	80056b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b06      	cmp	r3, #6
 800569c:	d010      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	e007      	b.n	80056c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40014000 	.word	0x40014000

080056e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e041      	b.n	800577a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f839 	bl	8005782 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 fa72 	bl	8005c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x24>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e022      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d109      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x3e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e015      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d109      	bne.n	80057f0 <HAL_TIM_PWM_Start+0x58>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e008      	b.n	8005802 <HAL_TIM_PWM_Start+0x6a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e068      	b.n	80058dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start+0x82>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005818:	e013      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start+0x92>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	e00b      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005838:	e003      	b.n	8005842 <HAL_TIM_PWM_Start+0xaa>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fc84 	bl	8006158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <HAL_TIM_PWM_Start+0x14c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d107      	bne.n	800586a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_TIM_PWM_Start+0x14c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x10e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587c:	d013      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x10e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <HAL_TIM_PWM_Start+0x150>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x10e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_TIM_PWM_Start+0x154>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x10e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_TIM_PWM_Start+0x158>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x10e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <HAL_TIM_PWM_Start+0x15c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d111      	bne.n	80058ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d010      	beq.n	80058da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c8:	e007      	b.n	80058da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40000c00 	.word	0x40000c00
 80058f4:	40014000 	.word	0x40014000

080058f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005912:	2302      	movs	r3, #2
 8005914:	e0ae      	b.n	8005a74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	f200 809f 	bhi.w	8005a64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005961 	.word	0x08005961
 8005930:	08005a65 	.word	0x08005a65
 8005934:	08005a65 	.word	0x08005a65
 8005938:	08005a65 	.word	0x08005a65
 800593c:	080059a1 	.word	0x080059a1
 8005940:	08005a65 	.word	0x08005a65
 8005944:	08005a65 	.word	0x08005a65
 8005948:	08005a65 	.word	0x08005a65
 800594c:	080059e3 	.word	0x080059e3
 8005950:	08005a65 	.word	0x08005a65
 8005954:	08005a65 	.word	0x08005a65
 8005958:	08005a65 	.word	0x08005a65
 800595c:	08005a23 	.word	0x08005a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f9d0 	bl	8005d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	619a      	str	r2, [r3, #24]
      break;
 800599e:	e064      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa16 	bl	8005dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
      break;
 80059e0:	e043      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fa61 	bl	8005eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0208 	orr.w	r2, r2, #8
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0204 	bic.w	r2, r2, #4
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	61da      	str	r2, [r3, #28]
      break;
 8005a20:	e023      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 faab 	bl	8005f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	021a      	lsls	r2, r3, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	61da      	str	r2, [r3, #28]
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b4      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x186>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d03e      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0xd4>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	f200 8087 	bhi.w	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	f000 8086 	beq.w	8005bee <HAL_TIM_ConfigClockSource+0x172>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d87f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xa6>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d87b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d050      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x11a>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d877      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d03c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xfa>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d873      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d058      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d86f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d064      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d86b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d060      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d867      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05c      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f000 faf1 	bl	8006118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	609a      	str	r2, [r3, #8]
      break;
 8005b4e:	e04f      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f000 fada 	bl	8006118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b72:	609a      	str	r2, [r3, #8]
      break;
 8005b74:	e03c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 fa4e 	bl	8006024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2150      	movs	r1, #80	; 0x50
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 faa7 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005b94:	e02c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fa6d 	bl	8006082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2160      	movs	r1, #96	; 0x60
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fa97 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fa2e 	bl	8006024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa87 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e00c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 fa7e 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005be6:	e003      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e000      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a34      	ldr	r2, [pc, #208]	; (8005cf0 <TIM_Base_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0x38>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0x38>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a31      	ldr	r2, [pc, #196]	; (8005cf4 <TIM_Base_SetConfig+0xe8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0x38>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a30      	ldr	r2, [pc, #192]	; (8005cf8 <TIM_Base_SetConfig+0xec>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0x38>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <TIM_Base_SetConfig+0xf0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d108      	bne.n	8005c56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <TIM_Base_SetConfig+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01b      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d017      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <TIM_Base_SetConfig+0xe8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <TIM_Base_SetConfig+0xec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <TIM_Base_SetConfig+0xf0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <TIM_Base_SetConfig+0xf4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <TIM_Base_SetConfig+0xf8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_Base_SetConfig+0x8a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <TIM_Base_SetConfig+0xfc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <TIM_Base_SetConfig+0xe4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d103      	bne.n	8005cdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	615a      	str	r2, [r3, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0303 	bic.w	r3, r3, #3
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 0302 	bic.w	r3, r3, #2
 8005d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <TIM_OC1_SetConfig+0xc8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10c      	bne.n	8005d82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0308 	bic.w	r3, r3, #8
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <TIM_OC1_SetConfig+0xc8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d111      	bne.n	8005dae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40010000 	.word	0x40010000

08005dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f023 0210 	bic.w	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0320 	bic.w	r3, r3, #32
 8005e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <TIM_OC2_SetConfig+0xd4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10d      	bne.n	8005e54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <TIM_OC2_SetConfig+0xd4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d113      	bne.n	8005e84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000

08005eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <TIM_OC3_SetConfig+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d10d      	bne.n	8005f2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <TIM_OC3_SetConfig+0xd0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d113      	bne.n	8005f5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40010000 	.word	0x40010000

08005f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <TIM_OC4_SetConfig+0x9c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d109      	bne.n	8005ff8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	019b      	lsls	r3, r3, #6
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000

08006024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 030a 	bic.w	r3, r3, #10
 8006060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006082:	b480      	push	{r7}
 8006084:	b087      	sub	sp, #28
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0210 	bic.w	r2, r3, #16
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	031b      	lsls	r3, r3, #12
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 0307 	orr.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e050      	b.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d013      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a18      	ldr	r2, [pc, #96]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a16      	ldr	r2, [pc, #88]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10c      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000

08006280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e03f      	b.n	8006312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fd faae 	bl	8003808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	; 0x24
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fddf 	bl	8006e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b08a      	sub	sp, #40	; 0x28
 800631e:	af02      	add	r7, sp, #8
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b20      	cmp	r3, #32
 8006338:	d17c      	bne.n	8006434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_Transmit+0x2c>
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e075      	b.n	8006436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UART_Transmit+0x3e>
 8006354:	2302      	movs	r3, #2
 8006356:	e06e      	b.n	8006436 <HAL_UART_Transmit+0x11c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2221      	movs	r2, #33	; 0x21
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800636e:	f7fd fccd 	bl	8003d0c <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d108      	bne.n	800639c <HAL_UART_Transmit+0x82>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e003      	b.n	80063a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063ac:	e02a      	b.n	8006404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fb1f 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e036      	b.n	8006436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	3302      	adds	r3, #2
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e007      	b.n	80063f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cf      	bne.n	80063ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2200      	movs	r2, #0
 8006416:	2140      	movs	r1, #64	; 0x40
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 faef 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e006      	b.n	8006436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b20      	cmp	r3, #32
 8006456:	d11d      	bne.n	8006494 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Receive_IT+0x26>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e016      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UART_Receive_IT+0x38>
 8006472:	2302      	movs	r3, #2
 8006474:	e00f      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	461a      	mov	r2, r3
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fb24 	bl	8006ad8 <UART_Start_Receive_IT>
 8006490:	4603      	mov	r3, r0
 8006492:	e000      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b0ba      	sub	sp, #232	; 0xe8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_UART_IRQHandler+0x66>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fc07 	bl	8006d12 <UART_Receive_IT>
      return;
 8006504:	e256      	b.n	80069b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80de 	beq.w	80066cc <HAL_UART_IRQHandler+0x22c>
 8006510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006520:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80d1 	beq.w	80066cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_UART_IRQHandler+0xae>
 8006536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0201 	orr.w	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_UART_IRQHandler+0xd2>
 800655a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0202 	orr.w	r2, r3, #2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <HAL_UART_IRQHandler+0xf6>
 800657e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0204 	orr.w	r2, r3, #4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <HAL_UART_IRQHandler+0x126>
 80065a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f043 0208 	orr.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 81ed 	beq.w	80069aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_UART_IRQHandler+0x14e>
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fb92 	bl	8006d12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_UART_IRQHandler+0x17a>
 8006612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d04f      	beq.n	80066ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa9a 	bl	8006b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d141      	bne.n	80066b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3314      	adds	r3, #20
 8006634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1d9      	bne.n	800662e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	4a7d      	ldr	r2, [pc, #500]	; (800687c <HAL_UART_IRQHandler+0x3dc>)
 8006688:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe f8ab 	bl	80047ea <HAL_DMA_Abort_IT>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e00e      	b.n	80066c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f990 	bl	80069d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00a      	b.n	80066c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f98c 	bl	80069d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e006      	b.n	80066c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f988 	bl	80069d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066c6:	e170      	b.n	80069aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	bf00      	nop
    return;
 80066ca:	e16e      	b.n	80069aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 814a 	bne.w	800696a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8143 	beq.w	800696a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 813c 	beq.w	800696a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	f040 80b4 	bne.w	8006880 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8140 	beq.w	80069ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006736:	429a      	cmp	r2, r3
 8006738:	f080 8139 	bcs.w	80069ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006742:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674e:	f000 8088 	beq.w	8006862 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800677e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800678a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1d9      	bne.n	8006752 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3314      	adds	r3, #20
 80067a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e1      	bne.n	800679e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e3      	bne.n	80067da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006832:	f023 0310 	bic.w	r3, r3, #16
 8006836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006844:	65ba      	str	r2, [r7, #88]	; 0x58
 8006846:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800684a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e3      	bne.n	8006820 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	4618      	mov	r0, r3
 800685e:	f7fd ff54 	bl	800470a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800686a:	b29b      	uxth	r3, r3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	b29b      	uxth	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f8b6 	bl	80069e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006878:	e099      	b.n	80069ae <HAL_UART_IRQHandler+0x50e>
 800687a:	bf00      	nop
 800687c:	08006c1b 	.word	0x08006c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006888:	b29b      	uxth	r3, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 808b 	beq.w	80069b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800689c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8086 	beq.w	80069b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068ca:	647a      	str	r2, [r7, #68]	; 0x44
 80068cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e3      	bne.n	80068a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3314      	adds	r3, #20
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	623b      	str	r3, [r7, #32]
   return(result);
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3314      	adds	r3, #20
 80068fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006902:	633a      	str	r2, [r7, #48]	; 0x30
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	60fb      	str	r3, [r7, #12]
   return(result);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0310 	bic.w	r3, r3, #16
 800693a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	617b      	str	r3, [r7, #20]
   return(result);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e3      	bne.n	8006924 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800695c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f83e 	bl	80069e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006968:	e023      	b.n	80069b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_UART_IRQHandler+0x4ea>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f95d 	bl	8006c42 <UART_Transmit_IT>
    return;
 8006988:	e014      	b.n	80069b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <HAL_UART_IRQHandler+0x514>
 8006996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f99d 	bl	8006ce2 <UART_EndTransmit_IT>
    return;
 80069a8:	e004      	b.n	80069b4 <HAL_UART_IRQHandler+0x514>
    return;
 80069aa:	bf00      	nop
 80069ac:	e002      	b.n	80069b4 <HAL_UART_IRQHandler+0x514>
      return;
 80069ae:	bf00      	nop
 80069b0:	e000      	b.n	80069b4 <HAL_UART_IRQHandler+0x514>
      return;
 80069b2:	bf00      	nop
  }
}
 80069b4:	37e8      	adds	r7, #232	; 0xe8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b090      	sub	sp, #64	; 0x40
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0c:	e050      	b.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d04c      	beq.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1c:	f7fd f976 	bl	8003d0c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d241      	bcs.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3314      	adds	r3, #20
 8006a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3314      	adds	r3, #20
 8006a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a80:	623a      	str	r2, [r7, #32]
 8006a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69f9      	ldr	r1, [r7, #28]
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e00f      	b.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d09f      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3740      	adds	r7, #64	; 0x40
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2222      	movs	r2, #34	; 0x22
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0220 	orr.w	r2, r2, #32
 8006b44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b095      	sub	sp, #84	; 0x54
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f023 0301 	bic.w	r3, r3, #1
 8006ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d119      	bne.n	8006c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f023 0310 	bic.w	r3, r3, #16
 8006be2:	647b      	str	r3, [r7, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bec:	61ba      	str	r2, [r7, #24]
 8006bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	6979      	ldr	r1, [r7, #20]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e5      	bne.n	8006bcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c0e:	bf00      	nop
 8006c10:	3754      	adds	r7, #84	; 0x54
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff fecb 	bl	80069d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b21      	cmp	r3, #33	; 0x21
 8006c54:	d13e      	bne.n	8006cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	d114      	bne.n	8006c8a <UART_Transmit_IT+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	621a      	str	r2, [r3, #32]
 8006c88:	e008      	b.n	8006c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6211      	str	r1, [r2, #32]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10f      	bne.n	8006cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fe5a 	bl	80069bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b08c      	sub	sp, #48	; 0x30
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b22      	cmp	r3, #34	; 0x22
 8006d24:	f040 80ab 	bne.w	8006e7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d30:	d117      	bne.n	8006d62 <UART_Receive_IT+0x50>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d113      	bne.n	8006d62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	1c9a      	adds	r2, r3, #2
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d60:	e026      	b.n	8006db0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d74:	d007      	beq.n	8006d86 <UART_Receive_IT+0x74>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <UART_Receive_IT+0x82>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e008      	b.n	8006da6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d15a      	bne.n	8006e7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0220 	bic.w	r2, r2, #32
 8006dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695a      	ldr	r2, [r3, #20]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d135      	bne.n	8006e70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f023 0310 	bic.w	r3, r3, #16
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	623a      	str	r2, [r7, #32]
 8006e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	69f9      	ldr	r1, [r7, #28]
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d10a      	bne.n	8006e62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff fdbb 	bl	80069e4 <HAL_UARTEx_RxEventCallback>
 8006e6e:	e002      	b.n	8006e76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fc fb7f 	bl	8003574 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e002      	b.n	8006e80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3730      	adds	r7, #48	; 0x30
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e8c:	b0c0      	sub	sp, #256	; 0x100
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	68d9      	ldr	r1, [r3, #12]
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	ea40 0301 	orr.w	r3, r0, r1
 8006eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ee0:	f021 010c 	bic.w	r1, r1, #12
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f02:	6999      	ldr	r1, [r3, #24]
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	ea40 0301 	orr.w	r3, r0, r1
 8006f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b8f      	ldr	r3, [pc, #572]	; (8007154 <UART_SetConfig+0x2cc>)
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d005      	beq.n	8006f28 <UART_SetConfig+0xa0>
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b8d      	ldr	r3, [pc, #564]	; (8007158 <UART_SetConfig+0x2d0>)
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d104      	bne.n	8006f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f28:	f7fe fabc 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8006f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f30:	e003      	b.n	8006f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f32:	f7fe faa3 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8006f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f44:	f040 810c 	bne.w	8007160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	1891      	adds	r1, r2, r2
 8006f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f62:	415b      	adcs	r3, r3
 8006f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	eb12 0801 	adds.w	r8, r2, r1
 8006f70:	4629      	mov	r1, r5
 8006f72:	eb43 0901 	adc.w	r9, r3, r1
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f8a:	4690      	mov	r8, r2
 8006f8c:	4699      	mov	r9, r3
 8006f8e:	4623      	mov	r3, r4
 8006f90:	eb18 0303 	adds.w	r3, r8, r3
 8006f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f98:	462b      	mov	r3, r5
 8006f9a:	eb49 0303 	adc.w	r3, r9, r3
 8006f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	18db      	adds	r3, r3, r3
 8006fba:	653b      	str	r3, [r7, #80]	; 0x50
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	eb42 0303 	adc.w	r3, r2, r3
 8006fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fcc:	f7f9 fe14 	bl	8000bf8 <__aeabi_uldivmod>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4b61      	ldr	r3, [pc, #388]	; (800715c <UART_SetConfig+0x2d4>)
 8006fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	011c      	lsls	r4, r3, #4
 8006fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	1891      	adds	r1, r2, r2
 8006ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ff8:	415b      	adcs	r3, r3
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007000:	4641      	mov	r1, r8
 8007002:	eb12 0a01 	adds.w	sl, r2, r1
 8007006:	4649      	mov	r1, r9
 8007008:	eb43 0b01 	adc.w	fp, r3, r1
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800701c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007020:	4692      	mov	sl, r2
 8007022:	469b      	mov	fp, r3
 8007024:	4643      	mov	r3, r8
 8007026:	eb1a 0303 	adds.w	r3, sl, r3
 800702a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800702e:	464b      	mov	r3, r9
 8007030:	eb4b 0303 	adc.w	r3, fp, r3
 8007034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800704c:	460b      	mov	r3, r1
 800704e:	18db      	adds	r3, r3, r3
 8007050:	643b      	str	r3, [r7, #64]	; 0x40
 8007052:	4613      	mov	r3, r2
 8007054:	eb42 0303 	adc.w	r3, r2, r3
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
 800705a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800705e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007062:	f7f9 fdc9 	bl	8000bf8 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4611      	mov	r1, r2
 800706c:	4b3b      	ldr	r3, [pc, #236]	; (800715c <UART_SetConfig+0x2d4>)
 800706e:	fba3 2301 	umull	r2, r3, r3, r1
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	2264      	movs	r2, #100	; 0x64
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	1acb      	subs	r3, r1, r3
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007082:	4b36      	ldr	r3, [pc, #216]	; (800715c <UART_SetConfig+0x2d4>)
 8007084:	fba3 2302 	umull	r2, r3, r3, r2
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007090:	441c      	add	r4, r3
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	1891      	adds	r1, r2, r2
 80070aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80070ac:	415b      	adcs	r3, r3
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070b4:	4641      	mov	r1, r8
 80070b6:	1851      	adds	r1, r2, r1
 80070b8:	6339      	str	r1, [r7, #48]	; 0x30
 80070ba:	4649      	mov	r1, r9
 80070bc:	414b      	adcs	r3, r1
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070cc:	4659      	mov	r1, fp
 80070ce:	00cb      	lsls	r3, r1, #3
 80070d0:	4651      	mov	r1, sl
 80070d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d6:	4651      	mov	r1, sl
 80070d8:	00ca      	lsls	r2, r1, #3
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	4603      	mov	r3, r0
 80070e0:	4642      	mov	r2, r8
 80070e2:	189b      	adds	r3, r3, r2
 80070e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e8:	464b      	mov	r3, r9
 80070ea:	460a      	mov	r2, r1
 80070ec:	eb42 0303 	adc.w	r3, r2, r3
 80070f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007108:	460b      	mov	r3, r1
 800710a:	18db      	adds	r3, r3, r3
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
 800710e:	4613      	mov	r3, r2
 8007110:	eb42 0303 	adc.w	r3, r2, r3
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800711a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800711e:	f7f9 fd6b 	bl	8000bf8 <__aeabi_uldivmod>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <UART_SetConfig+0x2d4>)
 8007128:	fba3 1302 	umull	r1, r3, r3, r2
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	2164      	movs	r1, #100	; 0x64
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	3332      	adds	r3, #50	; 0x32
 800713a:	4a08      	ldr	r2, [pc, #32]	; (800715c <UART_SetConfig+0x2d4>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f003 0207 	and.w	r2, r3, #7
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4422      	add	r2, r4
 800714e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007150:	e105      	b.n	800735e <UART_SetConfig+0x4d6>
 8007152:	bf00      	nop
 8007154:	40011000 	.word	0x40011000
 8007158:	40011400 	.word	0x40011400
 800715c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007164:	2200      	movs	r2, #0
 8007166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800716a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800716e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	1891      	adds	r1, r2, r2
 8007178:	6239      	str	r1, [r7, #32]
 800717a:	415b      	adcs	r3, r3
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007182:	4641      	mov	r1, r8
 8007184:	1854      	adds	r4, r2, r1
 8007186:	4649      	mov	r1, r9
 8007188:	eb43 0501 	adc.w	r5, r3, r1
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	00eb      	lsls	r3, r5, #3
 8007196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800719a:	00e2      	lsls	r2, r4, #3
 800719c:	4614      	mov	r4, r2
 800719e:	461d      	mov	r5, r3
 80071a0:	4643      	mov	r3, r8
 80071a2:	18e3      	adds	r3, r4, r3
 80071a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071a8:	464b      	mov	r3, r9
 80071aa:	eb45 0303 	adc.w	r3, r5, r3
 80071ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071ce:	4629      	mov	r1, r5
 80071d0:	008b      	lsls	r3, r1, #2
 80071d2:	4621      	mov	r1, r4
 80071d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d8:	4621      	mov	r1, r4
 80071da:	008a      	lsls	r2, r1, #2
 80071dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071e0:	f7f9 fd0a 	bl	8000bf8 <__aeabi_uldivmod>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4b60      	ldr	r3, [pc, #384]	; (800736c <UART_SetConfig+0x4e4>)
 80071ea:	fba3 2302 	umull	r2, r3, r3, r2
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	011c      	lsls	r4, r3, #4
 80071f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007204:	4642      	mov	r2, r8
 8007206:	464b      	mov	r3, r9
 8007208:	1891      	adds	r1, r2, r2
 800720a:	61b9      	str	r1, [r7, #24]
 800720c:	415b      	adcs	r3, r3
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007214:	4641      	mov	r1, r8
 8007216:	1851      	adds	r1, r2, r1
 8007218:	6139      	str	r1, [r7, #16]
 800721a:	4649      	mov	r1, r9
 800721c:	414b      	adcs	r3, r1
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800722c:	4659      	mov	r1, fp
 800722e:	00cb      	lsls	r3, r1, #3
 8007230:	4651      	mov	r1, sl
 8007232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007236:	4651      	mov	r1, sl
 8007238:	00ca      	lsls	r2, r1, #3
 800723a:	4610      	mov	r0, r2
 800723c:	4619      	mov	r1, r3
 800723e:	4603      	mov	r3, r0
 8007240:	4642      	mov	r2, r8
 8007242:	189b      	adds	r3, r3, r2
 8007244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007248:	464b      	mov	r3, r9
 800724a:	460a      	mov	r2, r1
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	67bb      	str	r3, [r7, #120]	; 0x78
 800725e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800726c:	4649      	mov	r1, r9
 800726e:	008b      	lsls	r3, r1, #2
 8007270:	4641      	mov	r1, r8
 8007272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007276:	4641      	mov	r1, r8
 8007278:	008a      	lsls	r2, r1, #2
 800727a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800727e:	f7f9 fcbb 	bl	8000bf8 <__aeabi_uldivmod>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <UART_SetConfig+0x4e4>)
 8007288:	fba3 1302 	umull	r1, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	2164      	movs	r1, #100	; 0x64
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	3332      	adds	r3, #50	; 0x32
 800729a:	4a34      	ldr	r2, [pc, #208]	; (800736c <UART_SetConfig+0x4e4>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a6:	441c      	add	r4, r3
 80072a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ac:	2200      	movs	r2, #0
 80072ae:	673b      	str	r3, [r7, #112]	; 0x70
 80072b0:	677a      	str	r2, [r7, #116]	; 0x74
 80072b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072b6:	4642      	mov	r2, r8
 80072b8:	464b      	mov	r3, r9
 80072ba:	1891      	adds	r1, r2, r2
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	415b      	adcs	r3, r3
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c6:	4641      	mov	r1, r8
 80072c8:	1851      	adds	r1, r2, r1
 80072ca:	6039      	str	r1, [r7, #0]
 80072cc:	4649      	mov	r1, r9
 80072ce:	414b      	adcs	r3, r1
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072de:	4659      	mov	r1, fp
 80072e0:	00cb      	lsls	r3, r1, #3
 80072e2:	4651      	mov	r1, sl
 80072e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e8:	4651      	mov	r1, sl
 80072ea:	00ca      	lsls	r2, r1, #3
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	4603      	mov	r3, r0
 80072f2:	4642      	mov	r2, r8
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f8:	464b      	mov	r3, r9
 80072fa:	460a      	mov	r2, r1
 80072fc:	eb42 0303 	adc.w	r3, r2, r3
 8007300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	663b      	str	r3, [r7, #96]	; 0x60
 800730c:	667a      	str	r2, [r7, #100]	; 0x64
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800731a:	4649      	mov	r1, r9
 800731c:	008b      	lsls	r3, r1, #2
 800731e:	4641      	mov	r1, r8
 8007320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007324:	4641      	mov	r1, r8
 8007326:	008a      	lsls	r2, r1, #2
 8007328:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800732c:	f7f9 fc64 	bl	8000bf8 <__aeabi_uldivmod>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4b0d      	ldr	r3, [pc, #52]	; (800736c <UART_SetConfig+0x4e4>)
 8007336:	fba3 1302 	umull	r1, r3, r3, r2
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2164      	movs	r1, #100	; 0x64
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	3332      	adds	r3, #50	; 0x32
 8007348:	4a08      	ldr	r2, [pc, #32]	; (800736c <UART_SetConfig+0x4e4>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4422      	add	r2, r4
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800736a:	bf00      	nop
 800736c:	51eb851f 	.word	0x51eb851f

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	; (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000024 	.word	0x20000024

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4d0d      	ldr	r5, [pc, #52]	; (80073b4 <__libc_init_array+0x38>)
 8007380:	4c0d      	ldr	r4, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	2600      	movs	r6, #0
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	4d0b      	ldr	r5, [pc, #44]	; (80073bc <__libc_init_array+0x40>)
 800738e:	4c0c      	ldr	r4, [pc, #48]	; (80073c0 <__libc_init_array+0x44>)
 8007390:	f002 ff02 	bl	800a198 <_init>
 8007394:	1b64      	subs	r4, r4, r5
 8007396:	10a4      	asrs	r4, r4, #2
 8007398:	2600      	movs	r6, #0
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	0800a8c4 	.word	0x0800a8c4
 80073b8:	0800a8c4 	.word	0x0800a8c4
 80073bc:	0800a8c4 	.word	0x0800a8c4
 80073c0:	0800a8c8 	.word	0x0800a8c8

080073c4 <memset>:
 80073c4:	4402      	add	r2, r0
 80073c6:	4603      	mov	r3, r0
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d100      	bne.n	80073ce <memset+0xa>
 80073cc:	4770      	bx	lr
 80073ce:	f803 1b01 	strb.w	r1, [r3], #1
 80073d2:	e7f9      	b.n	80073c8 <memset+0x4>

080073d4 <__cvt>:
 80073d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	ec55 4b10 	vmov	r4, r5, d0
 80073dc:	2d00      	cmp	r5, #0
 80073de:	460e      	mov	r6, r1
 80073e0:	4619      	mov	r1, r3
 80073e2:	462b      	mov	r3, r5
 80073e4:	bfbb      	ittet	lt
 80073e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073ea:	461d      	movlt	r5, r3
 80073ec:	2300      	movge	r3, #0
 80073ee:	232d      	movlt	r3, #45	; 0x2d
 80073f0:	700b      	strb	r3, [r1, #0]
 80073f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073f8:	4691      	mov	r9, r2
 80073fa:	f023 0820 	bic.w	r8, r3, #32
 80073fe:	bfbc      	itt	lt
 8007400:	4622      	movlt	r2, r4
 8007402:	4614      	movlt	r4, r2
 8007404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007408:	d005      	beq.n	8007416 <__cvt+0x42>
 800740a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800740e:	d100      	bne.n	8007412 <__cvt+0x3e>
 8007410:	3601      	adds	r6, #1
 8007412:	2102      	movs	r1, #2
 8007414:	e000      	b.n	8007418 <__cvt+0x44>
 8007416:	2103      	movs	r1, #3
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	ab02      	add	r3, sp, #8
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	ec45 4b10 	vmov	d0, r4, r5
 8007424:	4653      	mov	r3, sl
 8007426:	4632      	mov	r2, r6
 8007428:	f000 fcea 	bl	8007e00 <_dtoa_r>
 800742c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007430:	4607      	mov	r7, r0
 8007432:	d102      	bne.n	800743a <__cvt+0x66>
 8007434:	f019 0f01 	tst.w	r9, #1
 8007438:	d022      	beq.n	8007480 <__cvt+0xac>
 800743a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800743e:	eb07 0906 	add.w	r9, r7, r6
 8007442:	d110      	bne.n	8007466 <__cvt+0x92>
 8007444:	783b      	ldrb	r3, [r7, #0]
 8007446:	2b30      	cmp	r3, #48	; 0x30
 8007448:	d10a      	bne.n	8007460 <__cvt+0x8c>
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f9 fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007456:	b918      	cbnz	r0, 8007460 <__cvt+0x8c>
 8007458:	f1c6 0601 	rsb	r6, r6, #1
 800745c:	f8ca 6000 	str.w	r6, [sl]
 8007460:	f8da 3000 	ldr.w	r3, [sl]
 8007464:	4499      	add	r9, r3
 8007466:	2200      	movs	r2, #0
 8007468:	2300      	movs	r3, #0
 800746a:	4620      	mov	r0, r4
 800746c:	4629      	mov	r1, r5
 800746e:	f7f9 fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007472:	b108      	cbz	r0, 8007478 <__cvt+0xa4>
 8007474:	f8cd 900c 	str.w	r9, [sp, #12]
 8007478:	2230      	movs	r2, #48	; 0x30
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	454b      	cmp	r3, r9
 800747e:	d307      	bcc.n	8007490 <__cvt+0xbc>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007484:	1bdb      	subs	r3, r3, r7
 8007486:	4638      	mov	r0, r7
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	b004      	add	sp, #16
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	9103      	str	r1, [sp, #12]
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e7f0      	b.n	800747a <__cvt+0xa6>

08007498 <__exponent>:
 8007498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749a:	4603      	mov	r3, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	bfb8      	it	lt
 80074a0:	4249      	neglt	r1, r1
 80074a2:	f803 2b02 	strb.w	r2, [r3], #2
 80074a6:	bfb4      	ite	lt
 80074a8:	222d      	movlt	r2, #45	; 0x2d
 80074aa:	222b      	movge	r2, #43	; 0x2b
 80074ac:	2909      	cmp	r1, #9
 80074ae:	7042      	strb	r2, [r0, #1]
 80074b0:	dd2a      	ble.n	8007508 <__exponent+0x70>
 80074b2:	f10d 0407 	add.w	r4, sp, #7
 80074b6:	46a4      	mov	ip, r4
 80074b8:	270a      	movs	r7, #10
 80074ba:	46a6      	mov	lr, r4
 80074bc:	460a      	mov	r2, r1
 80074be:	fb91 f6f7 	sdiv	r6, r1, r7
 80074c2:	fb07 1516 	mls	r5, r7, r6, r1
 80074c6:	3530      	adds	r5, #48	; 0x30
 80074c8:	2a63      	cmp	r2, #99	; 0x63
 80074ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80074ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074d2:	4631      	mov	r1, r6
 80074d4:	dcf1      	bgt.n	80074ba <__exponent+0x22>
 80074d6:	3130      	adds	r1, #48	; 0x30
 80074d8:	f1ae 0502 	sub.w	r5, lr, #2
 80074dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074e0:	1c44      	adds	r4, r0, #1
 80074e2:	4629      	mov	r1, r5
 80074e4:	4561      	cmp	r1, ip
 80074e6:	d30a      	bcc.n	80074fe <__exponent+0x66>
 80074e8:	f10d 0209 	add.w	r2, sp, #9
 80074ec:	eba2 020e 	sub.w	r2, r2, lr
 80074f0:	4565      	cmp	r5, ip
 80074f2:	bf88      	it	hi
 80074f4:	2200      	movhi	r2, #0
 80074f6:	4413      	add	r3, r2
 80074f8:	1a18      	subs	r0, r3, r0
 80074fa:	b003      	add	sp, #12
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007502:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007506:	e7ed      	b.n	80074e4 <__exponent+0x4c>
 8007508:	2330      	movs	r3, #48	; 0x30
 800750a:	3130      	adds	r1, #48	; 0x30
 800750c:	7083      	strb	r3, [r0, #2]
 800750e:	70c1      	strb	r1, [r0, #3]
 8007510:	1d03      	adds	r3, r0, #4
 8007512:	e7f1      	b.n	80074f8 <__exponent+0x60>

08007514 <_printf_float>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	ed2d 8b02 	vpush	{d8}
 800751c:	b08d      	sub	sp, #52	; 0x34
 800751e:	460c      	mov	r4, r1
 8007520:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007524:	4616      	mov	r6, r2
 8007526:	461f      	mov	r7, r3
 8007528:	4605      	mov	r5, r0
 800752a:	f001 fa57 	bl	80089dc <_localeconv_r>
 800752e:	f8d0 a000 	ldr.w	sl, [r0]
 8007532:	4650      	mov	r0, sl
 8007534:	f7f8 fe54 	bl	80001e0 <strlen>
 8007538:	2300      	movs	r3, #0
 800753a:	930a      	str	r3, [sp, #40]	; 0x28
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	9305      	str	r3, [sp, #20]
 8007540:	f8d8 3000 	ldr.w	r3, [r8]
 8007544:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007548:	3307      	adds	r3, #7
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	f103 0208 	add.w	r2, r3, #8
 8007552:	f8c8 2000 	str.w	r2, [r8]
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800755e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	f8cd 8018 	str.w	r8, [sp, #24]
 800756c:	ee08 0a10 	vmov	s16, r0
 8007570:	4b9f      	ldr	r3, [pc, #636]	; (80077f0 <_printf_float+0x2dc>)
 8007572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	f7f9 fadf 	bl	8000b3c <__aeabi_dcmpun>
 800757e:	bb88      	cbnz	r0, 80075e4 <_printf_float+0xd0>
 8007580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007584:	4b9a      	ldr	r3, [pc, #616]	; (80077f0 <_printf_float+0x2dc>)
 8007586:	f04f 32ff 	mov.w	r2, #4294967295
 800758a:	f7f9 fab9 	bl	8000b00 <__aeabi_dcmple>
 800758e:	bb48      	cbnz	r0, 80075e4 <_printf_float+0xd0>
 8007590:	2200      	movs	r2, #0
 8007592:	2300      	movs	r3, #0
 8007594:	4640      	mov	r0, r8
 8007596:	4649      	mov	r1, r9
 8007598:	f7f9 faa8 	bl	8000aec <__aeabi_dcmplt>
 800759c:	b110      	cbz	r0, 80075a4 <_printf_float+0x90>
 800759e:	232d      	movs	r3, #45	; 0x2d
 80075a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a4:	4b93      	ldr	r3, [pc, #588]	; (80077f4 <_printf_float+0x2e0>)
 80075a6:	4894      	ldr	r0, [pc, #592]	; (80077f8 <_printf_float+0x2e4>)
 80075a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075ac:	bf94      	ite	ls
 80075ae:	4698      	movls	r8, r3
 80075b0:	4680      	movhi	r8, r0
 80075b2:	2303      	movs	r3, #3
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	9b05      	ldr	r3, [sp, #20]
 80075b8:	f023 0204 	bic.w	r2, r3, #4
 80075bc:	6022      	str	r2, [r4, #0]
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	9700      	str	r7, [sp, #0]
 80075c4:	4633      	mov	r3, r6
 80075c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075c8:	4621      	mov	r1, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f9d8 	bl	8007980 <_printf_common>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f040 8090 	bne.w	80076f6 <_printf_float+0x1e2>
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	b00d      	add	sp, #52	; 0x34
 80075dc:	ecbd 8b02 	vpop	{d8}
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	4642      	mov	r2, r8
 80075e6:	464b      	mov	r3, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	4649      	mov	r1, r9
 80075ec:	f7f9 faa6 	bl	8000b3c <__aeabi_dcmpun>
 80075f0:	b140      	cbz	r0, 8007604 <_printf_float+0xf0>
 80075f2:	464b      	mov	r3, r9
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbc      	itt	lt
 80075f8:	232d      	movlt	r3, #45	; 0x2d
 80075fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075fe:	487f      	ldr	r0, [pc, #508]	; (80077fc <_printf_float+0x2e8>)
 8007600:	4b7f      	ldr	r3, [pc, #508]	; (8007800 <_printf_float+0x2ec>)
 8007602:	e7d1      	b.n	80075a8 <_printf_float+0x94>
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800760a:	9206      	str	r2, [sp, #24]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	d13f      	bne.n	8007690 <_printf_float+0x17c>
 8007610:	2306      	movs	r3, #6
 8007612:	6063      	str	r3, [r4, #4]
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	6861      	ldr	r1, [r4, #4]
 8007618:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800761c:	2300      	movs	r3, #0
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	ab0a      	add	r3, sp, #40	; 0x28
 8007622:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007626:	ab09      	add	r3, sp, #36	; 0x24
 8007628:	ec49 8b10 	vmov	d0, r8, r9
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007634:	4628      	mov	r0, r5
 8007636:	f7ff fecd 	bl	80073d4 <__cvt>
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763e:	2b47      	cmp	r3, #71	; 0x47
 8007640:	4680      	mov	r8, r0
 8007642:	d108      	bne.n	8007656 <_printf_float+0x142>
 8007644:	1cc8      	adds	r0, r1, #3
 8007646:	db02      	blt.n	800764e <_printf_float+0x13a>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	4299      	cmp	r1, r3
 800764c:	dd41      	ble.n	80076d2 <_printf_float+0x1be>
 800764e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007652:	fa5f fb8b 	uxtb.w	fp, fp
 8007656:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800765a:	d820      	bhi.n	800769e <_printf_float+0x18a>
 800765c:	3901      	subs	r1, #1
 800765e:	465a      	mov	r2, fp
 8007660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007664:	9109      	str	r1, [sp, #36]	; 0x24
 8007666:	f7ff ff17 	bl	8007498 <__exponent>
 800766a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766c:	1813      	adds	r3, r2, r0
 800766e:	2a01      	cmp	r2, #1
 8007670:	4681      	mov	r9, r0
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	dc02      	bgt.n	800767c <_printf_float+0x168>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	07d2      	lsls	r2, r2, #31
 800767a:	d501      	bpl.n	8007680 <_printf_float+0x16c>
 800767c:	3301      	adds	r3, #1
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007684:	2b00      	cmp	r3, #0
 8007686:	d09c      	beq.n	80075c2 <_printf_float+0xae>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768e:	e798      	b.n	80075c2 <_printf_float+0xae>
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	2a47      	cmp	r2, #71	; 0x47
 8007694:	d1be      	bne.n	8007614 <_printf_float+0x100>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1bc      	bne.n	8007614 <_printf_float+0x100>
 800769a:	2301      	movs	r3, #1
 800769c:	e7b9      	b.n	8007612 <_printf_float+0xfe>
 800769e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076a2:	d118      	bne.n	80076d6 <_printf_float+0x1c2>
 80076a4:	2900      	cmp	r1, #0
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	dd0b      	ble.n	80076c2 <_printf_float+0x1ae>
 80076aa:	6121      	str	r1, [r4, #16]
 80076ac:	b913      	cbnz	r3, 80076b4 <_printf_float+0x1a0>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d0      	lsls	r0, r2, #31
 80076b2:	d502      	bpl.n	80076ba <_printf_float+0x1a6>
 80076b4:	3301      	adds	r3, #1
 80076b6:	440b      	add	r3, r1
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80076bc:	f04f 0900 	mov.w	r9, #0
 80076c0:	e7de      	b.n	8007680 <_printf_float+0x16c>
 80076c2:	b913      	cbnz	r3, 80076ca <_printf_float+0x1b6>
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	07d2      	lsls	r2, r2, #31
 80076c8:	d501      	bpl.n	80076ce <_printf_float+0x1ba>
 80076ca:	3302      	adds	r3, #2
 80076cc:	e7f4      	b.n	80076b8 <_printf_float+0x1a4>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7f2      	b.n	80076b8 <_printf_float+0x1a4>
 80076d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d8:	4299      	cmp	r1, r3
 80076da:	db05      	blt.n	80076e8 <_printf_float+0x1d4>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	6121      	str	r1, [r4, #16]
 80076e0:	07d8      	lsls	r0, r3, #31
 80076e2:	d5ea      	bpl.n	80076ba <_printf_float+0x1a6>
 80076e4:	1c4b      	adds	r3, r1, #1
 80076e6:	e7e7      	b.n	80076b8 <_printf_float+0x1a4>
 80076e8:	2900      	cmp	r1, #0
 80076ea:	bfd4      	ite	le
 80076ec:	f1c1 0202 	rsble	r2, r1, #2
 80076f0:	2201      	movgt	r2, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	e7e0      	b.n	80076b8 <_printf_float+0x1a4>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	055a      	lsls	r2, r3, #21
 80076fa:	d407      	bmi.n	800770c <_printf_float+0x1f8>
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	4642      	mov	r2, r8
 8007700:	4631      	mov	r1, r6
 8007702:	4628      	mov	r0, r5
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	d12c      	bne.n	8007764 <_printf_float+0x250>
 800770a:	e764      	b.n	80075d6 <_printf_float+0xc2>
 800770c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007710:	f240 80e0 	bls.w	80078d4 <_printf_float+0x3c0>
 8007714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	f7f9 f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007720:	2800      	cmp	r0, #0
 8007722:	d034      	beq.n	800778e <_printf_float+0x27a>
 8007724:	4a37      	ldr	r2, [pc, #220]	; (8007804 <_printf_float+0x2f0>)
 8007726:	2301      	movs	r3, #1
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af51 	beq.w	80075d6 <_printf_float+0xc2>
 8007734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007738:	429a      	cmp	r2, r3
 800773a:	db02      	blt.n	8007742 <_printf_float+0x22e>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07d8      	lsls	r0, r3, #31
 8007740:	d510      	bpl.n	8007764 <_printf_float+0x250>
 8007742:	ee18 3a10 	vmov	r3, s16
 8007746:	4652      	mov	r2, sl
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af41 	beq.w	80075d6 <_printf_float+0xc2>
 8007754:	f04f 0800 	mov.w	r8, #0
 8007758:	f104 091a 	add.w	r9, r4, #26
 800775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775e:	3b01      	subs	r3, #1
 8007760:	4543      	cmp	r3, r8
 8007762:	dc09      	bgt.n	8007778 <_printf_float+0x264>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	079b      	lsls	r3, r3, #30
 8007768:	f100 8105 	bmi.w	8007976 <_printf_float+0x462>
 800776c:	68e0      	ldr	r0, [r4, #12]
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	4298      	cmp	r0, r3
 8007772:	bfb8      	it	lt
 8007774:	4618      	movlt	r0, r3
 8007776:	e730      	b.n	80075da <_printf_float+0xc6>
 8007778:	2301      	movs	r3, #1
 800777a:	464a      	mov	r2, r9
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f af27 	beq.w	80075d6 <_printf_float+0xc2>
 8007788:	f108 0801 	add.w	r8, r8, #1
 800778c:	e7e6      	b.n	800775c <_printf_float+0x248>
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc39      	bgt.n	8007808 <_printf_float+0x2f4>
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <_printf_float+0x2f0>)
 8007796:	2301      	movs	r3, #1
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af19 	beq.w	80075d6 <_printf_float+0xc2>
 80077a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d102      	bne.n	80077b2 <_printf_float+0x29e>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07d9      	lsls	r1, r3, #31
 80077b0:	d5d8      	bpl.n	8007764 <_printf_float+0x250>
 80077b2:	ee18 3a10 	vmov	r3, s16
 80077b6:	4652      	mov	r2, sl
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af09 	beq.w	80075d6 <_printf_float+0xc2>
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	f104 0a1a 	add.w	sl, r4, #26
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	425b      	negs	r3, r3
 80077d0:	454b      	cmp	r3, r9
 80077d2:	dc01      	bgt.n	80077d8 <_printf_float+0x2c4>
 80077d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d6:	e792      	b.n	80076fe <_printf_float+0x1ea>
 80077d8:	2301      	movs	r3, #1
 80077da:	4652      	mov	r2, sl
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	f43f aef7 	beq.w	80075d6 <_printf_float+0xc2>
 80077e8:	f109 0901 	add.w	r9, r9, #1
 80077ec:	e7ee      	b.n	80077cc <_printf_float+0x2b8>
 80077ee:	bf00      	nop
 80077f0:	7fefffff 	.word	0x7fefffff
 80077f4:	0800a4e8 	.word	0x0800a4e8
 80077f8:	0800a4ec 	.word	0x0800a4ec
 80077fc:	0800a4f4 	.word	0x0800a4f4
 8007800:	0800a4f0 	.word	0x0800a4f0
 8007804:	0800a4f8 	.word	0x0800a4f8
 8007808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800780c:	429a      	cmp	r2, r3
 800780e:	bfa8      	it	ge
 8007810:	461a      	movge	r2, r3
 8007812:	2a00      	cmp	r2, #0
 8007814:	4691      	mov	r9, r2
 8007816:	dc37      	bgt.n	8007888 <_printf_float+0x374>
 8007818:	f04f 0b00 	mov.w	fp, #0
 800781c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007820:	f104 021a 	add.w	r2, r4, #26
 8007824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007826:	9305      	str	r3, [sp, #20]
 8007828:	eba3 0309 	sub.w	r3, r3, r9
 800782c:	455b      	cmp	r3, fp
 800782e:	dc33      	bgt.n	8007898 <_printf_float+0x384>
 8007830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007834:	429a      	cmp	r2, r3
 8007836:	db3b      	blt.n	80078b0 <_printf_float+0x39c>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	07da      	lsls	r2, r3, #31
 800783c:	d438      	bmi.n	80078b0 <_printf_float+0x39c>
 800783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007840:	9a05      	ldr	r2, [sp, #20]
 8007842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007844:	1a9a      	subs	r2, r3, r2
 8007846:	eba3 0901 	sub.w	r9, r3, r1
 800784a:	4591      	cmp	r9, r2
 800784c:	bfa8      	it	ge
 800784e:	4691      	movge	r9, r2
 8007850:	f1b9 0f00 	cmp.w	r9, #0
 8007854:	dc35      	bgt.n	80078c2 <_printf_float+0x3ae>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785e:	f104 0a1a 	add.w	sl, r4, #26
 8007862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	eba3 0309 	sub.w	r3, r3, r9
 800786c:	4543      	cmp	r3, r8
 800786e:	f77f af79 	ble.w	8007764 <_printf_float+0x250>
 8007872:	2301      	movs	r3, #1
 8007874:	4652      	mov	r2, sl
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	f43f aeaa 	beq.w	80075d6 <_printf_float+0xc2>
 8007882:	f108 0801 	add.w	r8, r8, #1
 8007886:	e7ec      	b.n	8007862 <_printf_float+0x34e>
 8007888:	4613      	mov	r3, r2
 800788a:	4631      	mov	r1, r6
 800788c:	4642      	mov	r2, r8
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	d1c0      	bne.n	8007818 <_printf_float+0x304>
 8007896:	e69e      	b.n	80075d6 <_printf_float+0xc2>
 8007898:	2301      	movs	r3, #1
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	9205      	str	r2, [sp, #20]
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	f43f ae97 	beq.w	80075d6 <_printf_float+0xc2>
 80078a8:	9a05      	ldr	r2, [sp, #20]
 80078aa:	f10b 0b01 	add.w	fp, fp, #1
 80078ae:	e7b9      	b.n	8007824 <_printf_float+0x310>
 80078b0:	ee18 3a10 	vmov	r3, s16
 80078b4:	4652      	mov	r2, sl
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d1be      	bne.n	800783e <_printf_float+0x32a>
 80078c0:	e689      	b.n	80075d6 <_printf_float+0xc2>
 80078c2:	9a05      	ldr	r2, [sp, #20]
 80078c4:	464b      	mov	r3, r9
 80078c6:	4442      	add	r2, r8
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	d1c1      	bne.n	8007856 <_printf_float+0x342>
 80078d2:	e680      	b.n	80075d6 <_printf_float+0xc2>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d6:	2a01      	cmp	r2, #1
 80078d8:	dc01      	bgt.n	80078de <_printf_float+0x3ca>
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	d538      	bpl.n	8007950 <_printf_float+0x43c>
 80078de:	2301      	movs	r3, #1
 80078e0:	4642      	mov	r2, r8
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f ae74 	beq.w	80075d6 <_printf_float+0xc2>
 80078ee:	ee18 3a10 	vmov	r3, s16
 80078f2:	4652      	mov	r2, sl
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f ae6b 	beq.w	80075d6 <_printf_float+0xc2>
 8007900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	f7f9 f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800790c:	b9d8      	cbnz	r0, 8007946 <_printf_float+0x432>
 800790e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007910:	f108 0201 	add.w	r2, r8, #1
 8007914:	3b01      	subs	r3, #1
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d10e      	bne.n	800793e <_printf_float+0x42a>
 8007920:	e659      	b.n	80075d6 <_printf_float+0xc2>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f ae52 	beq.w	80075d6 <_printf_float+0xc2>
 8007932:	f108 0801 	add.w	r8, r8, #1
 8007936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007938:	3b01      	subs	r3, #1
 800793a:	4543      	cmp	r3, r8
 800793c:	dcf1      	bgt.n	8007922 <_printf_float+0x40e>
 800793e:	464b      	mov	r3, r9
 8007940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007944:	e6dc      	b.n	8007700 <_printf_float+0x1ec>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	f104 0a1a 	add.w	sl, r4, #26
 800794e:	e7f2      	b.n	8007936 <_printf_float+0x422>
 8007950:	2301      	movs	r3, #1
 8007952:	4642      	mov	r2, r8
 8007954:	e7df      	b.n	8007916 <_printf_float+0x402>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae38 	beq.w	80075d6 <_printf_float+0xc2>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800796e:	1a5b      	subs	r3, r3, r1
 8007970:	4543      	cmp	r3, r8
 8007972:	dcf0      	bgt.n	8007956 <_printf_float+0x442>
 8007974:	e6fa      	b.n	800776c <_printf_float+0x258>
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	f104 0919 	add.w	r9, r4, #25
 800797e:	e7f4      	b.n	800796a <_printf_float+0x456>

08007980 <_printf_common>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	4616      	mov	r6, r2
 8007986:	4699      	mov	r9, r3
 8007988:	688a      	ldr	r2, [r1, #8]
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007990:	4293      	cmp	r3, r2
 8007992:	bfb8      	it	lt
 8007994:	4613      	movlt	r3, r2
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800799c:	4607      	mov	r7, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b10a      	cbz	r2, 80079a6 <_printf_common+0x26>
 80079a2:	3301      	adds	r3, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	0699      	lsls	r1, r3, #26
 80079aa:	bf42      	ittt	mi
 80079ac:	6833      	ldrmi	r3, [r6, #0]
 80079ae:	3302      	addmi	r3, #2
 80079b0:	6033      	strmi	r3, [r6, #0]
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	f015 0506 	ands.w	r5, r5, #6
 80079b8:	d106      	bne.n	80079c8 <_printf_common+0x48>
 80079ba:	f104 0a19 	add.w	sl, r4, #25
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	6832      	ldr	r2, [r6, #0]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dc26      	bgt.n	8007a16 <_printf_common+0x96>
 80079c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079cc:	1e13      	subs	r3, r2, #0
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	bf18      	it	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	0692      	lsls	r2, r2, #26
 80079d6:	d42b      	bmi.n	8007a30 <_printf_common+0xb0>
 80079d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079dc:	4649      	mov	r1, r9
 80079de:	4638      	mov	r0, r7
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d01e      	beq.n	8007a24 <_printf_common+0xa4>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	68e5      	ldr	r5, [r4, #12]
 80079ea:	6832      	ldr	r2, [r6, #0]
 80079ec:	f003 0306 	and.w	r3, r3, #6
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	bf08      	it	eq
 80079f4:	1aad      	subeq	r5, r5, r2
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	bf0c      	ite	eq
 80079fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a00:	2500      	movne	r5, #0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfc4      	itt	gt
 8007a06:	1a9b      	subgt	r3, r3, r2
 8007a08:	18ed      	addgt	r5, r5, r3
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	341a      	adds	r4, #26
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	d11a      	bne.n	8007a48 <_printf_common+0xc8>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e008      	b.n	8007a28 <_printf_common+0xa8>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	47c0      	blx	r8
 8007a20:	3001      	adds	r0, #1
 8007a22:	d103      	bne.n	8007a2c <_printf_common+0xac>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7c6      	b.n	80079be <_printf_common+0x3e>
 8007a30:	18e1      	adds	r1, r4, r3
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	2030      	movs	r0, #48	; 0x30
 8007a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3a:	4422      	add	r2, r4
 8007a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a44:	3302      	adds	r3, #2
 8007a46:	e7c7      	b.n	80079d8 <_printf_common+0x58>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c0      	blx	r8
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0e6      	beq.n	8007a24 <_printf_common+0xa4>
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7d9      	b.n	8007a0e <_printf_common+0x8e>
	...

08007a5c <_printf_i>:
 8007a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	7e0f      	ldrb	r7, [r1, #24]
 8007a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a64:	2f78      	cmp	r7, #120	; 0x78
 8007a66:	4691      	mov	r9, r2
 8007a68:	4680      	mov	r8, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	469a      	mov	sl, r3
 8007a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a72:	d807      	bhi.n	8007a84 <_printf_i+0x28>
 8007a74:	2f62      	cmp	r7, #98	; 0x62
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x32>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	f000 80d8 	beq.w	8007c2e <_printf_i+0x1d2>
 8007a7e:	2f58      	cmp	r7, #88	; 0x58
 8007a80:	f000 80a3 	beq.w	8007bca <_printf_i+0x16e>
 8007a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a8c:	e03a      	b.n	8007b04 <_printf_i+0xa8>
 8007a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a92:	2b15      	cmp	r3, #21
 8007a94:	d8f6      	bhi.n	8007a84 <_printf_i+0x28>
 8007a96:	a101      	add	r1, pc, #4	; (adr r1, 8007a9c <_printf_i+0x40>)
 8007a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007a85 	.word	0x08007a85
 8007aa8:	08007a85 	.word	0x08007a85
 8007aac:	08007a85 	.word	0x08007a85
 8007ab0:	08007a85 	.word	0x08007a85
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007a85 	.word	0x08007a85
 8007abc:	08007a85 	.word	0x08007a85
 8007ac0:	08007a85 	.word	0x08007a85
 8007ac4:	08007a85 	.word	0x08007a85
 8007ac8:	08007c15 	.word	0x08007c15
 8007acc:	08007b39 	.word	0x08007b39
 8007ad0:	08007bf7 	.word	0x08007bf7
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	08007a85 	.word	0x08007a85
 8007adc:	08007c37 	.word	0x08007c37
 8007ae0:	08007a85 	.word	0x08007a85
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007a85 	.word	0x08007a85
 8007aec:	08007a85 	.word	0x08007a85
 8007af0:	08007bff 	.word	0x08007bff
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	602a      	str	r2, [r5, #0]
 8007afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0a3      	b.n	8007c50 <_printf_i+0x1f4>
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	6829      	ldr	r1, [r5, #0]
 8007b0c:	0606      	lsls	r6, r0, #24
 8007b0e:	f101 0304 	add.w	r3, r1, #4
 8007b12:	d50a      	bpl.n	8007b2a <_printf_i+0xce>
 8007b14:	680e      	ldr	r6, [r1, #0]
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	2e00      	cmp	r6, #0
 8007b1a:	da03      	bge.n	8007b24 <_printf_i+0xc8>
 8007b1c:	232d      	movs	r3, #45	; 0x2d
 8007b1e:	4276      	negs	r6, r6
 8007b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b24:	485e      	ldr	r0, [pc, #376]	; (8007ca0 <_printf_i+0x244>)
 8007b26:	230a      	movs	r3, #10
 8007b28:	e019      	b.n	8007b5e <_printf_i+0x102>
 8007b2a:	680e      	ldr	r6, [r1, #0]
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b32:	bf18      	it	ne
 8007b34:	b236      	sxthne	r6, r6
 8007b36:	e7ef      	b.n	8007b18 <_printf_i+0xbc>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	1d19      	adds	r1, r3, #4
 8007b3e:	6029      	str	r1, [r5, #0]
 8007b40:	0601      	lsls	r1, r0, #24
 8007b42:	d501      	bpl.n	8007b48 <_printf_i+0xec>
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	e002      	b.n	8007b4e <_printf_i+0xf2>
 8007b48:	0646      	lsls	r6, r0, #25
 8007b4a:	d5fb      	bpl.n	8007b44 <_printf_i+0xe8>
 8007b4c:	881e      	ldrh	r6, [r3, #0]
 8007b4e:	4854      	ldr	r0, [pc, #336]	; (8007ca0 <_printf_i+0x244>)
 8007b50:	2f6f      	cmp	r7, #111	; 0x6f
 8007b52:	bf0c      	ite	eq
 8007b54:	2308      	moveq	r3, #8
 8007b56:	230a      	movne	r3, #10
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5e:	6865      	ldr	r5, [r4, #4]
 8007b60:	60a5      	str	r5, [r4, #8]
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	bfa2      	ittt	ge
 8007b66:	6821      	ldrge	r1, [r4, #0]
 8007b68:	f021 0104 	bicge.w	r1, r1, #4
 8007b6c:	6021      	strge	r1, [r4, #0]
 8007b6e:	b90e      	cbnz	r6, 8007b74 <_printf_i+0x118>
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	d04d      	beq.n	8007c10 <_printf_i+0x1b4>
 8007b74:	4615      	mov	r5, r2
 8007b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b7e:	5dc7      	ldrb	r7, [r0, r7]
 8007b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b84:	4637      	mov	r7, r6
 8007b86:	42bb      	cmp	r3, r7
 8007b88:	460e      	mov	r6, r1
 8007b8a:	d9f4      	bls.n	8007b76 <_printf_i+0x11a>
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d10b      	bne.n	8007ba8 <_printf_i+0x14c>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	07de      	lsls	r6, r3, #31
 8007b94:	d508      	bpl.n	8007ba8 <_printf_i+0x14c>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	bfde      	ittt	le
 8007b9e:	2330      	movle	r3, #48	; 0x30
 8007ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ba8:	1b52      	subs	r2, r2, r5
 8007baa:	6122      	str	r2, [r4, #16]
 8007bac:	f8cd a000 	str.w	sl, [sp]
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	aa03      	add	r2, sp, #12
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fee2 	bl	8007980 <_printf_common>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d14c      	bne.n	8007c5a <_printf_i+0x1fe>
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	b004      	add	sp, #16
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	4835      	ldr	r0, [pc, #212]	; (8007ca0 <_printf_i+0x244>)
 8007bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bd0:	6829      	ldr	r1, [r5, #0]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bd8:	6029      	str	r1, [r5, #0]
 8007bda:	061d      	lsls	r5, r3, #24
 8007bdc:	d514      	bpl.n	8007c08 <_printf_i+0x1ac>
 8007bde:	07df      	lsls	r7, r3, #31
 8007be0:	bf44      	itt	mi
 8007be2:	f043 0320 	orrmi.w	r3, r3, #32
 8007be6:	6023      	strmi	r3, [r4, #0]
 8007be8:	b91e      	cbnz	r6, 8007bf2 <_printf_i+0x196>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f023 0320 	bic.w	r3, r3, #32
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	e7b0      	b.n	8007b58 <_printf_i+0xfc>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	f043 0320 	orr.w	r3, r3, #32
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	2378      	movs	r3, #120	; 0x78
 8007c00:	4828      	ldr	r0, [pc, #160]	; (8007ca4 <_printf_i+0x248>)
 8007c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c06:	e7e3      	b.n	8007bd0 <_printf_i+0x174>
 8007c08:	0659      	lsls	r1, r3, #25
 8007c0a:	bf48      	it	mi
 8007c0c:	b2b6      	uxthmi	r6, r6
 8007c0e:	e7e6      	b.n	8007bde <_printf_i+0x182>
 8007c10:	4615      	mov	r5, r2
 8007c12:	e7bb      	b.n	8007b8c <_printf_i+0x130>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	6826      	ldr	r6, [r4, #0]
 8007c18:	6961      	ldr	r1, [r4, #20]
 8007c1a:	1d18      	adds	r0, r3, #4
 8007c1c:	6028      	str	r0, [r5, #0]
 8007c1e:	0635      	lsls	r5, r6, #24
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0x1cc>
 8007c24:	6019      	str	r1, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <_printf_i+0x1d2>
 8007c28:	0670      	lsls	r0, r6, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0x1c8>
 8007c2c:	8019      	strh	r1, [r3, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	4615      	mov	r5, r2
 8007c34:	e7ba      	b.n	8007bac <_printf_i+0x150>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	602a      	str	r2, [r5, #0]
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	2100      	movs	r1, #0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7f8 fad4 	bl	80001f0 <memchr>
 8007c48:	b108      	cbz	r0, 8007c4e <_printf_i+0x1f2>
 8007c4a:	1b40      	subs	r0, r0, r5
 8007c4c:	6060      	str	r0, [r4, #4]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	2300      	movs	r3, #0
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	e7a8      	b.n	8007bac <_printf_i+0x150>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	47d0      	blx	sl
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0ab      	beq.n	8007bc0 <_printf_i+0x164>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d413      	bmi.n	8007c96 <_printf_i+0x23a>
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	4298      	cmp	r0, r3
 8007c74:	bfb8      	it	lt
 8007c76:	4618      	movlt	r0, r3
 8007c78:	e7a4      	b.n	8007bc4 <_printf_i+0x168>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	47d0      	blx	sl
 8007c84:	3001      	adds	r0, #1
 8007c86:	d09b      	beq.n	8007bc0 <_printf_i+0x164>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	9903      	ldr	r1, [sp, #12]
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	dcf2      	bgt.n	8007c7a <_printf_i+0x21e>
 8007c94:	e7eb      	b.n	8007c6e <_printf_i+0x212>
 8007c96:	2500      	movs	r5, #0
 8007c98:	f104 0619 	add.w	r6, r4, #25
 8007c9c:	e7f5      	b.n	8007c8a <_printf_i+0x22e>
 8007c9e:	bf00      	nop
 8007ca0:	0800a4fa 	.word	0x0800a4fa
 8007ca4:	0800a50b 	.word	0x0800a50b

08007ca8 <siprintf>:
 8007ca8:	b40e      	push	{r1, r2, r3}
 8007caa:	b500      	push	{lr}
 8007cac:	b09c      	sub	sp, #112	; 0x70
 8007cae:	ab1d      	add	r3, sp, #116	; 0x74
 8007cb0:	9002      	str	r0, [sp, #8]
 8007cb2:	9006      	str	r0, [sp, #24]
 8007cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cb8:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <siprintf+0x38>)
 8007cba:	9107      	str	r1, [sp, #28]
 8007cbc:	9104      	str	r1, [sp, #16]
 8007cbe:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <siprintf+0x3c>)
 8007cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	6800      	ldr	r0, [r0, #0]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	a902      	add	r1, sp, #8
 8007ccc:	f001 fb76 	bl	80093bc <_svfiprintf_r>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	b01c      	add	sp, #112	; 0x70
 8007cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cdc:	b003      	add	sp, #12
 8007cde:	4770      	bx	lr
 8007ce0:	20000024 	.word	0x20000024
 8007ce4:	ffff0208 	.word	0xffff0208

08007ce8 <quorem>:
 8007ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	6903      	ldr	r3, [r0, #16]
 8007cee:	690c      	ldr	r4, [r1, #16]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	f2c0 8081 	blt.w	8007dfa <quorem+0x112>
 8007cf8:	3c01      	subs	r4, #1
 8007cfa:	f101 0814 	add.w	r8, r1, #20
 8007cfe:	f100 0514 	add.w	r5, r0, #20
 8007d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d10:	3301      	adds	r3, #1
 8007d12:	429a      	cmp	r2, r3
 8007d14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d20:	d331      	bcc.n	8007d86 <quorem+0x9e>
 8007d22:	f04f 0e00 	mov.w	lr, #0
 8007d26:	4640      	mov	r0, r8
 8007d28:	46ac      	mov	ip, r5
 8007d2a:	46f2      	mov	sl, lr
 8007d2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d30:	b293      	uxth	r3, r2
 8007d32:	fb06 e303 	mla	r3, r6, r3, lr
 8007d36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d40:	f8dc a000 	ldr.w	sl, [ip]
 8007d44:	0c12      	lsrs	r2, r2, #16
 8007d46:	fa13 f38a 	uxtah	r3, r3, sl
 8007d4a:	fb06 e202 	mla	r2, r6, r2, lr
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	9b00      	ldr	r3, [sp, #0]
 8007d52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d56:	b292      	uxth	r2, r2
 8007d58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d60:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d64:	4581      	cmp	r9, r0
 8007d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d72:	d2db      	bcs.n	8007d2c <quorem+0x44>
 8007d74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d78:	b92b      	cbnz	r3, 8007d86 <quorem+0x9e>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	d32e      	bcc.n	8007de2 <quorem+0xfa>
 8007d84:	613c      	str	r4, [r7, #16]
 8007d86:	4638      	mov	r0, r7
 8007d88:	f001 f8c4 	bl	8008f14 <__mcmp>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	db24      	blt.n	8007dda <quorem+0xf2>
 8007d90:	3601      	adds	r6, #1
 8007d92:	4628      	mov	r0, r5
 8007d94:	f04f 0c00 	mov.w	ip, #0
 8007d98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007da0:	b293      	uxth	r3, r2
 8007da2:	ebac 0303 	sub.w	r3, ip, r3
 8007da6:	0c12      	lsrs	r2, r2, #16
 8007da8:	fa13 f38e 	uxtah	r3, r3, lr
 8007dac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dba:	45c1      	cmp	r9, r8
 8007dbc:	f840 3b04 	str.w	r3, [r0], #4
 8007dc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dc4:	d2e8      	bcs.n	8007d98 <quorem+0xb0>
 8007dc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dce:	b922      	cbnz	r2, 8007dda <quorem+0xf2>
 8007dd0:	3b04      	subs	r3, #4
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	d30a      	bcc.n	8007dee <quorem+0x106>
 8007dd8:	613c      	str	r4, [r7, #16]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	b003      	add	sp, #12
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d1cc      	bne.n	8007d84 <quorem+0x9c>
 8007dea:	3c01      	subs	r4, #1
 8007dec:	e7c7      	b.n	8007d7e <quorem+0x96>
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	d1f0      	bne.n	8007dd8 <quorem+0xf0>
 8007df6:	3c01      	subs	r4, #1
 8007df8:	e7eb      	b.n	8007dd2 <quorem+0xea>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7ee      	b.n	8007ddc <quorem+0xf4>
	...

08007e00 <_dtoa_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	ed2d 8b04 	vpush	{d8-d9}
 8007e08:	ec57 6b10 	vmov	r6, r7, d0
 8007e0c:	b093      	sub	sp, #76	; 0x4c
 8007e0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e14:	9106      	str	r1, [sp, #24]
 8007e16:	ee10 aa10 	vmov	sl, s0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e20:	46bb      	mov	fp, r7
 8007e22:	b975      	cbnz	r5, 8007e42 <_dtoa_r+0x42>
 8007e24:	2010      	movs	r0, #16
 8007e26:	f000 fddd 	bl	80089e4 <malloc>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e2e:	b920      	cbnz	r0, 8007e3a <_dtoa_r+0x3a>
 8007e30:	4ba7      	ldr	r3, [pc, #668]	; (80080d0 <_dtoa_r+0x2d0>)
 8007e32:	21ea      	movs	r1, #234	; 0xea
 8007e34:	48a7      	ldr	r0, [pc, #668]	; (80080d4 <_dtoa_r+0x2d4>)
 8007e36:	f001 fbd1 	bl	80095dc <__assert_func>
 8007e3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e3e:	6005      	str	r5, [r0, #0]
 8007e40:	60c5      	str	r5, [r0, #12]
 8007e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e44:	6819      	ldr	r1, [r3, #0]
 8007e46:	b151      	cbz	r1, 8007e5e <_dtoa_r+0x5e>
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	604a      	str	r2, [r1, #4]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4093      	lsls	r3, r2
 8007e50:	608b      	str	r3, [r1, #8]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fe1c 	bl	8008a90 <_Bfree>
 8007e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	1e3b      	subs	r3, r7, #0
 8007e60:	bfaa      	itet	ge
 8007e62:	2300      	movge	r3, #0
 8007e64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e68:	f8c8 3000 	strge.w	r3, [r8]
 8007e6c:	4b9a      	ldr	r3, [pc, #616]	; (80080d8 <_dtoa_r+0x2d8>)
 8007e6e:	bfbc      	itt	lt
 8007e70:	2201      	movlt	r2, #1
 8007e72:	f8c8 2000 	strlt.w	r2, [r8]
 8007e76:	ea33 030b 	bics.w	r3, r3, fp
 8007e7a:	d11b      	bne.n	8007eb4 <_dtoa_r+0xb4>
 8007e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e88:	4333      	orrs	r3, r6
 8007e8a:	f000 8592 	beq.w	80089b2 <_dtoa_r+0xbb2>
 8007e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e90:	b963      	cbnz	r3, 8007eac <_dtoa_r+0xac>
 8007e92:	4b92      	ldr	r3, [pc, #584]	; (80080dc <_dtoa_r+0x2dc>)
 8007e94:	e022      	b.n	8007edc <_dtoa_r+0xdc>
 8007e96:	4b92      	ldr	r3, [pc, #584]	; (80080e0 <_dtoa_r+0x2e0>)
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	9801      	ldr	r0, [sp, #4]
 8007ea2:	b013      	add	sp, #76	; 0x4c
 8007ea4:	ecbd 8b04 	vpop	{d8-d9}
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	4b8b      	ldr	r3, [pc, #556]	; (80080dc <_dtoa_r+0x2dc>)
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	3303      	adds	r3, #3
 8007eb2:	e7f3      	b.n	8007e9c <_dtoa_r+0x9c>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4650      	mov	r0, sl
 8007eba:	4659      	mov	r1, fp
 8007ebc:	f7f8 fe0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec0:	ec4b ab19 	vmov	d9, sl, fp
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	b158      	cbz	r0, 8007ee0 <_dtoa_r+0xe0>
 8007ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eca:	2301      	movs	r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 856b 	beq.w	80089ac <_dtoa_r+0xbac>
 8007ed6:	4883      	ldr	r0, [pc, #524]	; (80080e4 <_dtoa_r+0x2e4>)
 8007ed8:	6018      	str	r0, [r3, #0]
 8007eda:	1e43      	subs	r3, r0, #1
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	e7df      	b.n	8007ea0 <_dtoa_r+0xa0>
 8007ee0:	ec4b ab10 	vmov	d0, sl, fp
 8007ee4:	aa10      	add	r2, sp, #64	; 0x40
 8007ee6:	a911      	add	r1, sp, #68	; 0x44
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f001 f8b9 	bl	8009060 <__d2b>
 8007eee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007ef2:	ee08 0a10 	vmov	s16, r0
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	f000 8084 	beq.w	8008004 <_dtoa_r+0x204>
 8007efc:	ee19 3a90 	vmov	r3, s19
 8007f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f08:	4656      	mov	r6, sl
 8007f0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f16:	4b74      	ldr	r3, [pc, #464]	; (80080e8 <_dtoa_r+0x2e8>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	f7f8 f9bb 	bl	8000298 <__aeabi_dsub>
 8007f22:	a365      	add	r3, pc, #404	; (adr r3, 80080b8 <_dtoa_r+0x2b8>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	a364      	add	r3, pc, #400	; (adr r3, 80080c0 <_dtoa_r+0x2c0>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	4606      	mov	r6, r0
 8007f38:	4628      	mov	r0, r5
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	f7f8 fafa 	bl	8000534 <__aeabi_i2d>
 8007f40:	a361      	add	r3, pc, #388	; (adr r3, 80080c8 <_dtoa_r+0x2c8>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 fb5f 	bl	8000608 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 f9a3 	bl	800029c <__adddf3>
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	f7f8 fe05 	bl	8000b68 <__aeabi_d2iz>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	9000      	str	r0, [sp, #0]
 8007f62:	2300      	movs	r3, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8007f6c:	b150      	cbz	r0, 8007f84 <_dtoa_r+0x184>
 8007f6e:	9800      	ldr	r0, [sp, #0]
 8007f70:	f7f8 fae0 	bl	8000534 <__aeabi_i2d>
 8007f74:	4632      	mov	r2, r6
 8007f76:	463b      	mov	r3, r7
 8007f78:	f7f8 fdae 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7c:	b910      	cbnz	r0, 8007f84 <_dtoa_r+0x184>
 8007f7e:	9b00      	ldr	r3, [sp, #0]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	2b16      	cmp	r3, #22
 8007f88:	d85a      	bhi.n	8008040 <_dtoa_r+0x240>
 8007f8a:	9a00      	ldr	r2, [sp, #0]
 8007f8c:	4b57      	ldr	r3, [pc, #348]	; (80080ec <_dtoa_r+0x2ec>)
 8007f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	ec51 0b19 	vmov	r0, r1, d9
 8007f9a:	f7f8 fda7 	bl	8000aec <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d050      	beq.n	8008044 <_dtoa_r+0x244>
 8007fa2:	9b00      	ldr	r3, [sp, #0]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fae:	1b5d      	subs	r5, r3, r5
 8007fb0:	1e6b      	subs	r3, r5, #1
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	bf45      	ittet	mi
 8007fb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fba:	9304      	strmi	r3, [sp, #16]
 8007fbc:	2300      	movpl	r3, #0
 8007fbe:	2300      	movmi	r3, #0
 8007fc0:	bf4c      	ite	mi
 8007fc2:	9305      	strmi	r3, [sp, #20]
 8007fc4:	9304      	strpl	r3, [sp, #16]
 8007fc6:	9b00      	ldr	r3, [sp, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	db3d      	blt.n	8008048 <_dtoa_r+0x248>
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	9a00      	ldr	r2, [sp, #0]
 8007fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8007fd2:	4413      	add	r3, r2
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9307      	str	r3, [sp, #28]
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	f200 8089 	bhi.w	80080f4 <_dtoa_r+0x2f4>
 8007fe2:	2b05      	cmp	r3, #5
 8007fe4:	bfc4      	itt	gt
 8007fe6:	3b04      	subgt	r3, #4
 8007fe8:	9306      	strgt	r3, [sp, #24]
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	f1a3 0302 	sub.w	r3, r3, #2
 8007ff0:	bfcc      	ite	gt
 8007ff2:	2500      	movgt	r5, #0
 8007ff4:	2501      	movle	r5, #1
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f200 8087 	bhi.w	800810a <_dtoa_r+0x30a>
 8007ffc:	e8df f003 	tbb	[pc, r3]
 8008000:	59383a2d 	.word	0x59383a2d
 8008004:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008008:	441d      	add	r5, r3
 800800a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800800e:	2b20      	cmp	r3, #32
 8008010:	bfc1      	itttt	gt
 8008012:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008016:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800801a:	fa0b f303 	lslgt.w	r3, fp, r3
 800801e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008022:	bfda      	itte	le
 8008024:	f1c3 0320 	rsble	r3, r3, #32
 8008028:	fa06 f003 	lslle.w	r0, r6, r3
 800802c:	4318      	orrgt	r0, r3
 800802e:	f7f8 fa71 	bl	8000514 <__aeabi_ui2d>
 8008032:	2301      	movs	r3, #1
 8008034:	4606      	mov	r6, r0
 8008036:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800803a:	3d01      	subs	r5, #1
 800803c:	930e      	str	r3, [sp, #56]	; 0x38
 800803e:	e76a      	b.n	8007f16 <_dtoa_r+0x116>
 8008040:	2301      	movs	r3, #1
 8008042:	e7b2      	b.n	8007faa <_dtoa_r+0x1aa>
 8008044:	900b      	str	r0, [sp, #44]	; 0x2c
 8008046:	e7b1      	b.n	8007fac <_dtoa_r+0x1ac>
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	9a00      	ldr	r2, [sp, #0]
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	4253      	negs	r3, r2
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	2300      	movs	r3, #0
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	e7bf      	b.n	8007fda <_dtoa_r+0x1da>
 800805a:	2300      	movs	r3, #0
 800805c:	9308      	str	r3, [sp, #32]
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	dc55      	bgt.n	8008110 <_dtoa_r+0x310>
 8008064:	2301      	movs	r3, #1
 8008066:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800806a:	461a      	mov	r2, r3
 800806c:	9209      	str	r2, [sp, #36]	; 0x24
 800806e:	e00c      	b.n	800808a <_dtoa_r+0x28a>
 8008070:	2301      	movs	r3, #1
 8008072:	e7f3      	b.n	800805c <_dtoa_r+0x25c>
 8008074:	2300      	movs	r3, #0
 8008076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008078:	9308      	str	r3, [sp, #32]
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	4413      	add	r3, r2
 800807e:	9302      	str	r3, [sp, #8]
 8008080:	3301      	adds	r3, #1
 8008082:	2b01      	cmp	r3, #1
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	bfb8      	it	lt
 8008088:	2301      	movlt	r3, #1
 800808a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800808c:	2200      	movs	r2, #0
 800808e:	6042      	str	r2, [r0, #4]
 8008090:	2204      	movs	r2, #4
 8008092:	f102 0614 	add.w	r6, r2, #20
 8008096:	429e      	cmp	r6, r3
 8008098:	6841      	ldr	r1, [r0, #4]
 800809a:	d93d      	bls.n	8008118 <_dtoa_r+0x318>
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fcb7 	bl	8008a10 <_Balloc>
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d13b      	bne.n	8008120 <_dtoa_r+0x320>
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <_dtoa_r+0x2f0>)
 80080aa:	4602      	mov	r2, r0
 80080ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080b0:	e6c0      	b.n	8007e34 <_dtoa_r+0x34>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7df      	b.n	8008076 <_dtoa_r+0x276>
 80080b6:	bf00      	nop
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	0800a529 	.word	0x0800a529
 80080d4:	0800a540 	.word	0x0800a540
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	0800a525 	.word	0x0800a525
 80080e0:	0800a51c 	.word	0x0800a51c
 80080e4:	0800a4f9 	.word	0x0800a4f9
 80080e8:	3ff80000 	.word	0x3ff80000
 80080ec:	0800a630 	.word	0x0800a630
 80080f0:	0800a59b 	.word	0x0800a59b
 80080f4:	2501      	movs	r5, #1
 80080f6:	2300      	movs	r3, #0
 80080f8:	9306      	str	r3, [sp, #24]
 80080fa:	9508      	str	r5, [sp, #32]
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008100:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	2312      	movs	r3, #18
 8008108:	e7b0      	b.n	800806c <_dtoa_r+0x26c>
 800810a:	2301      	movs	r3, #1
 800810c:	9308      	str	r3, [sp, #32]
 800810e:	e7f5      	b.n	80080fc <_dtoa_r+0x2fc>
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008112:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008116:	e7b8      	b.n	800808a <_dtoa_r+0x28a>
 8008118:	3101      	adds	r1, #1
 800811a:	6041      	str	r1, [r0, #4]
 800811c:	0052      	lsls	r2, r2, #1
 800811e:	e7b8      	b.n	8008092 <_dtoa_r+0x292>
 8008120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008122:	9a01      	ldr	r2, [sp, #4]
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	2b0e      	cmp	r3, #14
 800812a:	f200 809d 	bhi.w	8008268 <_dtoa_r+0x468>
 800812e:	2d00      	cmp	r5, #0
 8008130:	f000 809a 	beq.w	8008268 <_dtoa_r+0x468>
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	dd32      	ble.n	80081a0 <_dtoa_r+0x3a0>
 800813a:	4ab7      	ldr	r2, [pc, #732]	; (8008418 <_dtoa_r+0x618>)
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	05d8      	lsls	r0, r3, #23
 800814c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008150:	d516      	bpl.n	8008180 <_dtoa_r+0x380>
 8008152:	4bb2      	ldr	r3, [pc, #712]	; (800841c <_dtoa_r+0x61c>)
 8008154:	ec51 0b19 	vmov	r0, r1, d9
 8008158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800815c:	f7f8 fb7e 	bl	800085c <__aeabi_ddiv>
 8008160:	f007 070f 	and.w	r7, r7, #15
 8008164:	4682      	mov	sl, r0
 8008166:	468b      	mov	fp, r1
 8008168:	2503      	movs	r5, #3
 800816a:	4eac      	ldr	r6, [pc, #688]	; (800841c <_dtoa_r+0x61c>)
 800816c:	b957      	cbnz	r7, 8008184 <_dtoa_r+0x384>
 800816e:	4642      	mov	r2, r8
 8008170:	464b      	mov	r3, r9
 8008172:	4650      	mov	r0, sl
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 fb71 	bl	800085c <__aeabi_ddiv>
 800817a:	4682      	mov	sl, r0
 800817c:	468b      	mov	fp, r1
 800817e:	e028      	b.n	80081d2 <_dtoa_r+0x3d2>
 8008180:	2502      	movs	r5, #2
 8008182:	e7f2      	b.n	800816a <_dtoa_r+0x36a>
 8008184:	07f9      	lsls	r1, r7, #31
 8008186:	d508      	bpl.n	800819a <_dtoa_r+0x39a>
 8008188:	4640      	mov	r0, r8
 800818a:	4649      	mov	r1, r9
 800818c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008190:	f7f8 fa3a 	bl	8000608 <__aeabi_dmul>
 8008194:	3501      	adds	r5, #1
 8008196:	4680      	mov	r8, r0
 8008198:	4689      	mov	r9, r1
 800819a:	107f      	asrs	r7, r7, #1
 800819c:	3608      	adds	r6, #8
 800819e:	e7e5      	b.n	800816c <_dtoa_r+0x36c>
 80081a0:	f000 809b 	beq.w	80082da <_dtoa_r+0x4da>
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	4f9d      	ldr	r7, [pc, #628]	; (800841c <_dtoa_r+0x61c>)
 80081a8:	425e      	negs	r6, r3
 80081aa:	4b9b      	ldr	r3, [pc, #620]	; (8008418 <_dtoa_r+0x618>)
 80081ac:	f006 020f 	and.w	r2, r6, #15
 80081b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	ec51 0b19 	vmov	r0, r1, d9
 80081bc:	f7f8 fa24 	bl	8000608 <__aeabi_dmul>
 80081c0:	1136      	asrs	r6, r6, #4
 80081c2:	4682      	mov	sl, r0
 80081c4:	468b      	mov	fp, r1
 80081c6:	2300      	movs	r3, #0
 80081c8:	2502      	movs	r5, #2
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d17a      	bne.n	80082c4 <_dtoa_r+0x4c4>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1d3      	bne.n	800817a <_dtoa_r+0x37a>
 80081d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8082 	beq.w	80082de <_dtoa_r+0x4de>
 80081da:	4b91      	ldr	r3, [pc, #580]	; (8008420 <_dtoa_r+0x620>)
 80081dc:	2200      	movs	r2, #0
 80081de:	4650      	mov	r0, sl
 80081e0:	4659      	mov	r1, fp
 80081e2:	f7f8 fc83 	bl	8000aec <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d079      	beq.n	80082de <_dtoa_r+0x4de>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d076      	beq.n	80082de <_dtoa_r+0x4de>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dd36      	ble.n	8008264 <_dtoa_r+0x464>
 80081f6:	9b00      	ldr	r3, [sp, #0]
 80081f8:	4650      	mov	r0, sl
 80081fa:	4659      	mov	r1, fp
 80081fc:	1e5f      	subs	r7, r3, #1
 80081fe:	2200      	movs	r2, #0
 8008200:	4b88      	ldr	r3, [pc, #544]	; (8008424 <_dtoa_r+0x624>)
 8008202:	f7f8 fa01 	bl	8000608 <__aeabi_dmul>
 8008206:	9e02      	ldr	r6, [sp, #8]
 8008208:	4682      	mov	sl, r0
 800820a:	468b      	mov	fp, r1
 800820c:	3501      	adds	r5, #1
 800820e:	4628      	mov	r0, r5
 8008210:	f7f8 f990 	bl	8000534 <__aeabi_i2d>
 8008214:	4652      	mov	r2, sl
 8008216:	465b      	mov	r3, fp
 8008218:	f7f8 f9f6 	bl	8000608 <__aeabi_dmul>
 800821c:	4b82      	ldr	r3, [pc, #520]	; (8008428 <_dtoa_r+0x628>)
 800821e:	2200      	movs	r2, #0
 8008220:	f7f8 f83c 	bl	800029c <__adddf3>
 8008224:	46d0      	mov	r8, sl
 8008226:	46d9      	mov	r9, fp
 8008228:	4682      	mov	sl, r0
 800822a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800822e:	2e00      	cmp	r6, #0
 8008230:	d158      	bne.n	80082e4 <_dtoa_r+0x4e4>
 8008232:	4b7e      	ldr	r3, [pc, #504]	; (800842c <_dtoa_r+0x62c>)
 8008234:	2200      	movs	r2, #0
 8008236:	4640      	mov	r0, r8
 8008238:	4649      	mov	r1, r9
 800823a:	f7f8 f82d 	bl	8000298 <__aeabi_dsub>
 800823e:	4652      	mov	r2, sl
 8008240:	465b      	mov	r3, fp
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	f7f8 fc6f 	bl	8000b28 <__aeabi_dcmpgt>
 800824a:	2800      	cmp	r0, #0
 800824c:	f040 8295 	bne.w	800877a <_dtoa_r+0x97a>
 8008250:	4652      	mov	r2, sl
 8008252:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008256:	4640      	mov	r0, r8
 8008258:	4649      	mov	r1, r9
 800825a:	f7f8 fc47 	bl	8000aec <__aeabi_dcmplt>
 800825e:	2800      	cmp	r0, #0
 8008260:	f040 8289 	bne.w	8008776 <_dtoa_r+0x976>
 8008264:	ec5b ab19 	vmov	sl, fp, d9
 8008268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800826a:	2b00      	cmp	r3, #0
 800826c:	f2c0 8148 	blt.w	8008500 <_dtoa_r+0x700>
 8008270:	9a00      	ldr	r2, [sp, #0]
 8008272:	2a0e      	cmp	r2, #14
 8008274:	f300 8144 	bgt.w	8008500 <_dtoa_r+0x700>
 8008278:	4b67      	ldr	r3, [pc, #412]	; (8008418 <_dtoa_r+0x618>)
 800827a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800827e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	f280 80d5 	bge.w	8008434 <_dtoa_r+0x634>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f300 80d1 	bgt.w	8008434 <_dtoa_r+0x634>
 8008292:	f040 826f 	bne.w	8008774 <_dtoa_r+0x974>
 8008296:	4b65      	ldr	r3, [pc, #404]	; (800842c <_dtoa_r+0x62c>)
 8008298:	2200      	movs	r2, #0
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f8 f9b3 	bl	8000608 <__aeabi_dmul>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	f7f8 fc35 	bl	8000b14 <__aeabi_dcmpge>
 80082aa:	9e03      	ldr	r6, [sp, #12]
 80082ac:	4637      	mov	r7, r6
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8245 	bne.w	800873e <_dtoa_r+0x93e>
 80082b4:	9d01      	ldr	r5, [sp, #4]
 80082b6:	2331      	movs	r3, #49	; 0x31
 80082b8:	f805 3b01 	strb.w	r3, [r5], #1
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	e240      	b.n	8008746 <_dtoa_r+0x946>
 80082c4:	07f2      	lsls	r2, r6, #31
 80082c6:	d505      	bpl.n	80082d4 <_dtoa_r+0x4d4>
 80082c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082cc:	f7f8 f99c 	bl	8000608 <__aeabi_dmul>
 80082d0:	3501      	adds	r5, #1
 80082d2:	2301      	movs	r3, #1
 80082d4:	1076      	asrs	r6, r6, #1
 80082d6:	3708      	adds	r7, #8
 80082d8:	e777      	b.n	80081ca <_dtoa_r+0x3ca>
 80082da:	2502      	movs	r5, #2
 80082dc:	e779      	b.n	80081d2 <_dtoa_r+0x3d2>
 80082de:	9f00      	ldr	r7, [sp, #0]
 80082e0:	9e03      	ldr	r6, [sp, #12]
 80082e2:	e794      	b.n	800820e <_dtoa_r+0x40e>
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	4b4c      	ldr	r3, [pc, #304]	; (8008418 <_dtoa_r+0x618>)
 80082e8:	4431      	add	r1, r6
 80082ea:	910d      	str	r1, [sp, #52]	; 0x34
 80082ec:	9908      	ldr	r1, [sp, #32]
 80082ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082f6:	2900      	cmp	r1, #0
 80082f8:	d043      	beq.n	8008382 <_dtoa_r+0x582>
 80082fa:	494d      	ldr	r1, [pc, #308]	; (8008430 <_dtoa_r+0x630>)
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7f8 faad 	bl	800085c <__aeabi_ddiv>
 8008302:	4652      	mov	r2, sl
 8008304:	465b      	mov	r3, fp
 8008306:	f7f7 ffc7 	bl	8000298 <__aeabi_dsub>
 800830a:	9d01      	ldr	r5, [sp, #4]
 800830c:	4682      	mov	sl, r0
 800830e:	468b      	mov	fp, r1
 8008310:	4649      	mov	r1, r9
 8008312:	4640      	mov	r0, r8
 8008314:	f7f8 fc28 	bl	8000b68 <__aeabi_d2iz>
 8008318:	4606      	mov	r6, r0
 800831a:	f7f8 f90b 	bl	8000534 <__aeabi_i2d>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f7 ffb7 	bl	8000298 <__aeabi_dsub>
 800832a:	3630      	adds	r6, #48	; 0x30
 800832c:	f805 6b01 	strb.w	r6, [r5], #1
 8008330:	4652      	mov	r2, sl
 8008332:	465b      	mov	r3, fp
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	f7f8 fbd8 	bl	8000aec <__aeabi_dcmplt>
 800833c:	2800      	cmp	r0, #0
 800833e:	d163      	bne.n	8008408 <_dtoa_r+0x608>
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	4936      	ldr	r1, [pc, #216]	; (8008420 <_dtoa_r+0x620>)
 8008346:	2000      	movs	r0, #0
 8008348:	f7f7 ffa6 	bl	8000298 <__aeabi_dsub>
 800834c:	4652      	mov	r2, sl
 800834e:	465b      	mov	r3, fp
 8008350:	f7f8 fbcc 	bl	8000aec <__aeabi_dcmplt>
 8008354:	2800      	cmp	r0, #0
 8008356:	f040 80b5 	bne.w	80084c4 <_dtoa_r+0x6c4>
 800835a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835c:	429d      	cmp	r5, r3
 800835e:	d081      	beq.n	8008264 <_dtoa_r+0x464>
 8008360:	4b30      	ldr	r3, [pc, #192]	; (8008424 <_dtoa_r+0x624>)
 8008362:	2200      	movs	r2, #0
 8008364:	4650      	mov	r0, sl
 8008366:	4659      	mov	r1, fp
 8008368:	f7f8 f94e 	bl	8000608 <__aeabi_dmul>
 800836c:	4b2d      	ldr	r3, [pc, #180]	; (8008424 <_dtoa_r+0x624>)
 800836e:	4682      	mov	sl, r0
 8008370:	468b      	mov	fp, r1
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	2200      	movs	r2, #0
 8008378:	f7f8 f946 	bl	8000608 <__aeabi_dmul>
 800837c:	4680      	mov	r8, r0
 800837e:	4689      	mov	r9, r1
 8008380:	e7c6      	b.n	8008310 <_dtoa_r+0x510>
 8008382:	4650      	mov	r0, sl
 8008384:	4659      	mov	r1, fp
 8008386:	f7f8 f93f 	bl	8000608 <__aeabi_dmul>
 800838a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800838c:	9d01      	ldr	r5, [sp, #4]
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	4649      	mov	r1, r9
 8008396:	4640      	mov	r0, r8
 8008398:	f7f8 fbe6 	bl	8000b68 <__aeabi_d2iz>
 800839c:	4606      	mov	r6, r0
 800839e:	f7f8 f8c9 	bl	8000534 <__aeabi_i2d>
 80083a2:	3630      	adds	r6, #48	; 0x30
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4640      	mov	r0, r8
 80083aa:	4649      	mov	r1, r9
 80083ac:	f7f7 ff74 	bl	8000298 <__aeabi_dsub>
 80083b0:	f805 6b01 	strb.w	r6, [r5], #1
 80083b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b6:	429d      	cmp	r5, r3
 80083b8:	4680      	mov	r8, r0
 80083ba:	4689      	mov	r9, r1
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	d124      	bne.n	800840c <_dtoa_r+0x60c>
 80083c2:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <_dtoa_r+0x630>)
 80083c4:	4650      	mov	r0, sl
 80083c6:	4659      	mov	r1, fp
 80083c8:	f7f7 ff68 	bl	800029c <__adddf3>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f7f8 fba8 	bl	8000b28 <__aeabi_dcmpgt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d173      	bne.n	80084c4 <_dtoa_r+0x6c4>
 80083dc:	4652      	mov	r2, sl
 80083de:	465b      	mov	r3, fp
 80083e0:	4913      	ldr	r1, [pc, #76]	; (8008430 <_dtoa_r+0x630>)
 80083e2:	2000      	movs	r0, #0
 80083e4:	f7f7 ff58 	bl	8000298 <__aeabi_dsub>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f8 fb7c 	bl	8000aec <__aeabi_dcmplt>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f af35 	beq.w	8008264 <_dtoa_r+0x464>
 80083fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80083fc:	1e6b      	subs	r3, r5, #1
 80083fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008400:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d0f8      	beq.n	80083fa <_dtoa_r+0x5fa>
 8008408:	9700      	str	r7, [sp, #0]
 800840a:	e049      	b.n	80084a0 <_dtoa_r+0x6a0>
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <_dtoa_r+0x624>)
 800840e:	f7f8 f8fb 	bl	8000608 <__aeabi_dmul>
 8008412:	4680      	mov	r8, r0
 8008414:	4689      	mov	r9, r1
 8008416:	e7bd      	b.n	8008394 <_dtoa_r+0x594>
 8008418:	0800a630 	.word	0x0800a630
 800841c:	0800a608 	.word	0x0800a608
 8008420:	3ff00000 	.word	0x3ff00000
 8008424:	40240000 	.word	0x40240000
 8008428:	401c0000 	.word	0x401c0000
 800842c:	40140000 	.word	0x40140000
 8008430:	3fe00000 	.word	0x3fe00000
 8008434:	9d01      	ldr	r5, [sp, #4]
 8008436:	4656      	mov	r6, sl
 8008438:	465f      	mov	r7, fp
 800843a:	4642      	mov	r2, r8
 800843c:	464b      	mov	r3, r9
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f8 fa0b 	bl	800085c <__aeabi_ddiv>
 8008446:	f7f8 fb8f 	bl	8000b68 <__aeabi_d2iz>
 800844a:	4682      	mov	sl, r0
 800844c:	f7f8 f872 	bl	8000534 <__aeabi_i2d>
 8008450:	4642      	mov	r2, r8
 8008452:	464b      	mov	r3, r9
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4630      	mov	r0, r6
 800845e:	4639      	mov	r1, r7
 8008460:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008464:	f7f7 ff18 	bl	8000298 <__aeabi_dsub>
 8008468:	f805 6b01 	strb.w	r6, [r5], #1
 800846c:	9e01      	ldr	r6, [sp, #4]
 800846e:	9f03      	ldr	r7, [sp, #12]
 8008470:	1bae      	subs	r6, r5, r6
 8008472:	42b7      	cmp	r7, r6
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	d135      	bne.n	80084e6 <_dtoa_r+0x6e6>
 800847a:	f7f7 ff0f 	bl	800029c <__adddf3>
 800847e:	4642      	mov	r2, r8
 8008480:	464b      	mov	r3, r9
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	f7f8 fb4f 	bl	8000b28 <__aeabi_dcmpgt>
 800848a:	b9d0      	cbnz	r0, 80084c2 <_dtoa_r+0x6c2>
 800848c:	4642      	mov	r2, r8
 800848e:	464b      	mov	r3, r9
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f8 fb20 	bl	8000ad8 <__aeabi_dcmpeq>
 8008498:	b110      	cbz	r0, 80084a0 <_dtoa_r+0x6a0>
 800849a:	f01a 0f01 	tst.w	sl, #1
 800849e:	d110      	bne.n	80084c2 <_dtoa_r+0x6c2>
 80084a0:	4620      	mov	r0, r4
 80084a2:	ee18 1a10 	vmov	r1, s16
 80084a6:	f000 faf3 	bl	8008a90 <_Bfree>
 80084aa:	2300      	movs	r3, #0
 80084ac:	9800      	ldr	r0, [sp, #0]
 80084ae:	702b      	strb	r3, [r5, #0]
 80084b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b2:	3001      	adds	r0, #1
 80084b4:	6018      	str	r0, [r3, #0]
 80084b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f43f acf1 	beq.w	8007ea0 <_dtoa_r+0xa0>
 80084be:	601d      	str	r5, [r3, #0]
 80084c0:	e4ee      	b.n	8007ea0 <_dtoa_r+0xa0>
 80084c2:	9f00      	ldr	r7, [sp, #0]
 80084c4:	462b      	mov	r3, r5
 80084c6:	461d      	mov	r5, r3
 80084c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084cc:	2a39      	cmp	r2, #57	; 0x39
 80084ce:	d106      	bne.n	80084de <_dtoa_r+0x6de>
 80084d0:	9a01      	ldr	r2, [sp, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d1f7      	bne.n	80084c6 <_dtoa_r+0x6c6>
 80084d6:	9901      	ldr	r1, [sp, #4]
 80084d8:	2230      	movs	r2, #48	; 0x30
 80084da:	3701      	adds	r7, #1
 80084dc:	700a      	strb	r2, [r1, #0]
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	3201      	adds	r2, #1
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e790      	b.n	8008408 <_dtoa_r+0x608>
 80084e6:	4ba6      	ldr	r3, [pc, #664]	; (8008780 <_dtoa_r+0x980>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f7f8 faef 	bl	8000ad8 <__aeabi_dcmpeq>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d09d      	beq.n	800843a <_dtoa_r+0x63a>
 80084fe:	e7cf      	b.n	80084a0 <_dtoa_r+0x6a0>
 8008500:	9a08      	ldr	r2, [sp, #32]
 8008502:	2a00      	cmp	r2, #0
 8008504:	f000 80d7 	beq.w	80086b6 <_dtoa_r+0x8b6>
 8008508:	9a06      	ldr	r2, [sp, #24]
 800850a:	2a01      	cmp	r2, #1
 800850c:	f300 80ba 	bgt.w	8008684 <_dtoa_r+0x884>
 8008510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008512:	2a00      	cmp	r2, #0
 8008514:	f000 80b2 	beq.w	800867c <_dtoa_r+0x87c>
 8008518:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800851c:	9e07      	ldr	r6, [sp, #28]
 800851e:	9d04      	ldr	r5, [sp, #16]
 8008520:	9a04      	ldr	r2, [sp, #16]
 8008522:	441a      	add	r2, r3
 8008524:	9204      	str	r2, [sp, #16]
 8008526:	9a05      	ldr	r2, [sp, #20]
 8008528:	2101      	movs	r1, #1
 800852a:	441a      	add	r2, r3
 800852c:	4620      	mov	r0, r4
 800852e:	9205      	str	r2, [sp, #20]
 8008530:	f000 fb66 	bl	8008c00 <__i2b>
 8008534:	4607      	mov	r7, r0
 8008536:	2d00      	cmp	r5, #0
 8008538:	dd0c      	ble.n	8008554 <_dtoa_r+0x754>
 800853a:	9b05      	ldr	r3, [sp, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dd09      	ble.n	8008554 <_dtoa_r+0x754>
 8008540:	42ab      	cmp	r3, r5
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	bfa8      	it	ge
 8008546:	462b      	movge	r3, r5
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	9204      	str	r2, [sp, #16]
 800854c:	9a05      	ldr	r2, [sp, #20]
 800854e:	1aed      	subs	r5, r5, r3
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	b31b      	cbz	r3, 80085a0 <_dtoa_r+0x7a0>
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80af 	beq.w	80086be <_dtoa_r+0x8be>
 8008560:	2e00      	cmp	r6, #0
 8008562:	dd13      	ble.n	800858c <_dtoa_r+0x78c>
 8008564:	4639      	mov	r1, r7
 8008566:	4632      	mov	r2, r6
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fc09 	bl	8008d80 <__pow5mult>
 800856e:	ee18 2a10 	vmov	r2, s16
 8008572:	4601      	mov	r1, r0
 8008574:	4607      	mov	r7, r0
 8008576:	4620      	mov	r0, r4
 8008578:	f000 fb58 	bl	8008c2c <__multiply>
 800857c:	ee18 1a10 	vmov	r1, s16
 8008580:	4680      	mov	r8, r0
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fa84 	bl	8008a90 <_Bfree>
 8008588:	ee08 8a10 	vmov	s16, r8
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	1b9a      	subs	r2, r3, r6
 8008590:	d006      	beq.n	80085a0 <_dtoa_r+0x7a0>
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	4620      	mov	r0, r4
 8008598:	f000 fbf2 	bl	8008d80 <__pow5mult>
 800859c:	ee08 0a10 	vmov	s16, r0
 80085a0:	2101      	movs	r1, #1
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fb2c 	bl	8008c00 <__i2b>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	4606      	mov	r6, r0
 80085ae:	f340 8088 	ble.w	80086c2 <_dtoa_r+0x8c2>
 80085b2:	461a      	mov	r2, r3
 80085b4:	4601      	mov	r1, r0
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fbe2 	bl	8008d80 <__pow5mult>
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	4606      	mov	r6, r0
 80085c2:	f340 8081 	ble.w	80086c8 <_dtoa_r+0x8c8>
 80085c6:	f04f 0800 	mov.w	r8, #0
 80085ca:	6933      	ldr	r3, [r6, #16]
 80085cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085d0:	6918      	ldr	r0, [r3, #16]
 80085d2:	f000 fac5 	bl	8008b60 <__hi0bits>
 80085d6:	f1c0 0020 	rsb	r0, r0, #32
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	4418      	add	r0, r3
 80085de:	f010 001f 	ands.w	r0, r0, #31
 80085e2:	f000 8092 	beq.w	800870a <_dtoa_r+0x90a>
 80085e6:	f1c0 0320 	rsb	r3, r0, #32
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	f340 808a 	ble.w	8008704 <_dtoa_r+0x904>
 80085f0:	f1c0 001c 	rsb	r0, r0, #28
 80085f4:	9b04      	ldr	r3, [sp, #16]
 80085f6:	4403      	add	r3, r0
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	4403      	add	r3, r0
 80085fe:	4405      	add	r5, r0
 8008600:	9305      	str	r3, [sp, #20]
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd07      	ble.n	8008618 <_dtoa_r+0x818>
 8008608:	ee18 1a10 	vmov	r1, s16
 800860c:	461a      	mov	r2, r3
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fc10 	bl	8008e34 <__lshift>
 8008614:	ee08 0a10 	vmov	s16, r0
 8008618:	9b05      	ldr	r3, [sp, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd05      	ble.n	800862a <_dtoa_r+0x82a>
 800861e:	4631      	mov	r1, r6
 8008620:	461a      	mov	r2, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fc06 	bl	8008e34 <__lshift>
 8008628:	4606      	mov	r6, r0
 800862a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d06e      	beq.n	800870e <_dtoa_r+0x90e>
 8008630:	ee18 0a10 	vmov	r0, s16
 8008634:	4631      	mov	r1, r6
 8008636:	f000 fc6d 	bl	8008f14 <__mcmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	da67      	bge.n	800870e <_dtoa_r+0x90e>
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	3b01      	subs	r3, #1
 8008642:	ee18 1a10 	vmov	r1, s16
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	220a      	movs	r2, #10
 800864a:	2300      	movs	r3, #0
 800864c:	4620      	mov	r0, r4
 800864e:	f000 fa41 	bl	8008ad4 <__multadd>
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	ee08 0a10 	vmov	s16, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 81b1 	beq.w	80089c0 <_dtoa_r+0xbc0>
 800865e:	2300      	movs	r3, #0
 8008660:	4639      	mov	r1, r7
 8008662:	220a      	movs	r2, #10
 8008664:	4620      	mov	r0, r4
 8008666:	f000 fa35 	bl	8008ad4 <__multadd>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	4607      	mov	r7, r0
 8008670:	f300 808e 	bgt.w	8008790 <_dtoa_r+0x990>
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	2b02      	cmp	r3, #2
 8008678:	dc51      	bgt.n	800871e <_dtoa_r+0x91e>
 800867a:	e089      	b.n	8008790 <_dtoa_r+0x990>
 800867c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800867e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008682:	e74b      	b.n	800851c <_dtoa_r+0x71c>
 8008684:	9b03      	ldr	r3, [sp, #12]
 8008686:	1e5e      	subs	r6, r3, #1
 8008688:	9b07      	ldr	r3, [sp, #28]
 800868a:	42b3      	cmp	r3, r6
 800868c:	bfbf      	itttt	lt
 800868e:	9b07      	ldrlt	r3, [sp, #28]
 8008690:	9607      	strlt	r6, [sp, #28]
 8008692:	1af2      	sublt	r2, r6, r3
 8008694:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008696:	bfb6      	itet	lt
 8008698:	189b      	addlt	r3, r3, r2
 800869a:	1b9e      	subge	r6, r3, r6
 800869c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	bfb8      	it	lt
 80086a2:	2600      	movlt	r6, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bfb7      	itett	lt
 80086a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086b0:	1a9d      	sublt	r5, r3, r2
 80086b2:	2300      	movlt	r3, #0
 80086b4:	e734      	b.n	8008520 <_dtoa_r+0x720>
 80086b6:	9e07      	ldr	r6, [sp, #28]
 80086b8:	9d04      	ldr	r5, [sp, #16]
 80086ba:	9f08      	ldr	r7, [sp, #32]
 80086bc:	e73b      	b.n	8008536 <_dtoa_r+0x736>
 80086be:	9a07      	ldr	r2, [sp, #28]
 80086c0:	e767      	b.n	8008592 <_dtoa_r+0x792>
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	dc18      	bgt.n	80086fa <_dtoa_r+0x8fa>
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	d115      	bne.n	80086fa <_dtoa_r+0x8fa>
 80086ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086d2:	b993      	cbnz	r3, 80086fa <_dtoa_r+0x8fa>
 80086d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086d8:	0d1b      	lsrs	r3, r3, #20
 80086da:	051b      	lsls	r3, r3, #20
 80086dc:	b183      	cbz	r3, 8008700 <_dtoa_r+0x900>
 80086de:	9b04      	ldr	r3, [sp, #16]
 80086e0:	3301      	adds	r3, #1
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	9b05      	ldr	r3, [sp, #20]
 80086e6:	3301      	adds	r3, #1
 80086e8:	9305      	str	r3, [sp, #20]
 80086ea:	f04f 0801 	mov.w	r8, #1
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f af6a 	bne.w	80085ca <_dtoa_r+0x7ca>
 80086f6:	2001      	movs	r0, #1
 80086f8:	e76f      	b.n	80085da <_dtoa_r+0x7da>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	e7f6      	b.n	80086ee <_dtoa_r+0x8ee>
 8008700:	4698      	mov	r8, r3
 8008702:	e7f4      	b.n	80086ee <_dtoa_r+0x8ee>
 8008704:	f43f af7d 	beq.w	8008602 <_dtoa_r+0x802>
 8008708:	4618      	mov	r0, r3
 800870a:	301c      	adds	r0, #28
 800870c:	e772      	b.n	80085f4 <_dtoa_r+0x7f4>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc37      	bgt.n	8008784 <_dtoa_r+0x984>
 8008714:	9b06      	ldr	r3, [sp, #24]
 8008716:	2b02      	cmp	r3, #2
 8008718:	dd34      	ble.n	8008784 <_dtoa_r+0x984>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	9b02      	ldr	r3, [sp, #8]
 8008720:	b96b      	cbnz	r3, 800873e <_dtoa_r+0x93e>
 8008722:	4631      	mov	r1, r6
 8008724:	2205      	movs	r2, #5
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f9d4 	bl	8008ad4 <__multadd>
 800872c:	4601      	mov	r1, r0
 800872e:	4606      	mov	r6, r0
 8008730:	ee18 0a10 	vmov	r0, s16
 8008734:	f000 fbee 	bl	8008f14 <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	f73f adbb 	bgt.w	80082b4 <_dtoa_r+0x4b4>
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	9d01      	ldr	r5, [sp, #4]
 8008742:	43db      	mvns	r3, r3
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	4631      	mov	r1, r6
 800874c:	4620      	mov	r0, r4
 800874e:	f000 f99f 	bl	8008a90 <_Bfree>
 8008752:	2f00      	cmp	r7, #0
 8008754:	f43f aea4 	beq.w	80084a0 <_dtoa_r+0x6a0>
 8008758:	f1b8 0f00 	cmp.w	r8, #0
 800875c:	d005      	beq.n	800876a <_dtoa_r+0x96a>
 800875e:	45b8      	cmp	r8, r7
 8008760:	d003      	beq.n	800876a <_dtoa_r+0x96a>
 8008762:	4641      	mov	r1, r8
 8008764:	4620      	mov	r0, r4
 8008766:	f000 f993 	bl	8008a90 <_Bfree>
 800876a:	4639      	mov	r1, r7
 800876c:	4620      	mov	r0, r4
 800876e:	f000 f98f 	bl	8008a90 <_Bfree>
 8008772:	e695      	b.n	80084a0 <_dtoa_r+0x6a0>
 8008774:	2600      	movs	r6, #0
 8008776:	4637      	mov	r7, r6
 8008778:	e7e1      	b.n	800873e <_dtoa_r+0x93e>
 800877a:	9700      	str	r7, [sp, #0]
 800877c:	4637      	mov	r7, r6
 800877e:	e599      	b.n	80082b4 <_dtoa_r+0x4b4>
 8008780:	40240000 	.word	0x40240000
 8008784:	9b08      	ldr	r3, [sp, #32]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 80ca 	beq.w	8008920 <_dtoa_r+0xb20>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	9302      	str	r3, [sp, #8]
 8008790:	2d00      	cmp	r5, #0
 8008792:	dd05      	ble.n	80087a0 <_dtoa_r+0x9a0>
 8008794:	4639      	mov	r1, r7
 8008796:	462a      	mov	r2, r5
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fb4b 	bl	8008e34 <__lshift>
 800879e:	4607      	mov	r7, r0
 80087a0:	f1b8 0f00 	cmp.w	r8, #0
 80087a4:	d05b      	beq.n	800885e <_dtoa_r+0xa5e>
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 f931 	bl	8008a10 <_Balloc>
 80087ae:	4605      	mov	r5, r0
 80087b0:	b928      	cbnz	r0, 80087be <_dtoa_r+0x9be>
 80087b2:	4b87      	ldr	r3, [pc, #540]	; (80089d0 <_dtoa_r+0xbd0>)
 80087b4:	4602      	mov	r2, r0
 80087b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ba:	f7ff bb3b 	b.w	8007e34 <_dtoa_r+0x34>
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	3202      	adds	r2, #2
 80087c2:	0092      	lsls	r2, r2, #2
 80087c4:	f107 010c 	add.w	r1, r7, #12
 80087c8:	300c      	adds	r0, #12
 80087ca:	f000 f913 	bl	80089f4 <memcpy>
 80087ce:	2201      	movs	r2, #1
 80087d0:	4629      	mov	r1, r5
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fb2e 	bl	8008e34 <__lshift>
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	f103 0901 	add.w	r9, r3, #1
 80087de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	9305      	str	r3, [sp, #20]
 80087e6:	f00a 0301 	and.w	r3, sl, #1
 80087ea:	46b8      	mov	r8, r7
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	4607      	mov	r7, r0
 80087f0:	4631      	mov	r1, r6
 80087f2:	ee18 0a10 	vmov	r0, s16
 80087f6:	f7ff fa77 	bl	8007ce8 <quorem>
 80087fa:	4641      	mov	r1, r8
 80087fc:	9002      	str	r0, [sp, #8]
 80087fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008802:	ee18 0a10 	vmov	r0, s16
 8008806:	f000 fb85 	bl	8008f14 <__mcmp>
 800880a:	463a      	mov	r2, r7
 800880c:	9003      	str	r0, [sp, #12]
 800880e:	4631      	mov	r1, r6
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fb9b 	bl	8008f4c <__mdiff>
 8008816:	68c2      	ldr	r2, [r0, #12]
 8008818:	f109 3bff 	add.w	fp, r9, #4294967295
 800881c:	4605      	mov	r5, r0
 800881e:	bb02      	cbnz	r2, 8008862 <_dtoa_r+0xa62>
 8008820:	4601      	mov	r1, r0
 8008822:	ee18 0a10 	vmov	r0, s16
 8008826:	f000 fb75 	bl	8008f14 <__mcmp>
 800882a:	4602      	mov	r2, r0
 800882c:	4629      	mov	r1, r5
 800882e:	4620      	mov	r0, r4
 8008830:	9207      	str	r2, [sp, #28]
 8008832:	f000 f92d 	bl	8008a90 <_Bfree>
 8008836:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800883a:	ea43 0102 	orr.w	r1, r3, r2
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	430b      	orrs	r3, r1
 8008842:	464d      	mov	r5, r9
 8008844:	d10f      	bne.n	8008866 <_dtoa_r+0xa66>
 8008846:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800884a:	d02a      	beq.n	80088a2 <_dtoa_r+0xaa2>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd02      	ble.n	8008858 <_dtoa_r+0xa58>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008858:	f88b a000 	strb.w	sl, [fp]
 800885c:	e775      	b.n	800874a <_dtoa_r+0x94a>
 800885e:	4638      	mov	r0, r7
 8008860:	e7ba      	b.n	80087d8 <_dtoa_r+0x9d8>
 8008862:	2201      	movs	r2, #1
 8008864:	e7e2      	b.n	800882c <_dtoa_r+0xa2c>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	db04      	blt.n	8008876 <_dtoa_r+0xa76>
 800886c:	9906      	ldr	r1, [sp, #24]
 800886e:	430b      	orrs	r3, r1
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	430b      	orrs	r3, r1
 8008874:	d122      	bne.n	80088bc <_dtoa_r+0xabc>
 8008876:	2a00      	cmp	r2, #0
 8008878:	ddee      	ble.n	8008858 <_dtoa_r+0xa58>
 800887a:	ee18 1a10 	vmov	r1, s16
 800887e:	2201      	movs	r2, #1
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fad7 	bl	8008e34 <__lshift>
 8008886:	4631      	mov	r1, r6
 8008888:	ee08 0a10 	vmov	s16, r0
 800888c:	f000 fb42 	bl	8008f14 <__mcmp>
 8008890:	2800      	cmp	r0, #0
 8008892:	dc03      	bgt.n	800889c <_dtoa_r+0xa9c>
 8008894:	d1e0      	bne.n	8008858 <_dtoa_r+0xa58>
 8008896:	f01a 0f01 	tst.w	sl, #1
 800889a:	d0dd      	beq.n	8008858 <_dtoa_r+0xa58>
 800889c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088a0:	d1d7      	bne.n	8008852 <_dtoa_r+0xa52>
 80088a2:	2339      	movs	r3, #57	; 0x39
 80088a4:	f88b 3000 	strb.w	r3, [fp]
 80088a8:	462b      	mov	r3, r5
 80088aa:	461d      	mov	r5, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088b2:	2a39      	cmp	r2, #57	; 0x39
 80088b4:	d071      	beq.n	800899a <_dtoa_r+0xb9a>
 80088b6:	3201      	adds	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e746      	b.n	800874a <_dtoa_r+0x94a>
 80088bc:	2a00      	cmp	r2, #0
 80088be:	dd07      	ble.n	80088d0 <_dtoa_r+0xad0>
 80088c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088c4:	d0ed      	beq.n	80088a2 <_dtoa_r+0xaa2>
 80088c6:	f10a 0301 	add.w	r3, sl, #1
 80088ca:	f88b 3000 	strb.w	r3, [fp]
 80088ce:	e73c      	b.n	800874a <_dtoa_r+0x94a>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80088d6:	4599      	cmp	r9, r3
 80088d8:	d047      	beq.n	800896a <_dtoa_r+0xb6a>
 80088da:	ee18 1a10 	vmov	r1, s16
 80088de:	2300      	movs	r3, #0
 80088e0:	220a      	movs	r2, #10
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 f8f6 	bl	8008ad4 <__multadd>
 80088e8:	45b8      	cmp	r8, r7
 80088ea:	ee08 0a10 	vmov	s16, r0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	f04f 020a 	mov.w	r2, #10
 80088f6:	4641      	mov	r1, r8
 80088f8:	4620      	mov	r0, r4
 80088fa:	d106      	bne.n	800890a <_dtoa_r+0xb0a>
 80088fc:	f000 f8ea 	bl	8008ad4 <__multadd>
 8008900:	4680      	mov	r8, r0
 8008902:	4607      	mov	r7, r0
 8008904:	f109 0901 	add.w	r9, r9, #1
 8008908:	e772      	b.n	80087f0 <_dtoa_r+0x9f0>
 800890a:	f000 f8e3 	bl	8008ad4 <__multadd>
 800890e:	4639      	mov	r1, r7
 8008910:	4680      	mov	r8, r0
 8008912:	2300      	movs	r3, #0
 8008914:	220a      	movs	r2, #10
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f8dc 	bl	8008ad4 <__multadd>
 800891c:	4607      	mov	r7, r0
 800891e:	e7f1      	b.n	8008904 <_dtoa_r+0xb04>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	9302      	str	r3, [sp, #8]
 8008924:	9d01      	ldr	r5, [sp, #4]
 8008926:	ee18 0a10 	vmov	r0, s16
 800892a:	4631      	mov	r1, r6
 800892c:	f7ff f9dc 	bl	8007ce8 <quorem>
 8008930:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	f805 ab01 	strb.w	sl, [r5], #1
 800893a:	1aea      	subs	r2, r5, r3
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	4293      	cmp	r3, r2
 8008940:	dd09      	ble.n	8008956 <_dtoa_r+0xb56>
 8008942:	ee18 1a10 	vmov	r1, s16
 8008946:	2300      	movs	r3, #0
 8008948:	220a      	movs	r2, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f000 f8c2 	bl	8008ad4 <__multadd>
 8008950:	ee08 0a10 	vmov	s16, r0
 8008954:	e7e7      	b.n	8008926 <_dtoa_r+0xb26>
 8008956:	9b02      	ldr	r3, [sp, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bfc8      	it	gt
 800895c:	461d      	movgt	r5, r3
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	bfd8      	it	le
 8008962:	2501      	movle	r5, #1
 8008964:	441d      	add	r5, r3
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	2201      	movs	r2, #1
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fa5f 	bl	8008e34 <__lshift>
 8008976:	4631      	mov	r1, r6
 8008978:	ee08 0a10 	vmov	s16, r0
 800897c:	f000 faca 	bl	8008f14 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dc91      	bgt.n	80088a8 <_dtoa_r+0xaa8>
 8008984:	d102      	bne.n	800898c <_dtoa_r+0xb8c>
 8008986:	f01a 0f01 	tst.w	sl, #1
 800898a:	d18d      	bne.n	80088a8 <_dtoa_r+0xaa8>
 800898c:	462b      	mov	r3, r5
 800898e:	461d      	mov	r5, r3
 8008990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008994:	2a30      	cmp	r2, #48	; 0x30
 8008996:	d0fa      	beq.n	800898e <_dtoa_r+0xb8e>
 8008998:	e6d7      	b.n	800874a <_dtoa_r+0x94a>
 800899a:	9a01      	ldr	r2, [sp, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d184      	bne.n	80088aa <_dtoa_r+0xaaa>
 80089a0:	9b00      	ldr	r3, [sp, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	2331      	movs	r3, #49	; 0x31
 80089a8:	7013      	strb	r3, [r2, #0]
 80089aa:	e6ce      	b.n	800874a <_dtoa_r+0x94a>
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <_dtoa_r+0xbd4>)
 80089ae:	f7ff ba95 	b.w	8007edc <_dtoa_r+0xdc>
 80089b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f47f aa6e 	bne.w	8007e96 <_dtoa_r+0x96>
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <_dtoa_r+0xbd8>)
 80089bc:	f7ff ba8e 	b.w	8007edc <_dtoa_r+0xdc>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dcae      	bgt.n	8008924 <_dtoa_r+0xb24>
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f73f aea8 	bgt.w	800871e <_dtoa_r+0x91e>
 80089ce:	e7a9      	b.n	8008924 <_dtoa_r+0xb24>
 80089d0:	0800a59b 	.word	0x0800a59b
 80089d4:	0800a4f8 	.word	0x0800a4f8
 80089d8:	0800a51c 	.word	0x0800a51c

080089dc <_localeconv_r>:
 80089dc:	4800      	ldr	r0, [pc, #0]	; (80089e0 <_localeconv_r+0x4>)
 80089de:	4770      	bx	lr
 80089e0:	20000178 	.word	0x20000178

080089e4 <malloc>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <malloc+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f000 bc17 	b.w	800921c <_malloc_r>
 80089ee:	bf00      	nop
 80089f0:	20000024 	.word	0x20000024

080089f4 <memcpy>:
 80089f4:	440a      	add	r2, r1
 80089f6:	4291      	cmp	r1, r2
 80089f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089fc:	d100      	bne.n	8008a00 <memcpy+0xc>
 80089fe:	4770      	bx	lr
 8008a00:	b510      	push	{r4, lr}
 8008a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	d1f9      	bne.n	8008a02 <memcpy+0xe>
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <_Balloc>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
 8008a18:	b976      	cbnz	r6, 8008a38 <_Balloc+0x28>
 8008a1a:	2010      	movs	r0, #16
 8008a1c:	f7ff ffe2 	bl	80089e4 <malloc>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6260      	str	r0, [r4, #36]	; 0x24
 8008a24:	b920      	cbnz	r0, 8008a30 <_Balloc+0x20>
 8008a26:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <_Balloc+0x78>)
 8008a28:	4818      	ldr	r0, [pc, #96]	; (8008a8c <_Balloc+0x7c>)
 8008a2a:	2166      	movs	r1, #102	; 0x66
 8008a2c:	f000 fdd6 	bl	80095dc <__assert_func>
 8008a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a34:	6006      	str	r6, [r0, #0]
 8008a36:	60c6      	str	r6, [r0, #12]
 8008a38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a3a:	68f3      	ldr	r3, [r6, #12]
 8008a3c:	b183      	cbz	r3, 8008a60 <_Balloc+0x50>
 8008a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a46:	b9b8      	cbnz	r0, 8008a78 <_Balloc+0x68>
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a4e:	1d72      	adds	r2, r6, #5
 8008a50:	0092      	lsls	r2, r2, #2
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fb60 	bl	8009118 <_calloc_r>
 8008a58:	b160      	cbz	r0, 8008a74 <_Balloc+0x64>
 8008a5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a5e:	e00e      	b.n	8008a7e <_Balloc+0x6e>
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	2104      	movs	r1, #4
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fb57 	bl	8009118 <_calloc_r>
 8008a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6c:	60f0      	str	r0, [r6, #12]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e4      	bne.n	8008a3e <_Balloc+0x2e>
 8008a74:	2000      	movs	r0, #0
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	6802      	ldr	r2, [r0, #0]
 8008a7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a84:	e7f7      	b.n	8008a76 <_Balloc+0x66>
 8008a86:	bf00      	nop
 8008a88:	0800a529 	.word	0x0800a529
 8008a8c:	0800a5ac 	.word	0x0800a5ac

08008a90 <_Bfree>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b976      	cbnz	r6, 8008ab8 <_Bfree+0x28>
 8008a9a:	2010      	movs	r0, #16
 8008a9c:	f7ff ffa2 	bl	80089e4 <malloc>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6268      	str	r0, [r5, #36]	; 0x24
 8008aa4:	b920      	cbnz	r0, 8008ab0 <_Bfree+0x20>
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <_Bfree+0x3c>)
 8008aa8:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <_Bfree+0x40>)
 8008aaa:	218a      	movs	r1, #138	; 0x8a
 8008aac:	f000 fd96 	bl	80095dc <__assert_func>
 8008ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ab4:	6006      	str	r6, [r0, #0]
 8008ab6:	60c6      	str	r6, [r0, #12]
 8008ab8:	b13c      	cbz	r4, 8008aca <_Bfree+0x3a>
 8008aba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008abc:	6862      	ldr	r2, [r4, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ac4:	6021      	str	r1, [r4, #0]
 8008ac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	0800a529 	.word	0x0800a529
 8008ad0:	0800a5ac 	.word	0x0800a5ac

08008ad4 <__multadd>:
 8008ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad8:	690d      	ldr	r5, [r1, #16]
 8008ada:	4607      	mov	r7, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	461e      	mov	r6, r3
 8008ae0:	f101 0c14 	add.w	ip, r1, #20
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f8dc 3000 	ldr.w	r3, [ip]
 8008aea:	b299      	uxth	r1, r3
 8008aec:	fb02 6101 	mla	r1, r2, r1, r6
 8008af0:	0c1e      	lsrs	r6, r3, #16
 8008af2:	0c0b      	lsrs	r3, r1, #16
 8008af4:	fb02 3306 	mla	r3, r2, r6, r3
 8008af8:	b289      	uxth	r1, r1
 8008afa:	3001      	adds	r0, #1
 8008afc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b00:	4285      	cmp	r5, r0
 8008b02:	f84c 1b04 	str.w	r1, [ip], #4
 8008b06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b0a:	dcec      	bgt.n	8008ae6 <__multadd+0x12>
 8008b0c:	b30e      	cbz	r6, 8008b52 <__multadd+0x7e>
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dc19      	bgt.n	8008b48 <__multadd+0x74>
 8008b14:	6861      	ldr	r1, [r4, #4]
 8008b16:	4638      	mov	r0, r7
 8008b18:	3101      	adds	r1, #1
 8008b1a:	f7ff ff79 	bl	8008a10 <_Balloc>
 8008b1e:	4680      	mov	r8, r0
 8008b20:	b928      	cbnz	r0, 8008b2e <__multadd+0x5a>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <__multadd+0x84>)
 8008b26:	480d      	ldr	r0, [pc, #52]	; (8008b5c <__multadd+0x88>)
 8008b28:	21b5      	movs	r1, #181	; 0xb5
 8008b2a:	f000 fd57 	bl	80095dc <__assert_func>
 8008b2e:	6922      	ldr	r2, [r4, #16]
 8008b30:	3202      	adds	r2, #2
 8008b32:	f104 010c 	add.w	r1, r4, #12
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	300c      	adds	r0, #12
 8008b3a:	f7ff ff5b 	bl	80089f4 <memcpy>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7ff ffa5 	bl	8008a90 <_Bfree>
 8008b46:	4644      	mov	r4, r8
 8008b48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	615e      	str	r6, [r3, #20]
 8008b50:	6125      	str	r5, [r4, #16]
 8008b52:	4620      	mov	r0, r4
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	0800a59b 	.word	0x0800a59b
 8008b5c:	0800a5ac 	.word	0x0800a5ac

08008b60 <__hi0bits>:
 8008b60:	0c03      	lsrs	r3, r0, #16
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	b9d3      	cbnz	r3, 8008b9c <__hi0bits+0x3c>
 8008b66:	0400      	lsls	r0, r0, #16
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b6e:	bf04      	itt	eq
 8008b70:	0200      	lsleq	r0, r0, #8
 8008b72:	3308      	addeq	r3, #8
 8008b74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b78:	bf04      	itt	eq
 8008b7a:	0100      	lsleq	r0, r0, #4
 8008b7c:	3304      	addeq	r3, #4
 8008b7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b82:	bf04      	itt	eq
 8008b84:	0080      	lsleq	r0, r0, #2
 8008b86:	3302      	addeq	r3, #2
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	db05      	blt.n	8008b98 <__hi0bits+0x38>
 8008b8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b90:	f103 0301 	add.w	r3, r3, #1
 8008b94:	bf08      	it	eq
 8008b96:	2320      	moveq	r3, #32
 8008b98:	4618      	mov	r0, r3
 8008b9a:	4770      	bx	lr
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e7e4      	b.n	8008b6a <__hi0bits+0xa>

08008ba0 <__lo0bits>:
 8008ba0:	6803      	ldr	r3, [r0, #0]
 8008ba2:	f013 0207 	ands.w	r2, r3, #7
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	d00b      	beq.n	8008bc2 <__lo0bits+0x22>
 8008baa:	07da      	lsls	r2, r3, #31
 8008bac:	d423      	bmi.n	8008bf6 <__lo0bits+0x56>
 8008bae:	0798      	lsls	r0, r3, #30
 8008bb0:	bf49      	itett	mi
 8008bb2:	085b      	lsrmi	r3, r3, #1
 8008bb4:	089b      	lsrpl	r3, r3, #2
 8008bb6:	2001      	movmi	r0, #1
 8008bb8:	600b      	strmi	r3, [r1, #0]
 8008bba:	bf5c      	itt	pl
 8008bbc:	600b      	strpl	r3, [r1, #0]
 8008bbe:	2002      	movpl	r0, #2
 8008bc0:	4770      	bx	lr
 8008bc2:	b298      	uxth	r0, r3
 8008bc4:	b9a8      	cbnz	r0, 8008bf2 <__lo0bits+0x52>
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	2010      	movs	r0, #16
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	b90a      	cbnz	r2, 8008bd2 <__lo0bits+0x32>
 8008bce:	3008      	adds	r0, #8
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	071a      	lsls	r2, r3, #28
 8008bd4:	bf04      	itt	eq
 8008bd6:	091b      	lsreq	r3, r3, #4
 8008bd8:	3004      	addeq	r0, #4
 8008bda:	079a      	lsls	r2, r3, #30
 8008bdc:	bf04      	itt	eq
 8008bde:	089b      	lsreq	r3, r3, #2
 8008be0:	3002      	addeq	r0, #2
 8008be2:	07da      	lsls	r2, r3, #31
 8008be4:	d403      	bmi.n	8008bee <__lo0bits+0x4e>
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	f100 0001 	add.w	r0, r0, #1
 8008bec:	d005      	beq.n	8008bfa <__lo0bits+0x5a>
 8008bee:	600b      	str	r3, [r1, #0]
 8008bf0:	4770      	bx	lr
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	e7e9      	b.n	8008bca <__lo0bits+0x2a>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	4770      	bx	lr
 8008bfa:	2020      	movs	r0, #32
 8008bfc:	4770      	bx	lr
	...

08008c00 <__i2b>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	460c      	mov	r4, r1
 8008c04:	2101      	movs	r1, #1
 8008c06:	f7ff ff03 	bl	8008a10 <_Balloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <__i2b+0x1a>
 8008c0e:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <__i2b+0x24>)
 8008c10:	4805      	ldr	r0, [pc, #20]	; (8008c28 <__i2b+0x28>)
 8008c12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c16:	f000 fce1 	bl	80095dc <__assert_func>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	6144      	str	r4, [r0, #20]
 8008c1e:	6103      	str	r3, [r0, #16]
 8008c20:	bd10      	pop	{r4, pc}
 8008c22:	bf00      	nop
 8008c24:	0800a59b 	.word	0x0800a59b
 8008c28:	0800a5ac 	.word	0x0800a5ac

08008c2c <__multiply>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	4691      	mov	r9, r2
 8008c32:	690a      	ldr	r2, [r1, #16]
 8008c34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bfb8      	it	lt
 8008c3c:	460b      	movlt	r3, r1
 8008c3e:	460c      	mov	r4, r1
 8008c40:	bfbc      	itt	lt
 8008c42:	464c      	movlt	r4, r9
 8008c44:	4699      	movlt	r9, r3
 8008c46:	6927      	ldr	r7, [r4, #16]
 8008c48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	6861      	ldr	r1, [r4, #4]
 8008c50:	eb07 060a 	add.w	r6, r7, sl
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	b085      	sub	sp, #20
 8008c58:	bfb8      	it	lt
 8008c5a:	3101      	addlt	r1, #1
 8008c5c:	f7ff fed8 	bl	8008a10 <_Balloc>
 8008c60:	b930      	cbnz	r0, 8008c70 <__multiply+0x44>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b44      	ldr	r3, [pc, #272]	; (8008d78 <__multiply+0x14c>)
 8008c66:	4845      	ldr	r0, [pc, #276]	; (8008d7c <__multiply+0x150>)
 8008c68:	f240 115d 	movw	r1, #349	; 0x15d
 8008c6c:	f000 fcb6 	bl	80095dc <__assert_func>
 8008c70:	f100 0514 	add.w	r5, r0, #20
 8008c74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c78:	462b      	mov	r3, r5
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	d321      	bcc.n	8008cc4 <__multiply+0x98>
 8008c80:	f104 0314 	add.w	r3, r4, #20
 8008c84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c88:	f109 0314 	add.w	r3, r9, #20
 8008c8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c90:	9202      	str	r2, [sp, #8]
 8008c92:	1b3a      	subs	r2, r7, r4
 8008c94:	3a15      	subs	r2, #21
 8008c96:	f022 0203 	bic.w	r2, r2, #3
 8008c9a:	3204      	adds	r2, #4
 8008c9c:	f104 0115 	add.w	r1, r4, #21
 8008ca0:	428f      	cmp	r7, r1
 8008ca2:	bf38      	it	cc
 8008ca4:	2204      	movcc	r2, #4
 8008ca6:	9201      	str	r2, [sp, #4]
 8008ca8:	9a02      	ldr	r2, [sp, #8]
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d80c      	bhi.n	8008cca <__multiply+0x9e>
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	dd03      	ble.n	8008cbc <__multiply+0x90>
 8008cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d05a      	beq.n	8008d72 <__multiply+0x146>
 8008cbc:	6106      	str	r6, [r0, #16]
 8008cbe:	b005      	add	sp, #20
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	f843 2b04 	str.w	r2, [r3], #4
 8008cc8:	e7d8      	b.n	8008c7c <__multiply+0x50>
 8008cca:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cce:	f1ba 0f00 	cmp.w	sl, #0
 8008cd2:	d024      	beq.n	8008d1e <__multiply+0xf2>
 8008cd4:	f104 0e14 	add.w	lr, r4, #20
 8008cd8:	46a9      	mov	r9, r5
 8008cda:	f04f 0c00 	mov.w	ip, #0
 8008cde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ce2:	f8d9 1000 	ldr.w	r1, [r9]
 8008ce6:	fa1f fb82 	uxth.w	fp, r2
 8008cea:	b289      	uxth	r1, r1
 8008cec:	fb0a 110b 	mla	r1, sl, fp, r1
 8008cf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8008cf8:	4461      	add	r1, ip
 8008cfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d06:	b289      	uxth	r1, r1
 8008d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d0c:	4577      	cmp	r7, lr
 8008d0e:	f849 1b04 	str.w	r1, [r9], #4
 8008d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d16:	d8e2      	bhi.n	8008cde <__multiply+0xb2>
 8008d18:	9a01      	ldr	r2, [sp, #4]
 8008d1a:	f845 c002 	str.w	ip, [r5, r2]
 8008d1e:	9a03      	ldr	r2, [sp, #12]
 8008d20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d24:	3304      	adds	r3, #4
 8008d26:	f1b9 0f00 	cmp.w	r9, #0
 8008d2a:	d020      	beq.n	8008d6e <__multiply+0x142>
 8008d2c:	6829      	ldr	r1, [r5, #0]
 8008d2e:	f104 0c14 	add.w	ip, r4, #20
 8008d32:	46ae      	mov	lr, r5
 8008d34:	f04f 0a00 	mov.w	sl, #0
 8008d38:	f8bc b000 	ldrh.w	fp, [ip]
 8008d3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d40:	fb09 220b 	mla	r2, r9, fp, r2
 8008d44:	4492      	add	sl, r2
 8008d46:	b289      	uxth	r1, r1
 8008d48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d4c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d54:	f8be 1000 	ldrh.w	r1, [lr]
 8008d58:	0c12      	lsrs	r2, r2, #16
 8008d5a:	fb09 1102 	mla	r1, r9, r2, r1
 8008d5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d62:	4567      	cmp	r7, ip
 8008d64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d68:	d8e6      	bhi.n	8008d38 <__multiply+0x10c>
 8008d6a:	9a01      	ldr	r2, [sp, #4]
 8008d6c:	50a9      	str	r1, [r5, r2]
 8008d6e:	3504      	adds	r5, #4
 8008d70:	e79a      	b.n	8008ca8 <__multiply+0x7c>
 8008d72:	3e01      	subs	r6, #1
 8008d74:	e79c      	b.n	8008cb0 <__multiply+0x84>
 8008d76:	bf00      	nop
 8008d78:	0800a59b 	.word	0x0800a59b
 8008d7c:	0800a5ac 	.word	0x0800a5ac

08008d80 <__pow5mult>:
 8008d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	4615      	mov	r5, r2
 8008d86:	f012 0203 	ands.w	r2, r2, #3
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	d007      	beq.n	8008da0 <__pow5mult+0x20>
 8008d90:	4c25      	ldr	r4, [pc, #148]	; (8008e28 <__pow5mult+0xa8>)
 8008d92:	3a01      	subs	r2, #1
 8008d94:	2300      	movs	r3, #0
 8008d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d9a:	f7ff fe9b 	bl	8008ad4 <__multadd>
 8008d9e:	4607      	mov	r7, r0
 8008da0:	10ad      	asrs	r5, r5, #2
 8008da2:	d03d      	beq.n	8008e20 <__pow5mult+0xa0>
 8008da4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008da6:	b97c      	cbnz	r4, 8008dc8 <__pow5mult+0x48>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7ff fe1b 	bl	80089e4 <malloc>
 8008dae:	4602      	mov	r2, r0
 8008db0:	6270      	str	r0, [r6, #36]	; 0x24
 8008db2:	b928      	cbnz	r0, 8008dc0 <__pow5mult+0x40>
 8008db4:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <__pow5mult+0xac>)
 8008db6:	481e      	ldr	r0, [pc, #120]	; (8008e30 <__pow5mult+0xb0>)
 8008db8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008dbc:	f000 fc0e 	bl	80095dc <__assert_func>
 8008dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dc4:	6004      	str	r4, [r0, #0]
 8008dc6:	60c4      	str	r4, [r0, #12]
 8008dc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dd0:	b94c      	cbnz	r4, 8008de6 <__pow5mult+0x66>
 8008dd2:	f240 2171 	movw	r1, #625	; 0x271
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff ff12 	bl	8008c00 <__i2b>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008de2:	4604      	mov	r4, r0
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 0900 	mov.w	r9, #0
 8008dea:	07eb      	lsls	r3, r5, #31
 8008dec:	d50a      	bpl.n	8008e04 <__pow5mult+0x84>
 8008dee:	4639      	mov	r1, r7
 8008df0:	4622      	mov	r2, r4
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ff1a 	bl	8008c2c <__multiply>
 8008df8:	4639      	mov	r1, r7
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff fe47 	bl	8008a90 <_Bfree>
 8008e02:	4647      	mov	r7, r8
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	d00b      	beq.n	8008e20 <__pow5mult+0xa0>
 8008e08:	6820      	ldr	r0, [r4, #0]
 8008e0a:	b938      	cbnz	r0, 8008e1c <__pow5mult+0x9c>
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff ff0b 	bl	8008c2c <__multiply>
 8008e16:	6020      	str	r0, [r4, #0]
 8008e18:	f8c0 9000 	str.w	r9, [r0]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e7e4      	b.n	8008dea <__pow5mult+0x6a>
 8008e20:	4638      	mov	r0, r7
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	bf00      	nop
 8008e28:	0800a6f8 	.word	0x0800a6f8
 8008e2c:	0800a529 	.word	0x0800a529
 8008e30:	0800a5ac 	.word	0x0800a5ac

08008e34 <__lshift>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	460c      	mov	r4, r1
 8008e3a:	6849      	ldr	r1, [r1, #4]
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	4607      	mov	r7, r0
 8008e46:	4691      	mov	r9, r2
 8008e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e4c:	f108 0601 	add.w	r6, r8, #1
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	db0b      	blt.n	8008e6c <__lshift+0x38>
 8008e54:	4638      	mov	r0, r7
 8008e56:	f7ff fddb 	bl	8008a10 <_Balloc>
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	b948      	cbnz	r0, 8008e72 <__lshift+0x3e>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <__lshift+0xd8>)
 8008e62:	482b      	ldr	r0, [pc, #172]	; (8008f10 <__lshift+0xdc>)
 8008e64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e68:	f000 fbb8 	bl	80095dc <__assert_func>
 8008e6c:	3101      	adds	r1, #1
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	e7ee      	b.n	8008e50 <__lshift+0x1c>
 8008e72:	2300      	movs	r3, #0
 8008e74:	f100 0114 	add.w	r1, r0, #20
 8008e78:	f100 0210 	add.w	r2, r0, #16
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	4553      	cmp	r3, sl
 8008e80:	db37      	blt.n	8008ef2 <__lshift+0xbe>
 8008e82:	6920      	ldr	r0, [r4, #16]
 8008e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e88:	f104 0314 	add.w	r3, r4, #20
 8008e8c:	f019 091f 	ands.w	r9, r9, #31
 8008e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e98:	d02f      	beq.n	8008efa <__lshift+0xc6>
 8008e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e9e:	468a      	mov	sl, r1
 8008ea0:	f04f 0c00 	mov.w	ip, #0
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	fa02 f209 	lsl.w	r2, r2, r9
 8008eaa:	ea42 020c 	orr.w	r2, r2, ip
 8008eae:	f84a 2b04 	str.w	r2, [sl], #4
 8008eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ebc:	d8f2      	bhi.n	8008ea4 <__lshift+0x70>
 8008ebe:	1b03      	subs	r3, r0, r4
 8008ec0:	3b15      	subs	r3, #21
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	f104 0215 	add.w	r2, r4, #21
 8008ecc:	4290      	cmp	r0, r2
 8008ece:	bf38      	it	cc
 8008ed0:	2304      	movcc	r3, #4
 8008ed2:	f841 c003 	str.w	ip, [r1, r3]
 8008ed6:	f1bc 0f00 	cmp.w	ip, #0
 8008eda:	d001      	beq.n	8008ee0 <__lshift+0xac>
 8008edc:	f108 0602 	add.w	r6, r8, #2
 8008ee0:	3e01      	subs	r6, #1
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	612e      	str	r6, [r5, #16]
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	f7ff fdd2 	bl	8008a90 <_Bfree>
 8008eec:	4628      	mov	r0, r5
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	e7c1      	b.n	8008e7e <__lshift+0x4a>
 8008efa:	3904      	subs	r1, #4
 8008efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f04:	4298      	cmp	r0, r3
 8008f06:	d8f9      	bhi.n	8008efc <__lshift+0xc8>
 8008f08:	e7ea      	b.n	8008ee0 <__lshift+0xac>
 8008f0a:	bf00      	nop
 8008f0c:	0800a59b 	.word	0x0800a59b
 8008f10:	0800a5ac 	.word	0x0800a5ac

08008f14 <__mcmp>:
 8008f14:	b530      	push	{r4, r5, lr}
 8008f16:	6902      	ldr	r2, [r0, #16]
 8008f18:	690c      	ldr	r4, [r1, #16]
 8008f1a:	1b12      	subs	r2, r2, r4
 8008f1c:	d10e      	bne.n	8008f3c <__mcmp+0x28>
 8008f1e:	f100 0314 	add.w	r3, r0, #20
 8008f22:	3114      	adds	r1, #20
 8008f24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f34:	42a5      	cmp	r5, r4
 8008f36:	d003      	beq.n	8008f40 <__mcmp+0x2c>
 8008f38:	d305      	bcc.n	8008f46 <__mcmp+0x32>
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	bd30      	pop	{r4, r5, pc}
 8008f40:	4283      	cmp	r3, r0
 8008f42:	d3f3      	bcc.n	8008f2c <__mcmp+0x18>
 8008f44:	e7fa      	b.n	8008f3c <__mcmp+0x28>
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	e7f7      	b.n	8008f3c <__mcmp+0x28>

08008f4c <__mdiff>:
 8008f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	460c      	mov	r4, r1
 8008f52:	4606      	mov	r6, r0
 8008f54:	4611      	mov	r1, r2
 8008f56:	4620      	mov	r0, r4
 8008f58:	4690      	mov	r8, r2
 8008f5a:	f7ff ffdb 	bl	8008f14 <__mcmp>
 8008f5e:	1e05      	subs	r5, r0, #0
 8008f60:	d110      	bne.n	8008f84 <__mdiff+0x38>
 8008f62:	4629      	mov	r1, r5
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7ff fd53 	bl	8008a10 <_Balloc>
 8008f6a:	b930      	cbnz	r0, 8008f7a <__mdiff+0x2e>
 8008f6c:	4b3a      	ldr	r3, [pc, #232]	; (8009058 <__mdiff+0x10c>)
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f240 2132 	movw	r1, #562	; 0x232
 8008f74:	4839      	ldr	r0, [pc, #228]	; (800905c <__mdiff+0x110>)
 8008f76:	f000 fb31 	bl	80095dc <__assert_func>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	bfa4      	itt	ge
 8008f86:	4643      	movge	r3, r8
 8008f88:	46a0      	movge	r8, r4
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f90:	bfa6      	itte	ge
 8008f92:	461c      	movge	r4, r3
 8008f94:	2500      	movge	r5, #0
 8008f96:	2501      	movlt	r5, #1
 8008f98:	f7ff fd3a 	bl	8008a10 <_Balloc>
 8008f9c:	b920      	cbnz	r0, 8008fa8 <__mdiff+0x5c>
 8008f9e:	4b2e      	ldr	r3, [pc, #184]	; (8009058 <__mdiff+0x10c>)
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fa6:	e7e5      	b.n	8008f74 <__mdiff+0x28>
 8008fa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fac:	6926      	ldr	r6, [r4, #16]
 8008fae:	60c5      	str	r5, [r0, #12]
 8008fb0:	f104 0914 	add.w	r9, r4, #20
 8008fb4:	f108 0514 	add.w	r5, r8, #20
 8008fb8:	f100 0e14 	add.w	lr, r0, #20
 8008fbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fc4:	f108 0210 	add.w	r2, r8, #16
 8008fc8:	46f2      	mov	sl, lr
 8008fca:	2100      	movs	r1, #0
 8008fcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008fd4:	fa1f f883 	uxth.w	r8, r3
 8008fd8:	fa11 f18b 	uxtah	r1, r1, fp
 8008fdc:	0c1b      	lsrs	r3, r3, #16
 8008fde:	eba1 0808 	sub.w	r8, r1, r8
 8008fe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fe6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fea:	fa1f f888 	uxth.w	r8, r8
 8008fee:	1419      	asrs	r1, r3, #16
 8008ff0:	454e      	cmp	r6, r9
 8008ff2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ff6:	f84a 3b04 	str.w	r3, [sl], #4
 8008ffa:	d8e7      	bhi.n	8008fcc <__mdiff+0x80>
 8008ffc:	1b33      	subs	r3, r6, r4
 8008ffe:	3b15      	subs	r3, #21
 8009000:	f023 0303 	bic.w	r3, r3, #3
 8009004:	3304      	adds	r3, #4
 8009006:	3415      	adds	r4, #21
 8009008:	42a6      	cmp	r6, r4
 800900a:	bf38      	it	cc
 800900c:	2304      	movcc	r3, #4
 800900e:	441d      	add	r5, r3
 8009010:	4473      	add	r3, lr
 8009012:	469e      	mov	lr, r3
 8009014:	462e      	mov	r6, r5
 8009016:	4566      	cmp	r6, ip
 8009018:	d30e      	bcc.n	8009038 <__mdiff+0xec>
 800901a:	f10c 0203 	add.w	r2, ip, #3
 800901e:	1b52      	subs	r2, r2, r5
 8009020:	f022 0203 	bic.w	r2, r2, #3
 8009024:	3d03      	subs	r5, #3
 8009026:	45ac      	cmp	ip, r5
 8009028:	bf38      	it	cc
 800902a:	2200      	movcc	r2, #0
 800902c:	441a      	add	r2, r3
 800902e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009032:	b17b      	cbz	r3, 8009054 <__mdiff+0x108>
 8009034:	6107      	str	r7, [r0, #16]
 8009036:	e7a3      	b.n	8008f80 <__mdiff+0x34>
 8009038:	f856 8b04 	ldr.w	r8, [r6], #4
 800903c:	fa11 f288 	uxtah	r2, r1, r8
 8009040:	1414      	asrs	r4, r2, #16
 8009042:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009046:	b292      	uxth	r2, r2
 8009048:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800904c:	f84e 2b04 	str.w	r2, [lr], #4
 8009050:	1421      	asrs	r1, r4, #16
 8009052:	e7e0      	b.n	8009016 <__mdiff+0xca>
 8009054:	3f01      	subs	r7, #1
 8009056:	e7ea      	b.n	800902e <__mdiff+0xe2>
 8009058:	0800a59b 	.word	0x0800a59b
 800905c:	0800a5ac 	.word	0x0800a5ac

08009060 <__d2b>:
 8009060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009064:	4689      	mov	r9, r1
 8009066:	2101      	movs	r1, #1
 8009068:	ec57 6b10 	vmov	r6, r7, d0
 800906c:	4690      	mov	r8, r2
 800906e:	f7ff fccf 	bl	8008a10 <_Balloc>
 8009072:	4604      	mov	r4, r0
 8009074:	b930      	cbnz	r0, 8009084 <__d2b+0x24>
 8009076:	4602      	mov	r2, r0
 8009078:	4b25      	ldr	r3, [pc, #148]	; (8009110 <__d2b+0xb0>)
 800907a:	4826      	ldr	r0, [pc, #152]	; (8009114 <__d2b+0xb4>)
 800907c:	f240 310a 	movw	r1, #778	; 0x30a
 8009080:	f000 faac 	bl	80095dc <__assert_func>
 8009084:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800908c:	bb35      	cbnz	r5, 80090dc <__d2b+0x7c>
 800908e:	2e00      	cmp	r6, #0
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	d028      	beq.n	80090e6 <__d2b+0x86>
 8009094:	4668      	mov	r0, sp
 8009096:	9600      	str	r6, [sp, #0]
 8009098:	f7ff fd82 	bl	8008ba0 <__lo0bits>
 800909c:	9900      	ldr	r1, [sp, #0]
 800909e:	b300      	cbz	r0, 80090e2 <__d2b+0x82>
 80090a0:	9a01      	ldr	r2, [sp, #4]
 80090a2:	f1c0 0320 	rsb	r3, r0, #32
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	430b      	orrs	r3, r1
 80090ac:	40c2      	lsrs	r2, r0
 80090ae:	6163      	str	r3, [r4, #20]
 80090b0:	9201      	str	r2, [sp, #4]
 80090b2:	9b01      	ldr	r3, [sp, #4]
 80090b4:	61a3      	str	r3, [r4, #24]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bf14      	ite	ne
 80090ba:	2202      	movne	r2, #2
 80090bc:	2201      	moveq	r2, #1
 80090be:	6122      	str	r2, [r4, #16]
 80090c0:	b1d5      	cbz	r5, 80090f8 <__d2b+0x98>
 80090c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090c6:	4405      	add	r5, r0
 80090c8:	f8c9 5000 	str.w	r5, [r9]
 80090cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090d0:	f8c8 0000 	str.w	r0, [r8]
 80090d4:	4620      	mov	r0, r4
 80090d6:	b003      	add	sp, #12
 80090d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e0:	e7d5      	b.n	800908e <__d2b+0x2e>
 80090e2:	6161      	str	r1, [r4, #20]
 80090e4:	e7e5      	b.n	80090b2 <__d2b+0x52>
 80090e6:	a801      	add	r0, sp, #4
 80090e8:	f7ff fd5a 	bl	8008ba0 <__lo0bits>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	6163      	str	r3, [r4, #20]
 80090f0:	2201      	movs	r2, #1
 80090f2:	6122      	str	r2, [r4, #16]
 80090f4:	3020      	adds	r0, #32
 80090f6:	e7e3      	b.n	80090c0 <__d2b+0x60>
 80090f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009100:	f8c9 0000 	str.w	r0, [r9]
 8009104:	6918      	ldr	r0, [r3, #16]
 8009106:	f7ff fd2b 	bl	8008b60 <__hi0bits>
 800910a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800910e:	e7df      	b.n	80090d0 <__d2b+0x70>
 8009110:	0800a59b 	.word	0x0800a59b
 8009114:	0800a5ac 	.word	0x0800a5ac

08009118 <_calloc_r>:
 8009118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800911a:	fba1 2402 	umull	r2, r4, r1, r2
 800911e:	b94c      	cbnz	r4, 8009134 <_calloc_r+0x1c>
 8009120:	4611      	mov	r1, r2
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	f000 f87a 	bl	800921c <_malloc_r>
 8009128:	9a01      	ldr	r2, [sp, #4]
 800912a:	4605      	mov	r5, r0
 800912c:	b930      	cbnz	r0, 800913c <_calloc_r+0x24>
 800912e:	4628      	mov	r0, r5
 8009130:	b003      	add	sp, #12
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	220c      	movs	r2, #12
 8009136:	6002      	str	r2, [r0, #0]
 8009138:	2500      	movs	r5, #0
 800913a:	e7f8      	b.n	800912e <_calloc_r+0x16>
 800913c:	4621      	mov	r1, r4
 800913e:	f7fe f941 	bl	80073c4 <memset>
 8009142:	e7f4      	b.n	800912e <_calloc_r+0x16>

08009144 <_free_r>:
 8009144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009146:	2900      	cmp	r1, #0
 8009148:	d044      	beq.n	80091d4 <_free_r+0x90>
 800914a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914e:	9001      	str	r0, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f1a1 0404 	sub.w	r4, r1, #4
 8009156:	bfb8      	it	lt
 8009158:	18e4      	addlt	r4, r4, r3
 800915a:	f000 fa9b 	bl	8009694 <__malloc_lock>
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <_free_r+0x94>)
 8009160:	9801      	ldr	r0, [sp, #4]
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	b933      	cbnz	r3, 8009174 <_free_r+0x30>
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	6014      	str	r4, [r2, #0]
 800916a:	b003      	add	sp, #12
 800916c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009170:	f000 ba96 	b.w	80096a0 <__malloc_unlock>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d908      	bls.n	800918a <_free_r+0x46>
 8009178:	6825      	ldr	r5, [r4, #0]
 800917a:	1961      	adds	r1, r4, r5
 800917c:	428b      	cmp	r3, r1
 800917e:	bf01      	itttt	eq
 8009180:	6819      	ldreq	r1, [r3, #0]
 8009182:	685b      	ldreq	r3, [r3, #4]
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	e7ed      	b.n	8009166 <_free_r+0x22>
 800918a:	461a      	mov	r2, r3
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	b10b      	cbz	r3, 8009194 <_free_r+0x50>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d9fa      	bls.n	800918a <_free_r+0x46>
 8009194:	6811      	ldr	r1, [r2, #0]
 8009196:	1855      	adds	r5, r2, r1
 8009198:	42a5      	cmp	r5, r4
 800919a:	d10b      	bne.n	80091b4 <_free_r+0x70>
 800919c:	6824      	ldr	r4, [r4, #0]
 800919e:	4421      	add	r1, r4
 80091a0:	1854      	adds	r4, r2, r1
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	6011      	str	r1, [r2, #0]
 80091a6:	d1e0      	bne.n	800916a <_free_r+0x26>
 80091a8:	681c      	ldr	r4, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	6053      	str	r3, [r2, #4]
 80091ae:	4421      	add	r1, r4
 80091b0:	6011      	str	r1, [r2, #0]
 80091b2:	e7da      	b.n	800916a <_free_r+0x26>
 80091b4:	d902      	bls.n	80091bc <_free_r+0x78>
 80091b6:	230c      	movs	r3, #12
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	e7d6      	b.n	800916a <_free_r+0x26>
 80091bc:	6825      	ldr	r5, [r4, #0]
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf04      	itt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	bf04      	itt	eq
 80091cc:	1949      	addeq	r1, r1, r5
 80091ce:	6021      	streq	r1, [r4, #0]
 80091d0:	6054      	str	r4, [r2, #4]
 80091d2:	e7ca      	b.n	800916a <_free_r+0x26>
 80091d4:	b003      	add	sp, #12
 80091d6:	bd30      	pop	{r4, r5, pc}
 80091d8:	20000568 	.word	0x20000568

080091dc <sbrk_aligned>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4e0e      	ldr	r6, [pc, #56]	; (8009218 <sbrk_aligned+0x3c>)
 80091e0:	460c      	mov	r4, r1
 80091e2:	6831      	ldr	r1, [r6, #0]
 80091e4:	4605      	mov	r5, r0
 80091e6:	b911      	cbnz	r1, 80091ee <sbrk_aligned+0x12>
 80091e8:	f000 f9e8 	bl	80095bc <_sbrk_r>
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 f9e3 	bl	80095bc <_sbrk_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d00a      	beq.n	8009210 <sbrk_aligned+0x34>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d007      	beq.n	8009214 <sbrk_aligned+0x38>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f9d8 	bl	80095bc <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d101      	bne.n	8009214 <sbrk_aligned+0x38>
 8009210:	f04f 34ff 	mov.w	r4, #4294967295
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	2000056c 	.word	0x2000056c

0800921c <_malloc_r>:
 800921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009220:	1ccd      	adds	r5, r1, #3
 8009222:	f025 0503 	bic.w	r5, r5, #3
 8009226:	3508      	adds	r5, #8
 8009228:	2d0c      	cmp	r5, #12
 800922a:	bf38      	it	cc
 800922c:	250c      	movcc	r5, #12
 800922e:	2d00      	cmp	r5, #0
 8009230:	4607      	mov	r7, r0
 8009232:	db01      	blt.n	8009238 <_malloc_r+0x1c>
 8009234:	42a9      	cmp	r1, r5
 8009236:	d905      	bls.n	8009244 <_malloc_r+0x28>
 8009238:	230c      	movs	r3, #12
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	2600      	movs	r6, #0
 800923e:	4630      	mov	r0, r6
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	4e2e      	ldr	r6, [pc, #184]	; (8009300 <_malloc_r+0xe4>)
 8009246:	f000 fa25 	bl	8009694 <__malloc_lock>
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	461c      	mov	r4, r3
 800924e:	bb34      	cbnz	r4, 800929e <_malloc_r+0x82>
 8009250:	4629      	mov	r1, r5
 8009252:	4638      	mov	r0, r7
 8009254:	f7ff ffc2 	bl	80091dc <sbrk_aligned>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	4604      	mov	r4, r0
 800925c:	d14d      	bne.n	80092fa <_malloc_r+0xde>
 800925e:	6834      	ldr	r4, [r6, #0]
 8009260:	4626      	mov	r6, r4
 8009262:	2e00      	cmp	r6, #0
 8009264:	d140      	bne.n	80092e8 <_malloc_r+0xcc>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	4631      	mov	r1, r6
 800926a:	4638      	mov	r0, r7
 800926c:	eb04 0803 	add.w	r8, r4, r3
 8009270:	f000 f9a4 	bl	80095bc <_sbrk_r>
 8009274:	4580      	cmp	r8, r0
 8009276:	d13a      	bne.n	80092ee <_malloc_r+0xd2>
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	3503      	adds	r5, #3
 800927c:	1a6d      	subs	r5, r5, r1
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	4629      	mov	r1, r5
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ffa5 	bl	80091dc <sbrk_aligned>
 8009292:	3001      	adds	r0, #1
 8009294:	d02b      	beq.n	80092ee <_malloc_r+0xd2>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	442b      	add	r3, r5
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	e00e      	b.n	80092bc <_malloc_r+0xa0>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	1b52      	subs	r2, r2, r5
 80092a2:	d41e      	bmi.n	80092e2 <_malloc_r+0xc6>
 80092a4:	2a0b      	cmp	r2, #11
 80092a6:	d916      	bls.n	80092d6 <_malloc_r+0xba>
 80092a8:	1961      	adds	r1, r4, r5
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	6025      	str	r5, [r4, #0]
 80092ae:	bf18      	it	ne
 80092b0:	6059      	strne	r1, [r3, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	bf08      	it	eq
 80092b6:	6031      	streq	r1, [r6, #0]
 80092b8:	5162      	str	r2, [r4, r5]
 80092ba:	604b      	str	r3, [r1, #4]
 80092bc:	4638      	mov	r0, r7
 80092be:	f104 060b 	add.w	r6, r4, #11
 80092c2:	f000 f9ed 	bl	80096a0 <__malloc_unlock>
 80092c6:	f026 0607 	bic.w	r6, r6, #7
 80092ca:	1d23      	adds	r3, r4, #4
 80092cc:	1af2      	subs	r2, r6, r3
 80092ce:	d0b6      	beq.n	800923e <_malloc_r+0x22>
 80092d0:	1b9b      	subs	r3, r3, r6
 80092d2:	50a3      	str	r3, [r4, r2]
 80092d4:	e7b3      	b.n	800923e <_malloc_r+0x22>
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	bf0c      	ite	eq
 80092dc:	6032      	streq	r2, [r6, #0]
 80092de:	605a      	strne	r2, [r3, #4]
 80092e0:	e7ec      	b.n	80092bc <_malloc_r+0xa0>
 80092e2:	4623      	mov	r3, r4
 80092e4:	6864      	ldr	r4, [r4, #4]
 80092e6:	e7b2      	b.n	800924e <_malloc_r+0x32>
 80092e8:	4634      	mov	r4, r6
 80092ea:	6876      	ldr	r6, [r6, #4]
 80092ec:	e7b9      	b.n	8009262 <_malloc_r+0x46>
 80092ee:	230c      	movs	r3, #12
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4638      	mov	r0, r7
 80092f4:	f000 f9d4 	bl	80096a0 <__malloc_unlock>
 80092f8:	e7a1      	b.n	800923e <_malloc_r+0x22>
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	e7de      	b.n	80092bc <_malloc_r+0xa0>
 80092fe:	bf00      	nop
 8009300:	20000568 	.word	0x20000568

08009304 <__ssputs_r>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	688e      	ldr	r6, [r1, #8]
 800930a:	429e      	cmp	r6, r3
 800930c:	4682      	mov	sl, r0
 800930e:	460c      	mov	r4, r1
 8009310:	4690      	mov	r8, r2
 8009312:	461f      	mov	r7, r3
 8009314:	d838      	bhi.n	8009388 <__ssputs_r+0x84>
 8009316:	898a      	ldrh	r2, [r1, #12]
 8009318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800931c:	d032      	beq.n	8009384 <__ssputs_r+0x80>
 800931e:	6825      	ldr	r5, [r4, #0]
 8009320:	6909      	ldr	r1, [r1, #16]
 8009322:	eba5 0901 	sub.w	r9, r5, r1
 8009326:	6965      	ldr	r5, [r4, #20]
 8009328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800932c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009330:	3301      	adds	r3, #1
 8009332:	444b      	add	r3, r9
 8009334:	106d      	asrs	r5, r5, #1
 8009336:	429d      	cmp	r5, r3
 8009338:	bf38      	it	cc
 800933a:	461d      	movcc	r5, r3
 800933c:	0553      	lsls	r3, r2, #21
 800933e:	d531      	bpl.n	80093a4 <__ssputs_r+0xa0>
 8009340:	4629      	mov	r1, r5
 8009342:	f7ff ff6b 	bl	800921c <_malloc_r>
 8009346:	4606      	mov	r6, r0
 8009348:	b950      	cbnz	r0, 8009360 <__ssputs_r+0x5c>
 800934a:	230c      	movs	r3, #12
 800934c:	f8ca 3000 	str.w	r3, [sl]
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	6921      	ldr	r1, [r4, #16]
 8009362:	464a      	mov	r2, r9
 8009364:	f7ff fb46 	bl	80089f4 <memcpy>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800936e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	6126      	str	r6, [r4, #16]
 8009376:	6165      	str	r5, [r4, #20]
 8009378:	444e      	add	r6, r9
 800937a:	eba5 0509 	sub.w	r5, r5, r9
 800937e:	6026      	str	r6, [r4, #0]
 8009380:	60a5      	str	r5, [r4, #8]
 8009382:	463e      	mov	r6, r7
 8009384:	42be      	cmp	r6, r7
 8009386:	d900      	bls.n	800938a <__ssputs_r+0x86>
 8009388:	463e      	mov	r6, r7
 800938a:	6820      	ldr	r0, [r4, #0]
 800938c:	4632      	mov	r2, r6
 800938e:	4641      	mov	r1, r8
 8009390:	f000 f966 	bl	8009660 <memmove>
 8009394:	68a3      	ldr	r3, [r4, #8]
 8009396:	1b9b      	subs	r3, r3, r6
 8009398:	60a3      	str	r3, [r4, #8]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	4433      	add	r3, r6
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7db      	b.n	800935c <__ssputs_r+0x58>
 80093a4:	462a      	mov	r2, r5
 80093a6:	f000 f981 	bl	80096ac <_realloc_r>
 80093aa:	4606      	mov	r6, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1e1      	bne.n	8009374 <__ssputs_r+0x70>
 80093b0:	6921      	ldr	r1, [r4, #16]
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7ff fec6 	bl	8009144 <_free_r>
 80093b8:	e7c7      	b.n	800934a <__ssputs_r+0x46>
	...

080093bc <_svfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	4698      	mov	r8, r3
 80093c2:	898b      	ldrh	r3, [r1, #12]
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	b09d      	sub	sp, #116	; 0x74
 80093c8:	4607      	mov	r7, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	d50e      	bpl.n	80093ee <_svfiprintf_r+0x32>
 80093d0:	690b      	ldr	r3, [r1, #16]
 80093d2:	b963      	cbnz	r3, 80093ee <_svfiprintf_r+0x32>
 80093d4:	2140      	movs	r1, #64	; 0x40
 80093d6:	f7ff ff21 	bl	800921c <_malloc_r>
 80093da:	6028      	str	r0, [r5, #0]
 80093dc:	6128      	str	r0, [r5, #16]
 80093de:	b920      	cbnz	r0, 80093ea <_svfiprintf_r+0x2e>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	e0d1      	b.n	800958e <_svfiprintf_r+0x1d2>
 80093ea:	2340      	movs	r3, #64	; 0x40
 80093ec:	616b      	str	r3, [r5, #20]
 80093ee:	2300      	movs	r3, #0
 80093f0:	9309      	str	r3, [sp, #36]	; 0x24
 80093f2:	2320      	movs	r3, #32
 80093f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093fc:	2330      	movs	r3, #48	; 0x30
 80093fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095a8 <_svfiprintf_r+0x1ec>
 8009402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009406:	f04f 0901 	mov.w	r9, #1
 800940a:	4623      	mov	r3, r4
 800940c:	469a      	mov	sl, r3
 800940e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009412:	b10a      	cbz	r2, 8009418 <_svfiprintf_r+0x5c>
 8009414:	2a25      	cmp	r2, #37	; 0x25
 8009416:	d1f9      	bne.n	800940c <_svfiprintf_r+0x50>
 8009418:	ebba 0b04 	subs.w	fp, sl, r4
 800941c:	d00b      	beq.n	8009436 <_svfiprintf_r+0x7a>
 800941e:	465b      	mov	r3, fp
 8009420:	4622      	mov	r2, r4
 8009422:	4629      	mov	r1, r5
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff ff6d 	bl	8009304 <__ssputs_r>
 800942a:	3001      	adds	r0, #1
 800942c:	f000 80aa 	beq.w	8009584 <_svfiprintf_r+0x1c8>
 8009430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009432:	445a      	add	r2, fp
 8009434:	9209      	str	r2, [sp, #36]	; 0x24
 8009436:	f89a 3000 	ldrb.w	r3, [sl]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80a2 	beq.w	8009584 <_svfiprintf_r+0x1c8>
 8009440:	2300      	movs	r3, #0
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800944a:	f10a 0a01 	add.w	sl, sl, #1
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009456:	931a      	str	r3, [sp, #104]	; 0x68
 8009458:	4654      	mov	r4, sl
 800945a:	2205      	movs	r2, #5
 800945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009460:	4851      	ldr	r0, [pc, #324]	; (80095a8 <_svfiprintf_r+0x1ec>)
 8009462:	f7f6 fec5 	bl	80001f0 <memchr>
 8009466:	9a04      	ldr	r2, [sp, #16]
 8009468:	b9d8      	cbnz	r0, 80094a2 <_svfiprintf_r+0xe6>
 800946a:	06d0      	lsls	r0, r2, #27
 800946c:	bf44      	itt	mi
 800946e:	2320      	movmi	r3, #32
 8009470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009474:	0711      	lsls	r1, r2, #28
 8009476:	bf44      	itt	mi
 8009478:	232b      	movmi	r3, #43	; 0x2b
 800947a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947e:	f89a 3000 	ldrb.w	r3, [sl]
 8009482:	2b2a      	cmp	r3, #42	; 0x2a
 8009484:	d015      	beq.n	80094b2 <_svfiprintf_r+0xf6>
 8009486:	9a07      	ldr	r2, [sp, #28]
 8009488:	4654      	mov	r4, sl
 800948a:	2000      	movs	r0, #0
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4621      	mov	r1, r4
 8009492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009496:	3b30      	subs	r3, #48	; 0x30
 8009498:	2b09      	cmp	r3, #9
 800949a:	d94e      	bls.n	800953a <_svfiprintf_r+0x17e>
 800949c:	b1b0      	cbz	r0, 80094cc <_svfiprintf_r+0x110>
 800949e:	9207      	str	r2, [sp, #28]
 80094a0:	e014      	b.n	80094cc <_svfiprintf_r+0x110>
 80094a2:	eba0 0308 	sub.w	r3, r0, r8
 80094a6:	fa09 f303 	lsl.w	r3, r9, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	46a2      	mov	sl, r4
 80094b0:	e7d2      	b.n	8009458 <_svfiprintf_r+0x9c>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	1d19      	adds	r1, r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	9103      	str	r1, [sp, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfbb      	ittet	lt
 80094be:	425b      	neglt	r3, r3
 80094c0:	f042 0202 	orrlt.w	r2, r2, #2
 80094c4:	9307      	strge	r3, [sp, #28]
 80094c6:	9307      	strlt	r3, [sp, #28]
 80094c8:	bfb8      	it	lt
 80094ca:	9204      	strlt	r2, [sp, #16]
 80094cc:	7823      	ldrb	r3, [r4, #0]
 80094ce:	2b2e      	cmp	r3, #46	; 0x2e
 80094d0:	d10c      	bne.n	80094ec <_svfiprintf_r+0x130>
 80094d2:	7863      	ldrb	r3, [r4, #1]
 80094d4:	2b2a      	cmp	r3, #42	; 0x2a
 80094d6:	d135      	bne.n	8009544 <_svfiprintf_r+0x188>
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9203      	str	r2, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfb8      	it	lt
 80094e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e8:	3402      	adds	r4, #2
 80094ea:	9305      	str	r3, [sp, #20]
 80094ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095b8 <_svfiprintf_r+0x1fc>
 80094f0:	7821      	ldrb	r1, [r4, #0]
 80094f2:	2203      	movs	r2, #3
 80094f4:	4650      	mov	r0, sl
 80094f6:	f7f6 fe7b 	bl	80001f0 <memchr>
 80094fa:	b140      	cbz	r0, 800950e <_svfiprintf_r+0x152>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	eba0 000a 	sub.w	r0, r0, sl
 8009502:	fa03 f000 	lsl.w	r0, r3, r0
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	4303      	orrs	r3, r0
 800950a:	3401      	adds	r4, #1
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009512:	4826      	ldr	r0, [pc, #152]	; (80095ac <_svfiprintf_r+0x1f0>)
 8009514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009518:	2206      	movs	r2, #6
 800951a:	f7f6 fe69 	bl	80001f0 <memchr>
 800951e:	2800      	cmp	r0, #0
 8009520:	d038      	beq.n	8009594 <_svfiprintf_r+0x1d8>
 8009522:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <_svfiprintf_r+0x1f4>)
 8009524:	bb1b      	cbnz	r3, 800956e <_svfiprintf_r+0x1b2>
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	3307      	adds	r3, #7
 800952a:	f023 0307 	bic.w	r3, r3, #7
 800952e:	3308      	adds	r3, #8
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	4433      	add	r3, r6
 8009536:	9309      	str	r3, [sp, #36]	; 0x24
 8009538:	e767      	b.n	800940a <_svfiprintf_r+0x4e>
 800953a:	fb0c 3202 	mla	r2, ip, r2, r3
 800953e:	460c      	mov	r4, r1
 8009540:	2001      	movs	r0, #1
 8009542:	e7a5      	b.n	8009490 <_svfiprintf_r+0xd4>
 8009544:	2300      	movs	r3, #0
 8009546:	3401      	adds	r4, #1
 8009548:	9305      	str	r3, [sp, #20]
 800954a:	4619      	mov	r1, r3
 800954c:	f04f 0c0a 	mov.w	ip, #10
 8009550:	4620      	mov	r0, r4
 8009552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009556:	3a30      	subs	r2, #48	; 0x30
 8009558:	2a09      	cmp	r2, #9
 800955a:	d903      	bls.n	8009564 <_svfiprintf_r+0x1a8>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0c5      	beq.n	80094ec <_svfiprintf_r+0x130>
 8009560:	9105      	str	r1, [sp, #20]
 8009562:	e7c3      	b.n	80094ec <_svfiprintf_r+0x130>
 8009564:	fb0c 2101 	mla	r1, ip, r1, r2
 8009568:	4604      	mov	r4, r0
 800956a:	2301      	movs	r3, #1
 800956c:	e7f0      	b.n	8009550 <_svfiprintf_r+0x194>
 800956e:	ab03      	add	r3, sp, #12
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	462a      	mov	r2, r5
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <_svfiprintf_r+0x1f8>)
 8009576:	a904      	add	r1, sp, #16
 8009578:	4638      	mov	r0, r7
 800957a:	f7fd ffcb 	bl	8007514 <_printf_float>
 800957e:	1c42      	adds	r2, r0, #1
 8009580:	4606      	mov	r6, r0
 8009582:	d1d6      	bne.n	8009532 <_svfiprintf_r+0x176>
 8009584:	89ab      	ldrh	r3, [r5, #12]
 8009586:	065b      	lsls	r3, r3, #25
 8009588:	f53f af2c 	bmi.w	80093e4 <_svfiprintf_r+0x28>
 800958c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800958e:	b01d      	add	sp, #116	; 0x74
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <_svfiprintf_r+0x1f8>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4638      	mov	r0, r7
 80095a0:	f7fe fa5c 	bl	8007a5c <_printf_i>
 80095a4:	e7eb      	b.n	800957e <_svfiprintf_r+0x1c2>
 80095a6:	bf00      	nop
 80095a8:	0800a704 	.word	0x0800a704
 80095ac:	0800a70e 	.word	0x0800a70e
 80095b0:	08007515 	.word	0x08007515
 80095b4:	08009305 	.word	0x08009305
 80095b8:	0800a70a 	.word	0x0800a70a

080095bc <_sbrk_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_sbrk_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7fa fac8 	bl	8003b5c <_sbrk>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_sbrk_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_sbrk_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20000570 	.word	0x20000570

080095dc <__assert_func>:
 80095dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095de:	4614      	mov	r4, r2
 80095e0:	461a      	mov	r2, r3
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <__assert_func+0x2c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4605      	mov	r5, r0
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	b14c      	cbz	r4, 8009600 <__assert_func+0x24>
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <__assert_func+0x30>)
 80095ee:	9100      	str	r1, [sp, #0]
 80095f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095f4:	4906      	ldr	r1, [pc, #24]	; (8009610 <__assert_func+0x34>)
 80095f6:	462b      	mov	r3, r5
 80095f8:	f000 f80e 	bl	8009618 <fiprintf>
 80095fc:	f000 faac 	bl	8009b58 <abort>
 8009600:	4b04      	ldr	r3, [pc, #16]	; (8009614 <__assert_func+0x38>)
 8009602:	461c      	mov	r4, r3
 8009604:	e7f3      	b.n	80095ee <__assert_func+0x12>
 8009606:	bf00      	nop
 8009608:	20000024 	.word	0x20000024
 800960c:	0800a715 	.word	0x0800a715
 8009610:	0800a722 	.word	0x0800a722
 8009614:	0800a750 	.word	0x0800a750

08009618 <fiprintf>:
 8009618:	b40e      	push	{r1, r2, r3}
 800961a:	b503      	push	{r0, r1, lr}
 800961c:	4601      	mov	r1, r0
 800961e:	ab03      	add	r3, sp, #12
 8009620:	4805      	ldr	r0, [pc, #20]	; (8009638 <fiprintf+0x20>)
 8009622:	f853 2b04 	ldr.w	r2, [r3], #4
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f000 f897 	bl	800975c <_vfiprintf_r>
 800962e:	b002      	add	sp, #8
 8009630:	f85d eb04 	ldr.w	lr, [sp], #4
 8009634:	b003      	add	sp, #12
 8009636:	4770      	bx	lr
 8009638:	20000024 	.word	0x20000024

0800963c <__ascii_mbtowc>:
 800963c:	b082      	sub	sp, #8
 800963e:	b901      	cbnz	r1, 8009642 <__ascii_mbtowc+0x6>
 8009640:	a901      	add	r1, sp, #4
 8009642:	b142      	cbz	r2, 8009656 <__ascii_mbtowc+0x1a>
 8009644:	b14b      	cbz	r3, 800965a <__ascii_mbtowc+0x1e>
 8009646:	7813      	ldrb	r3, [r2, #0]
 8009648:	600b      	str	r3, [r1, #0]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	1e10      	subs	r0, r2, #0
 800964e:	bf18      	it	ne
 8009650:	2001      	movne	r0, #1
 8009652:	b002      	add	sp, #8
 8009654:	4770      	bx	lr
 8009656:	4610      	mov	r0, r2
 8009658:	e7fb      	b.n	8009652 <__ascii_mbtowc+0x16>
 800965a:	f06f 0001 	mvn.w	r0, #1
 800965e:	e7f8      	b.n	8009652 <__ascii_mbtowc+0x16>

08009660 <memmove>:
 8009660:	4288      	cmp	r0, r1
 8009662:	b510      	push	{r4, lr}
 8009664:	eb01 0402 	add.w	r4, r1, r2
 8009668:	d902      	bls.n	8009670 <memmove+0x10>
 800966a:	4284      	cmp	r4, r0
 800966c:	4623      	mov	r3, r4
 800966e:	d807      	bhi.n	8009680 <memmove+0x20>
 8009670:	1e43      	subs	r3, r0, #1
 8009672:	42a1      	cmp	r1, r4
 8009674:	d008      	beq.n	8009688 <memmove+0x28>
 8009676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800967a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800967e:	e7f8      	b.n	8009672 <memmove+0x12>
 8009680:	4402      	add	r2, r0
 8009682:	4601      	mov	r1, r0
 8009684:	428a      	cmp	r2, r1
 8009686:	d100      	bne.n	800968a <memmove+0x2a>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009692:	e7f7      	b.n	8009684 <memmove+0x24>

08009694 <__malloc_lock>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__malloc_lock+0x8>)
 8009696:	f000 bc1f 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 800969a:	bf00      	nop
 800969c:	20000574 	.word	0x20000574

080096a0 <__malloc_unlock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_unlock+0x8>)
 80096a2:	f000 bc1a 	b.w	8009eda <__retarget_lock_release_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000574 	.word	0x20000574

080096ac <_realloc_r>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	4680      	mov	r8, r0
 80096b2:	4614      	mov	r4, r2
 80096b4:	460e      	mov	r6, r1
 80096b6:	b921      	cbnz	r1, 80096c2 <_realloc_r+0x16>
 80096b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	4611      	mov	r1, r2
 80096be:	f7ff bdad 	b.w	800921c <_malloc_r>
 80096c2:	b92a      	cbnz	r2, 80096d0 <_realloc_r+0x24>
 80096c4:	f7ff fd3e 	bl	8009144 <_free_r>
 80096c8:	4625      	mov	r5, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	f000 fc6a 	bl	8009fa8 <_malloc_usable_size_r>
 80096d4:	4284      	cmp	r4, r0
 80096d6:	4607      	mov	r7, r0
 80096d8:	d802      	bhi.n	80096e0 <_realloc_r+0x34>
 80096da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096de:	d812      	bhi.n	8009706 <_realloc_r+0x5a>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4640      	mov	r0, r8
 80096e4:	f7ff fd9a 	bl	800921c <_malloc_r>
 80096e8:	4605      	mov	r5, r0
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d0ed      	beq.n	80096ca <_realloc_r+0x1e>
 80096ee:	42bc      	cmp	r4, r7
 80096f0:	4622      	mov	r2, r4
 80096f2:	4631      	mov	r1, r6
 80096f4:	bf28      	it	cs
 80096f6:	463a      	movcs	r2, r7
 80096f8:	f7ff f97c 	bl	80089f4 <memcpy>
 80096fc:	4631      	mov	r1, r6
 80096fe:	4640      	mov	r0, r8
 8009700:	f7ff fd20 	bl	8009144 <_free_r>
 8009704:	e7e1      	b.n	80096ca <_realloc_r+0x1e>
 8009706:	4635      	mov	r5, r6
 8009708:	e7df      	b.n	80096ca <_realloc_r+0x1e>

0800970a <__sfputc_r>:
 800970a:	6893      	ldr	r3, [r2, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	b410      	push	{r4}
 8009712:	6093      	str	r3, [r2, #8]
 8009714:	da08      	bge.n	8009728 <__sfputc_r+0x1e>
 8009716:	6994      	ldr	r4, [r2, #24]
 8009718:	42a3      	cmp	r3, r4
 800971a:	db01      	blt.n	8009720 <__sfputc_r+0x16>
 800971c:	290a      	cmp	r1, #10
 800971e:	d103      	bne.n	8009728 <__sfputc_r+0x1e>
 8009720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009724:	f000 b94a 	b.w	80099bc <__swbuf_r>
 8009728:	6813      	ldr	r3, [r2, #0]
 800972a:	1c58      	adds	r0, r3, #1
 800972c:	6010      	str	r0, [r2, #0]
 800972e:	7019      	strb	r1, [r3, #0]
 8009730:	4608      	mov	r0, r1
 8009732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009736:	4770      	bx	lr

08009738 <__sfputs_r>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	4606      	mov	r6, r0
 800973c:	460f      	mov	r7, r1
 800973e:	4614      	mov	r4, r2
 8009740:	18d5      	adds	r5, r2, r3
 8009742:	42ac      	cmp	r4, r5
 8009744:	d101      	bne.n	800974a <__sfputs_r+0x12>
 8009746:	2000      	movs	r0, #0
 8009748:	e007      	b.n	800975a <__sfputs_r+0x22>
 800974a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974e:	463a      	mov	r2, r7
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ffda 	bl	800970a <__sfputc_r>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d1f3      	bne.n	8009742 <__sfputs_r+0xa>
 800975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800975c <_vfiprintf_r>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	460d      	mov	r5, r1
 8009762:	b09d      	sub	sp, #116	; 0x74
 8009764:	4614      	mov	r4, r2
 8009766:	4698      	mov	r8, r3
 8009768:	4606      	mov	r6, r0
 800976a:	b118      	cbz	r0, 8009774 <_vfiprintf_r+0x18>
 800976c:	6983      	ldr	r3, [r0, #24]
 800976e:	b90b      	cbnz	r3, 8009774 <_vfiprintf_r+0x18>
 8009770:	f000 fb14 	bl	8009d9c <__sinit>
 8009774:	4b89      	ldr	r3, [pc, #548]	; (800999c <_vfiprintf_r+0x240>)
 8009776:	429d      	cmp	r5, r3
 8009778:	d11b      	bne.n	80097b2 <_vfiprintf_r+0x56>
 800977a:	6875      	ldr	r5, [r6, #4]
 800977c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x32>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x32>
 8009788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978a:	f000 fba5 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	071b      	lsls	r3, r3, #28
 8009792:	d501      	bpl.n	8009798 <_vfiprintf_r+0x3c>
 8009794:	692b      	ldr	r3, [r5, #16]
 8009796:	b9eb      	cbnz	r3, 80097d4 <_vfiprintf_r+0x78>
 8009798:	4629      	mov	r1, r5
 800979a:	4630      	mov	r0, r6
 800979c:	f000 f96e 	bl	8009a7c <__swsetup_r>
 80097a0:	b1c0      	cbz	r0, 80097d4 <_vfiprintf_r+0x78>
 80097a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a4:	07dc      	lsls	r4, r3, #31
 80097a6:	d50e      	bpl.n	80097c6 <_vfiprintf_r+0x6a>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b01d      	add	sp, #116	; 0x74
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	4b7b      	ldr	r3, [pc, #492]	; (80099a0 <_vfiprintf_r+0x244>)
 80097b4:	429d      	cmp	r5, r3
 80097b6:	d101      	bne.n	80097bc <_vfiprintf_r+0x60>
 80097b8:	68b5      	ldr	r5, [r6, #8]
 80097ba:	e7df      	b.n	800977c <_vfiprintf_r+0x20>
 80097bc:	4b79      	ldr	r3, [pc, #484]	; (80099a4 <_vfiprintf_r+0x248>)
 80097be:	429d      	cmp	r5, r3
 80097c0:	bf08      	it	eq
 80097c2:	68f5      	ldreq	r5, [r6, #12]
 80097c4:	e7da      	b.n	800977c <_vfiprintf_r+0x20>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	0598      	lsls	r0, r3, #22
 80097ca:	d4ed      	bmi.n	80097a8 <_vfiprintf_r+0x4c>
 80097cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ce:	f000 fb84 	bl	8009eda <__retarget_lock_release_recursive>
 80097d2:	e7e9      	b.n	80097a8 <_vfiprintf_r+0x4c>
 80097d4:	2300      	movs	r3, #0
 80097d6:	9309      	str	r3, [sp, #36]	; 0x24
 80097d8:	2320      	movs	r3, #32
 80097da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097de:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e2:	2330      	movs	r3, #48	; 0x30
 80097e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099a8 <_vfiprintf_r+0x24c>
 80097e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097ec:	f04f 0901 	mov.w	r9, #1
 80097f0:	4623      	mov	r3, r4
 80097f2:	469a      	mov	sl, r3
 80097f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f8:	b10a      	cbz	r2, 80097fe <_vfiprintf_r+0xa2>
 80097fa:	2a25      	cmp	r2, #37	; 0x25
 80097fc:	d1f9      	bne.n	80097f2 <_vfiprintf_r+0x96>
 80097fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009802:	d00b      	beq.n	800981c <_vfiprintf_r+0xc0>
 8009804:	465b      	mov	r3, fp
 8009806:	4622      	mov	r2, r4
 8009808:	4629      	mov	r1, r5
 800980a:	4630      	mov	r0, r6
 800980c:	f7ff ff94 	bl	8009738 <__sfputs_r>
 8009810:	3001      	adds	r0, #1
 8009812:	f000 80aa 	beq.w	800996a <_vfiprintf_r+0x20e>
 8009816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009818:	445a      	add	r2, fp
 800981a:	9209      	str	r2, [sp, #36]	; 0x24
 800981c:	f89a 3000 	ldrb.w	r3, [sl]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 80a2 	beq.w	800996a <_vfiprintf_r+0x20e>
 8009826:	2300      	movs	r3, #0
 8009828:	f04f 32ff 	mov.w	r2, #4294967295
 800982c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009830:	f10a 0a01 	add.w	sl, sl, #1
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800983c:	931a      	str	r3, [sp, #104]	; 0x68
 800983e:	4654      	mov	r4, sl
 8009840:	2205      	movs	r2, #5
 8009842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009846:	4858      	ldr	r0, [pc, #352]	; (80099a8 <_vfiprintf_r+0x24c>)
 8009848:	f7f6 fcd2 	bl	80001f0 <memchr>
 800984c:	9a04      	ldr	r2, [sp, #16]
 800984e:	b9d8      	cbnz	r0, 8009888 <_vfiprintf_r+0x12c>
 8009850:	06d1      	lsls	r1, r2, #27
 8009852:	bf44      	itt	mi
 8009854:	2320      	movmi	r3, #32
 8009856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985a:	0713      	lsls	r3, r2, #28
 800985c:	bf44      	itt	mi
 800985e:	232b      	movmi	r3, #43	; 0x2b
 8009860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009864:	f89a 3000 	ldrb.w	r3, [sl]
 8009868:	2b2a      	cmp	r3, #42	; 0x2a
 800986a:	d015      	beq.n	8009898 <_vfiprintf_r+0x13c>
 800986c:	9a07      	ldr	r2, [sp, #28]
 800986e:	4654      	mov	r4, sl
 8009870:	2000      	movs	r0, #0
 8009872:	f04f 0c0a 	mov.w	ip, #10
 8009876:	4621      	mov	r1, r4
 8009878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800987c:	3b30      	subs	r3, #48	; 0x30
 800987e:	2b09      	cmp	r3, #9
 8009880:	d94e      	bls.n	8009920 <_vfiprintf_r+0x1c4>
 8009882:	b1b0      	cbz	r0, 80098b2 <_vfiprintf_r+0x156>
 8009884:	9207      	str	r2, [sp, #28]
 8009886:	e014      	b.n	80098b2 <_vfiprintf_r+0x156>
 8009888:	eba0 0308 	sub.w	r3, r0, r8
 800988c:	fa09 f303 	lsl.w	r3, r9, r3
 8009890:	4313      	orrs	r3, r2
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	46a2      	mov	sl, r4
 8009896:	e7d2      	b.n	800983e <_vfiprintf_r+0xe2>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	1d19      	adds	r1, r3, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	9103      	str	r1, [sp, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfbb      	ittet	lt
 80098a4:	425b      	neglt	r3, r3
 80098a6:	f042 0202 	orrlt.w	r2, r2, #2
 80098aa:	9307      	strge	r3, [sp, #28]
 80098ac:	9307      	strlt	r3, [sp, #28]
 80098ae:	bfb8      	it	lt
 80098b0:	9204      	strlt	r2, [sp, #16]
 80098b2:	7823      	ldrb	r3, [r4, #0]
 80098b4:	2b2e      	cmp	r3, #46	; 0x2e
 80098b6:	d10c      	bne.n	80098d2 <_vfiprintf_r+0x176>
 80098b8:	7863      	ldrb	r3, [r4, #1]
 80098ba:	2b2a      	cmp	r3, #42	; 0x2a
 80098bc:	d135      	bne.n	800992a <_vfiprintf_r+0x1ce>
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	1d1a      	adds	r2, r3, #4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	9203      	str	r2, [sp, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	bfb8      	it	lt
 80098ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ce:	3402      	adds	r4, #2
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099b8 <_vfiprintf_r+0x25c>
 80098d6:	7821      	ldrb	r1, [r4, #0]
 80098d8:	2203      	movs	r2, #3
 80098da:	4650      	mov	r0, sl
 80098dc:	f7f6 fc88 	bl	80001f0 <memchr>
 80098e0:	b140      	cbz	r0, 80098f4 <_vfiprintf_r+0x198>
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	eba0 000a 	sub.w	r0, r0, sl
 80098e8:	fa03 f000 	lsl.w	r0, r3, r0
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	4303      	orrs	r3, r0
 80098f0:	3401      	adds	r4, #1
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f8:	482c      	ldr	r0, [pc, #176]	; (80099ac <_vfiprintf_r+0x250>)
 80098fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098fe:	2206      	movs	r2, #6
 8009900:	f7f6 fc76 	bl	80001f0 <memchr>
 8009904:	2800      	cmp	r0, #0
 8009906:	d03f      	beq.n	8009988 <_vfiprintf_r+0x22c>
 8009908:	4b29      	ldr	r3, [pc, #164]	; (80099b0 <_vfiprintf_r+0x254>)
 800990a:	bb1b      	cbnz	r3, 8009954 <_vfiprintf_r+0x1f8>
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	3307      	adds	r3, #7
 8009910:	f023 0307 	bic.w	r3, r3, #7
 8009914:	3308      	adds	r3, #8
 8009916:	9303      	str	r3, [sp, #12]
 8009918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991a:	443b      	add	r3, r7
 800991c:	9309      	str	r3, [sp, #36]	; 0x24
 800991e:	e767      	b.n	80097f0 <_vfiprintf_r+0x94>
 8009920:	fb0c 3202 	mla	r2, ip, r2, r3
 8009924:	460c      	mov	r4, r1
 8009926:	2001      	movs	r0, #1
 8009928:	e7a5      	b.n	8009876 <_vfiprintf_r+0x11a>
 800992a:	2300      	movs	r3, #0
 800992c:	3401      	adds	r4, #1
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	4619      	mov	r1, r3
 8009932:	f04f 0c0a 	mov.w	ip, #10
 8009936:	4620      	mov	r0, r4
 8009938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800993c:	3a30      	subs	r2, #48	; 0x30
 800993e:	2a09      	cmp	r2, #9
 8009940:	d903      	bls.n	800994a <_vfiprintf_r+0x1ee>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0c5      	beq.n	80098d2 <_vfiprintf_r+0x176>
 8009946:	9105      	str	r1, [sp, #20]
 8009948:	e7c3      	b.n	80098d2 <_vfiprintf_r+0x176>
 800994a:	fb0c 2101 	mla	r1, ip, r1, r2
 800994e:	4604      	mov	r4, r0
 8009950:	2301      	movs	r3, #1
 8009952:	e7f0      	b.n	8009936 <_vfiprintf_r+0x1da>
 8009954:	ab03      	add	r3, sp, #12
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	462a      	mov	r2, r5
 800995a:	4b16      	ldr	r3, [pc, #88]	; (80099b4 <_vfiprintf_r+0x258>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	4630      	mov	r0, r6
 8009960:	f7fd fdd8 	bl	8007514 <_printf_float>
 8009964:	4607      	mov	r7, r0
 8009966:	1c78      	adds	r0, r7, #1
 8009968:	d1d6      	bne.n	8009918 <_vfiprintf_r+0x1bc>
 800996a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800996c:	07d9      	lsls	r1, r3, #31
 800996e:	d405      	bmi.n	800997c <_vfiprintf_r+0x220>
 8009970:	89ab      	ldrh	r3, [r5, #12]
 8009972:	059a      	lsls	r2, r3, #22
 8009974:	d402      	bmi.n	800997c <_vfiprintf_r+0x220>
 8009976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009978:	f000 faaf 	bl	8009eda <__retarget_lock_release_recursive>
 800997c:	89ab      	ldrh	r3, [r5, #12]
 800997e:	065b      	lsls	r3, r3, #25
 8009980:	f53f af12 	bmi.w	80097a8 <_vfiprintf_r+0x4c>
 8009984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009986:	e711      	b.n	80097ac <_vfiprintf_r+0x50>
 8009988:	ab03      	add	r3, sp, #12
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	462a      	mov	r2, r5
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <_vfiprintf_r+0x258>)
 8009990:	a904      	add	r1, sp, #16
 8009992:	4630      	mov	r0, r6
 8009994:	f7fe f862 	bl	8007a5c <_printf_i>
 8009998:	e7e4      	b.n	8009964 <_vfiprintf_r+0x208>
 800999a:	bf00      	nop
 800999c:	0800a87c 	.word	0x0800a87c
 80099a0:	0800a89c 	.word	0x0800a89c
 80099a4:	0800a85c 	.word	0x0800a85c
 80099a8:	0800a704 	.word	0x0800a704
 80099ac:	0800a70e 	.word	0x0800a70e
 80099b0:	08007515 	.word	0x08007515
 80099b4:	08009739 	.word	0x08009739
 80099b8:	0800a70a 	.word	0x0800a70a

080099bc <__swbuf_r>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	460e      	mov	r6, r1
 80099c0:	4614      	mov	r4, r2
 80099c2:	4605      	mov	r5, r0
 80099c4:	b118      	cbz	r0, 80099ce <__swbuf_r+0x12>
 80099c6:	6983      	ldr	r3, [r0, #24]
 80099c8:	b90b      	cbnz	r3, 80099ce <__swbuf_r+0x12>
 80099ca:	f000 f9e7 	bl	8009d9c <__sinit>
 80099ce:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <__swbuf_r+0x98>)
 80099d0:	429c      	cmp	r4, r3
 80099d2:	d12b      	bne.n	8009a2c <__swbuf_r+0x70>
 80099d4:	686c      	ldr	r4, [r5, #4]
 80099d6:	69a3      	ldr	r3, [r4, #24]
 80099d8:	60a3      	str	r3, [r4, #8]
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	071a      	lsls	r2, r3, #28
 80099de:	d52f      	bpl.n	8009a40 <__swbuf_r+0x84>
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	b36b      	cbz	r3, 8009a40 <__swbuf_r+0x84>
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	6820      	ldr	r0, [r4, #0]
 80099e8:	1ac0      	subs	r0, r0, r3
 80099ea:	6963      	ldr	r3, [r4, #20]
 80099ec:	b2f6      	uxtb	r6, r6
 80099ee:	4283      	cmp	r3, r0
 80099f0:	4637      	mov	r7, r6
 80099f2:	dc04      	bgt.n	80099fe <__swbuf_r+0x42>
 80099f4:	4621      	mov	r1, r4
 80099f6:	4628      	mov	r0, r5
 80099f8:	f000 f93c 	bl	8009c74 <_fflush_r>
 80099fc:	bb30      	cbnz	r0, 8009a4c <__swbuf_r+0x90>
 80099fe:	68a3      	ldr	r3, [r4, #8]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	60a3      	str	r3, [r4, #8]
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	6022      	str	r2, [r4, #0]
 8009a0a:	701e      	strb	r6, [r3, #0]
 8009a0c:	6963      	ldr	r3, [r4, #20]
 8009a0e:	3001      	adds	r0, #1
 8009a10:	4283      	cmp	r3, r0
 8009a12:	d004      	beq.n	8009a1e <__swbuf_r+0x62>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	07db      	lsls	r3, r3, #31
 8009a18:	d506      	bpl.n	8009a28 <__swbuf_r+0x6c>
 8009a1a:	2e0a      	cmp	r6, #10
 8009a1c:	d104      	bne.n	8009a28 <__swbuf_r+0x6c>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f927 	bl	8009c74 <_fflush_r>
 8009a26:	b988      	cbnz	r0, 8009a4c <__swbuf_r+0x90>
 8009a28:	4638      	mov	r0, r7
 8009a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <__swbuf_r+0x9c>)
 8009a2e:	429c      	cmp	r4, r3
 8009a30:	d101      	bne.n	8009a36 <__swbuf_r+0x7a>
 8009a32:	68ac      	ldr	r4, [r5, #8]
 8009a34:	e7cf      	b.n	80099d6 <__swbuf_r+0x1a>
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <__swbuf_r+0xa0>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	bf08      	it	eq
 8009a3c:	68ec      	ldreq	r4, [r5, #12]
 8009a3e:	e7ca      	b.n	80099d6 <__swbuf_r+0x1a>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f81a 	bl	8009a7c <__swsetup_r>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d0cb      	beq.n	80099e4 <__swbuf_r+0x28>
 8009a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a50:	e7ea      	b.n	8009a28 <__swbuf_r+0x6c>
 8009a52:	bf00      	nop
 8009a54:	0800a87c 	.word	0x0800a87c
 8009a58:	0800a89c 	.word	0x0800a89c
 8009a5c:	0800a85c 	.word	0x0800a85c

08009a60 <__ascii_wctomb>:
 8009a60:	b149      	cbz	r1, 8009a76 <__ascii_wctomb+0x16>
 8009a62:	2aff      	cmp	r2, #255	; 0xff
 8009a64:	bf85      	ittet	hi
 8009a66:	238a      	movhi	r3, #138	; 0x8a
 8009a68:	6003      	strhi	r3, [r0, #0]
 8009a6a:	700a      	strbls	r2, [r1, #0]
 8009a6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a70:	bf98      	it	ls
 8009a72:	2001      	movls	r0, #1
 8009a74:	4770      	bx	lr
 8009a76:	4608      	mov	r0, r1
 8009a78:	4770      	bx	lr
	...

08009a7c <__swsetup_r>:
 8009a7c:	4b32      	ldr	r3, [pc, #200]	; (8009b48 <__swsetup_r+0xcc>)
 8009a7e:	b570      	push	{r4, r5, r6, lr}
 8009a80:	681d      	ldr	r5, [r3, #0]
 8009a82:	4606      	mov	r6, r0
 8009a84:	460c      	mov	r4, r1
 8009a86:	b125      	cbz	r5, 8009a92 <__swsetup_r+0x16>
 8009a88:	69ab      	ldr	r3, [r5, #24]
 8009a8a:	b913      	cbnz	r3, 8009a92 <__swsetup_r+0x16>
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 f985 	bl	8009d9c <__sinit>
 8009a92:	4b2e      	ldr	r3, [pc, #184]	; (8009b4c <__swsetup_r+0xd0>)
 8009a94:	429c      	cmp	r4, r3
 8009a96:	d10f      	bne.n	8009ab8 <__swsetup_r+0x3c>
 8009a98:	686c      	ldr	r4, [r5, #4]
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aa0:	0719      	lsls	r1, r3, #28
 8009aa2:	d42c      	bmi.n	8009afe <__swsetup_r+0x82>
 8009aa4:	06dd      	lsls	r5, r3, #27
 8009aa6:	d411      	bmi.n	8009acc <__swsetup_r+0x50>
 8009aa8:	2309      	movs	r3, #9
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	e03e      	b.n	8009b36 <__swsetup_r+0xba>
 8009ab8:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <__swsetup_r+0xd4>)
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d101      	bne.n	8009ac2 <__swsetup_r+0x46>
 8009abe:	68ac      	ldr	r4, [r5, #8]
 8009ac0:	e7eb      	b.n	8009a9a <__swsetup_r+0x1e>
 8009ac2:	4b24      	ldr	r3, [pc, #144]	; (8009b54 <__swsetup_r+0xd8>)
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	bf08      	it	eq
 8009ac8:	68ec      	ldreq	r4, [r5, #12]
 8009aca:	e7e6      	b.n	8009a9a <__swsetup_r+0x1e>
 8009acc:	0758      	lsls	r0, r3, #29
 8009ace:	d512      	bpl.n	8009af6 <__swsetup_r+0x7a>
 8009ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ad2:	b141      	cbz	r1, 8009ae6 <__swsetup_r+0x6a>
 8009ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d002      	beq.n	8009ae2 <__swsetup_r+0x66>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff fb31 	bl	8009144 <_free_r>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	2300      	movs	r3, #0
 8009af0:	6063      	str	r3, [r4, #4]
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	f043 0308 	orr.w	r3, r3, #8
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	6923      	ldr	r3, [r4, #16]
 8009b00:	b94b      	cbnz	r3, 8009b16 <__swsetup_r+0x9a>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b0c:	d003      	beq.n	8009b16 <__swsetup_r+0x9a>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 fa09 	bl	8009f28 <__smakebuf_r>
 8009b16:	89a0      	ldrh	r0, [r4, #12]
 8009b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b1c:	f010 0301 	ands.w	r3, r0, #1
 8009b20:	d00a      	beq.n	8009b38 <__swsetup_r+0xbc>
 8009b22:	2300      	movs	r3, #0
 8009b24:	60a3      	str	r3, [r4, #8]
 8009b26:	6963      	ldr	r3, [r4, #20]
 8009b28:	425b      	negs	r3, r3
 8009b2a:	61a3      	str	r3, [r4, #24]
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	b943      	cbnz	r3, 8009b42 <__swsetup_r+0xc6>
 8009b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b34:	d1ba      	bne.n	8009aac <__swsetup_r+0x30>
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	0781      	lsls	r1, r0, #30
 8009b3a:	bf58      	it	pl
 8009b3c:	6963      	ldrpl	r3, [r4, #20]
 8009b3e:	60a3      	str	r3, [r4, #8]
 8009b40:	e7f4      	b.n	8009b2c <__swsetup_r+0xb0>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e7f7      	b.n	8009b36 <__swsetup_r+0xba>
 8009b46:	bf00      	nop
 8009b48:	20000024 	.word	0x20000024
 8009b4c:	0800a87c 	.word	0x0800a87c
 8009b50:	0800a89c 	.word	0x0800a89c
 8009b54:	0800a85c 	.word	0x0800a85c

08009b58 <abort>:
 8009b58:	b508      	push	{r3, lr}
 8009b5a:	2006      	movs	r0, #6
 8009b5c:	f000 fa54 	bl	800a008 <raise>
 8009b60:	2001      	movs	r0, #1
 8009b62:	f7f9 ff83 	bl	8003a6c <_exit>
	...

08009b68 <__sflush_r>:
 8009b68:	898a      	ldrh	r2, [r1, #12]
 8009b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6e:	4605      	mov	r5, r0
 8009b70:	0710      	lsls	r0, r2, #28
 8009b72:	460c      	mov	r4, r1
 8009b74:	d458      	bmi.n	8009c28 <__sflush_r+0xc0>
 8009b76:	684b      	ldr	r3, [r1, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dc05      	bgt.n	8009b88 <__sflush_r+0x20>
 8009b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dc02      	bgt.n	8009b88 <__sflush_r+0x20>
 8009b82:	2000      	movs	r0, #0
 8009b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b8a:	2e00      	cmp	r6, #0
 8009b8c:	d0f9      	beq.n	8009b82 <__sflush_r+0x1a>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b94:	682f      	ldr	r7, [r5, #0]
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	d032      	beq.n	8009c00 <__sflush_r+0x98>
 8009b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	075a      	lsls	r2, r3, #29
 8009ba0:	d505      	bpl.n	8009bae <__sflush_r+0x46>
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	1ac0      	subs	r0, r0, r3
 8009ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba8:	b10b      	cbz	r3, 8009bae <__sflush_r+0x46>
 8009baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bac:	1ac0      	subs	r0, r0, r3
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb4:	6a21      	ldr	r1, [r4, #32]
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b0      	blx	r6
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	d106      	bne.n	8009bce <__sflush_r+0x66>
 8009bc0:	6829      	ldr	r1, [r5, #0]
 8009bc2:	291d      	cmp	r1, #29
 8009bc4:	d82c      	bhi.n	8009c20 <__sflush_r+0xb8>
 8009bc6:	4a2a      	ldr	r2, [pc, #168]	; (8009c70 <__sflush_r+0x108>)
 8009bc8:	40ca      	lsrs	r2, r1
 8009bca:	07d6      	lsls	r6, r2, #31
 8009bcc:	d528      	bpl.n	8009c20 <__sflush_r+0xb8>
 8009bce:	2200      	movs	r2, #0
 8009bd0:	6062      	str	r2, [r4, #4]
 8009bd2:	04d9      	lsls	r1, r3, #19
 8009bd4:	6922      	ldr	r2, [r4, #16]
 8009bd6:	6022      	str	r2, [r4, #0]
 8009bd8:	d504      	bpl.n	8009be4 <__sflush_r+0x7c>
 8009bda:	1c42      	adds	r2, r0, #1
 8009bdc:	d101      	bne.n	8009be2 <__sflush_r+0x7a>
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	b903      	cbnz	r3, 8009be4 <__sflush_r+0x7c>
 8009be2:	6560      	str	r0, [r4, #84]	; 0x54
 8009be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be6:	602f      	str	r7, [r5, #0]
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d0ca      	beq.n	8009b82 <__sflush_r+0x1a>
 8009bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <__sflush_r+0x92>
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f7ff faa5 	bl	8009144 <_free_r>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bfe:	e7c1      	b.n	8009b84 <__sflush_r+0x1c>
 8009c00:	6a21      	ldr	r1, [r4, #32]
 8009c02:	2301      	movs	r3, #1
 8009c04:	4628      	mov	r0, r5
 8009c06:	47b0      	blx	r6
 8009c08:	1c41      	adds	r1, r0, #1
 8009c0a:	d1c7      	bne.n	8009b9c <__sflush_r+0x34>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0c4      	beq.n	8009b9c <__sflush_r+0x34>
 8009c12:	2b1d      	cmp	r3, #29
 8009c14:	d001      	beq.n	8009c1a <__sflush_r+0xb2>
 8009c16:	2b16      	cmp	r3, #22
 8009c18:	d101      	bne.n	8009c1e <__sflush_r+0xb6>
 8009c1a:	602f      	str	r7, [r5, #0]
 8009c1c:	e7b1      	b.n	8009b82 <__sflush_r+0x1a>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	e7ad      	b.n	8009b84 <__sflush_r+0x1c>
 8009c28:	690f      	ldr	r7, [r1, #16]
 8009c2a:	2f00      	cmp	r7, #0
 8009c2c:	d0a9      	beq.n	8009b82 <__sflush_r+0x1a>
 8009c2e:	0793      	lsls	r3, r2, #30
 8009c30:	680e      	ldr	r6, [r1, #0]
 8009c32:	bf08      	it	eq
 8009c34:	694b      	ldreq	r3, [r1, #20]
 8009c36:	600f      	str	r7, [r1, #0]
 8009c38:	bf18      	it	ne
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	eba6 0807 	sub.w	r8, r6, r7
 8009c40:	608b      	str	r3, [r1, #8]
 8009c42:	f1b8 0f00 	cmp.w	r8, #0
 8009c46:	dd9c      	ble.n	8009b82 <__sflush_r+0x1a>
 8009c48:	6a21      	ldr	r1, [r4, #32]
 8009c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c4c:	4643      	mov	r3, r8
 8009c4e:	463a      	mov	r2, r7
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b0      	blx	r6
 8009c54:	2800      	cmp	r0, #0
 8009c56:	dc06      	bgt.n	8009c66 <__sflush_r+0xfe>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295
 8009c64:	e78e      	b.n	8009b84 <__sflush_r+0x1c>
 8009c66:	4407      	add	r7, r0
 8009c68:	eba8 0800 	sub.w	r8, r8, r0
 8009c6c:	e7e9      	b.n	8009c42 <__sflush_r+0xda>
 8009c6e:	bf00      	nop
 8009c70:	20400001 	.word	0x20400001

08009c74 <_fflush_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	690b      	ldr	r3, [r1, #16]
 8009c78:	4605      	mov	r5, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	b913      	cbnz	r3, 8009c84 <_fflush_r+0x10>
 8009c7e:	2500      	movs	r5, #0
 8009c80:	4628      	mov	r0, r5
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	b118      	cbz	r0, 8009c8e <_fflush_r+0x1a>
 8009c86:	6983      	ldr	r3, [r0, #24]
 8009c88:	b90b      	cbnz	r3, 8009c8e <_fflush_r+0x1a>
 8009c8a:	f000 f887 	bl	8009d9c <__sinit>
 8009c8e:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <_fflush_r+0x6c>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d11b      	bne.n	8009ccc <_fflush_r+0x58>
 8009c94:	686c      	ldr	r4, [r5, #4]
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0ef      	beq.n	8009c7e <_fflush_r+0xa>
 8009c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ca0:	07d0      	lsls	r0, r2, #31
 8009ca2:	d404      	bmi.n	8009cae <_fflush_r+0x3a>
 8009ca4:	0599      	lsls	r1, r3, #22
 8009ca6:	d402      	bmi.n	8009cae <_fflush_r+0x3a>
 8009ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009caa:	f000 f915 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f7ff ff59 	bl	8009b68 <__sflush_r>
 8009cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cb8:	07da      	lsls	r2, r3, #31
 8009cba:	4605      	mov	r5, r0
 8009cbc:	d4e0      	bmi.n	8009c80 <_fflush_r+0xc>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	059b      	lsls	r3, r3, #22
 8009cc2:	d4dd      	bmi.n	8009c80 <_fflush_r+0xc>
 8009cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cc6:	f000 f908 	bl	8009eda <__retarget_lock_release_recursive>
 8009cca:	e7d9      	b.n	8009c80 <_fflush_r+0xc>
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <_fflush_r+0x70>)
 8009cce:	429c      	cmp	r4, r3
 8009cd0:	d101      	bne.n	8009cd6 <_fflush_r+0x62>
 8009cd2:	68ac      	ldr	r4, [r5, #8]
 8009cd4:	e7df      	b.n	8009c96 <_fflush_r+0x22>
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <_fflush_r+0x74>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	bf08      	it	eq
 8009cdc:	68ec      	ldreq	r4, [r5, #12]
 8009cde:	e7da      	b.n	8009c96 <_fflush_r+0x22>
 8009ce0:	0800a87c 	.word	0x0800a87c
 8009ce4:	0800a89c 	.word	0x0800a89c
 8009ce8:	0800a85c 	.word	0x0800a85c

08009cec <std>:
 8009cec:	2300      	movs	r3, #0
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cfa:	6083      	str	r3, [r0, #8]
 8009cfc:	8181      	strh	r1, [r0, #12]
 8009cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8009d00:	81c2      	strh	r2, [r0, #14]
 8009d02:	6183      	str	r3, [r0, #24]
 8009d04:	4619      	mov	r1, r3
 8009d06:	2208      	movs	r2, #8
 8009d08:	305c      	adds	r0, #92	; 0x5c
 8009d0a:	f7fd fb5b 	bl	80073c4 <memset>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <std+0x38>)
 8009d10:	6263      	str	r3, [r4, #36]	; 0x24
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <std+0x3c>)
 8009d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d16:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <std+0x40>)
 8009d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <std+0x44>)
 8009d1c:	6224      	str	r4, [r4, #32]
 8009d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	0800a041 	.word	0x0800a041
 8009d28:	0800a063 	.word	0x0800a063
 8009d2c:	0800a09b 	.word	0x0800a09b
 8009d30:	0800a0bf 	.word	0x0800a0bf

08009d34 <_cleanup_r>:
 8009d34:	4901      	ldr	r1, [pc, #4]	; (8009d3c <_cleanup_r+0x8>)
 8009d36:	f000 b8af 	b.w	8009e98 <_fwalk_reent>
 8009d3a:	bf00      	nop
 8009d3c:	08009c75 	.word	0x08009c75

08009d40 <__sfmoreglue>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	2268      	movs	r2, #104	; 0x68
 8009d44:	1e4d      	subs	r5, r1, #1
 8009d46:	4355      	muls	r5, r2
 8009d48:	460e      	mov	r6, r1
 8009d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d4e:	f7ff fa65 	bl	800921c <_malloc_r>
 8009d52:	4604      	mov	r4, r0
 8009d54:	b140      	cbz	r0, 8009d68 <__sfmoreglue+0x28>
 8009d56:	2100      	movs	r1, #0
 8009d58:	e9c0 1600 	strd	r1, r6, [r0]
 8009d5c:	300c      	adds	r0, #12
 8009d5e:	60a0      	str	r0, [r4, #8]
 8009d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d64:	f7fd fb2e 	bl	80073c4 <memset>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}

08009d6c <__sfp_lock_acquire>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__sfp_lock_acquire+0x8>)
 8009d6e:	f000 b8b3 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d72:	bf00      	nop
 8009d74:	20000575 	.word	0x20000575

08009d78 <__sfp_lock_release>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__sfp_lock_release+0x8>)
 8009d7a:	f000 b8ae 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d7e:	bf00      	nop
 8009d80:	20000575 	.word	0x20000575

08009d84 <__sinit_lock_acquire>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__sinit_lock_acquire+0x8>)
 8009d86:	f000 b8a7 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20000576 	.word	0x20000576

08009d90 <__sinit_lock_release>:
 8009d90:	4801      	ldr	r0, [pc, #4]	; (8009d98 <__sinit_lock_release+0x8>)
 8009d92:	f000 b8a2 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d96:	bf00      	nop
 8009d98:	20000576 	.word	0x20000576

08009d9c <__sinit>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	f7ff fff0 	bl	8009d84 <__sinit_lock_acquire>
 8009da4:	69a3      	ldr	r3, [r4, #24]
 8009da6:	b11b      	cbz	r3, 8009db0 <__sinit+0x14>
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f7ff bff0 	b.w	8009d90 <__sinit_lock_release>
 8009db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009db4:	6523      	str	r3, [r4, #80]	; 0x50
 8009db6:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <__sinit+0x68>)
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <__sinit+0x6c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	bf04      	itt	eq
 8009dc2:	2301      	moveq	r3, #1
 8009dc4:	61a3      	streq	r3, [r4, #24]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 f820 	bl	8009e0c <__sfp>
 8009dcc:	6060      	str	r0, [r4, #4]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 f81c 	bl	8009e0c <__sfp>
 8009dd4:	60a0      	str	r0, [r4, #8]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 f818 	bl	8009e0c <__sfp>
 8009ddc:	2200      	movs	r2, #0
 8009dde:	60e0      	str	r0, [r4, #12]
 8009de0:	2104      	movs	r1, #4
 8009de2:	6860      	ldr	r0, [r4, #4]
 8009de4:	f7ff ff82 	bl	8009cec <std>
 8009de8:	68a0      	ldr	r0, [r4, #8]
 8009dea:	2201      	movs	r2, #1
 8009dec:	2109      	movs	r1, #9
 8009dee:	f7ff ff7d 	bl	8009cec <std>
 8009df2:	68e0      	ldr	r0, [r4, #12]
 8009df4:	2202      	movs	r2, #2
 8009df6:	2112      	movs	r1, #18
 8009df8:	f7ff ff78 	bl	8009cec <std>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	61a3      	str	r3, [r4, #24]
 8009e00:	e7d2      	b.n	8009da8 <__sinit+0xc>
 8009e02:	bf00      	nop
 8009e04:	0800a4e4 	.word	0x0800a4e4
 8009e08:	08009d35 	.word	0x08009d35

08009e0c <__sfp>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	4607      	mov	r7, r0
 8009e10:	f7ff ffac 	bl	8009d6c <__sfp_lock_acquire>
 8009e14:	4b1e      	ldr	r3, [pc, #120]	; (8009e90 <__sfp+0x84>)
 8009e16:	681e      	ldr	r6, [r3, #0]
 8009e18:	69b3      	ldr	r3, [r6, #24]
 8009e1a:	b913      	cbnz	r3, 8009e22 <__sfp+0x16>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff ffbd 	bl	8009d9c <__sinit>
 8009e22:	3648      	adds	r6, #72	; 0x48
 8009e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	d503      	bpl.n	8009e34 <__sfp+0x28>
 8009e2c:	6833      	ldr	r3, [r6, #0]
 8009e2e:	b30b      	cbz	r3, 8009e74 <__sfp+0x68>
 8009e30:	6836      	ldr	r6, [r6, #0]
 8009e32:	e7f7      	b.n	8009e24 <__sfp+0x18>
 8009e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e38:	b9d5      	cbnz	r5, 8009e70 <__sfp+0x64>
 8009e3a:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <__sfp+0x88>)
 8009e3c:	60e3      	str	r3, [r4, #12]
 8009e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e42:	6665      	str	r5, [r4, #100]	; 0x64
 8009e44:	f000 f847 	bl	8009ed6 <__retarget_lock_init_recursive>
 8009e48:	f7ff ff96 	bl	8009d78 <__sfp_lock_release>
 8009e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e54:	6025      	str	r5, [r4, #0]
 8009e56:	61a5      	str	r5, [r4, #24]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e60:	f7fd fab0 	bl	80073c4 <memset>
 8009e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e70:	3468      	adds	r4, #104	; 0x68
 8009e72:	e7d9      	b.n	8009e28 <__sfp+0x1c>
 8009e74:	2104      	movs	r1, #4
 8009e76:	4638      	mov	r0, r7
 8009e78:	f7ff ff62 	bl	8009d40 <__sfmoreglue>
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	6030      	str	r0, [r6, #0]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1d5      	bne.n	8009e30 <__sfp+0x24>
 8009e84:	f7ff ff78 	bl	8009d78 <__sfp_lock_release>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	e7ee      	b.n	8009e6c <__sfp+0x60>
 8009e8e:	bf00      	nop
 8009e90:	0800a4e4 	.word	0x0800a4e4
 8009e94:	ffff0001 	.word	0xffff0001

08009e98 <_fwalk_reent>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	4688      	mov	r8, r1
 8009ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ea4:	2700      	movs	r7, #0
 8009ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8009eae:	d505      	bpl.n	8009ebc <_fwalk_reent+0x24>
 8009eb0:	6824      	ldr	r4, [r4, #0]
 8009eb2:	2c00      	cmp	r4, #0
 8009eb4:	d1f7      	bne.n	8009ea6 <_fwalk_reent+0xe>
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebc:	89ab      	ldrh	r3, [r5, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d907      	bls.n	8009ed2 <_fwalk_reent+0x3a>
 8009ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	d003      	beq.n	8009ed2 <_fwalk_reent+0x3a>
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	47c0      	blx	r8
 8009ed0:	4307      	orrs	r7, r0
 8009ed2:	3568      	adds	r5, #104	; 0x68
 8009ed4:	e7e9      	b.n	8009eaa <_fwalk_reent+0x12>

08009ed6 <__retarget_lock_init_recursive>:
 8009ed6:	4770      	bx	lr

08009ed8 <__retarget_lock_acquire_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_release_recursive>:
 8009eda:	4770      	bx	lr

08009edc <__swhatbuf_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	460e      	mov	r6, r1
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	b096      	sub	sp, #88	; 0x58
 8009ee8:	4614      	mov	r4, r2
 8009eea:	461d      	mov	r5, r3
 8009eec:	da08      	bge.n	8009f00 <__swhatbuf_r+0x24>
 8009eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	061a      	lsls	r2, r3, #24
 8009ef8:	d410      	bmi.n	8009f1c <__swhatbuf_r+0x40>
 8009efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efe:	e00e      	b.n	8009f1e <__swhatbuf_r+0x42>
 8009f00:	466a      	mov	r2, sp
 8009f02:	f000 f903 	bl	800a10c <_fstat_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	dbf1      	blt.n	8009eee <__swhatbuf_r+0x12>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f14:	425a      	negs	r2, r3
 8009f16:	415a      	adcs	r2, r3
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	e7ee      	b.n	8009efa <__swhatbuf_r+0x1e>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	2000      	movs	r0, #0
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	b016      	add	sp, #88	; 0x58
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f28 <__smakebuf_r>:
 8009f28:	898b      	ldrh	r3, [r1, #12]
 8009f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f2c:	079d      	lsls	r5, r3, #30
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460c      	mov	r4, r1
 8009f32:	d507      	bpl.n	8009f44 <__smakebuf_r+0x1c>
 8009f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6163      	str	r3, [r4, #20]
 8009f40:	b002      	add	sp, #8
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	ab01      	add	r3, sp, #4
 8009f46:	466a      	mov	r2, sp
 8009f48:	f7ff ffc8 	bl	8009edc <__swhatbuf_r>
 8009f4c:	9900      	ldr	r1, [sp, #0]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff f963 	bl	800921c <_malloc_r>
 8009f56:	b948      	cbnz	r0, 8009f6c <__smakebuf_r+0x44>
 8009f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d4ef      	bmi.n	8009f40 <__smakebuf_r+0x18>
 8009f60:	f023 0303 	bic.w	r3, r3, #3
 8009f64:	f043 0302 	orr.w	r3, r3, #2
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	e7e3      	b.n	8009f34 <__smakebuf_r+0xc>
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <__smakebuf_r+0x7c>)
 8009f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	6020      	str	r0, [r4, #0]
 8009f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	6163      	str	r3, [r4, #20]
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	6120      	str	r0, [r4, #16]
 8009f82:	b15b      	cbz	r3, 8009f9c <__smakebuf_r+0x74>
 8009f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f000 f8d1 	bl	800a130 <_isatty_r>
 8009f8e:	b128      	cbz	r0, 8009f9c <__smakebuf_r+0x74>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	89a0      	ldrh	r0, [r4, #12]
 8009f9e:	4305      	orrs	r5, r0
 8009fa0:	81a5      	strh	r5, [r4, #12]
 8009fa2:	e7cd      	b.n	8009f40 <__smakebuf_r+0x18>
 8009fa4:	08009d35 	.word	0x08009d35

08009fa8 <_malloc_usable_size_r>:
 8009fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fac:	1f18      	subs	r0, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbc      	itt	lt
 8009fb2:	580b      	ldrlt	r3, [r1, r0]
 8009fb4:	18c0      	addlt	r0, r0, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_raise_r>:
 8009fb8:	291f      	cmp	r1, #31
 8009fba:	b538      	push	{r3, r4, r5, lr}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	d904      	bls.n	8009fcc <_raise_r+0x14>
 8009fc2:	2316      	movs	r3, #22
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fce:	b112      	cbz	r2, 8009fd6 <_raise_r+0x1e>
 8009fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fd4:	b94b      	cbnz	r3, 8009fea <_raise_r+0x32>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f830 	bl	800a03c <_getpid_r>
 8009fdc:	462a      	mov	r2, r5
 8009fde:	4601      	mov	r1, r0
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe6:	f000 b817 	b.w	800a018 <_kill_r>
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d00a      	beq.n	800a004 <_raise_r+0x4c>
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	d103      	bne.n	8009ffa <_raise_r+0x42>
 8009ff2:	2316      	movs	r3, #22
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	e7e7      	b.n	8009fca <_raise_r+0x12>
 8009ffa:	2400      	movs	r4, #0
 8009ffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a000:	4628      	mov	r0, r5
 800a002:	4798      	blx	r3
 800a004:	2000      	movs	r0, #0
 800a006:	e7e0      	b.n	8009fca <_raise_r+0x12>

0800a008 <raise>:
 800a008:	4b02      	ldr	r3, [pc, #8]	; (800a014 <raise+0xc>)
 800a00a:	4601      	mov	r1, r0
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	f7ff bfd3 	b.w	8009fb8 <_raise_r>
 800a012:	bf00      	nop
 800a014:	20000024 	.word	0x20000024

0800a018 <_kill_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d07      	ldr	r5, [pc, #28]	; (800a038 <_kill_r+0x20>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	4611      	mov	r1, r2
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	f7f9 fd11 	bl	8003a4c <_kill>
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	d102      	bne.n	800a034 <_kill_r+0x1c>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b103      	cbz	r3, 800a034 <_kill_r+0x1c>
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	bd38      	pop	{r3, r4, r5, pc}
 800a036:	bf00      	nop
 800a038:	20000570 	.word	0x20000570

0800a03c <_getpid_r>:
 800a03c:	f7f9 bcfe 	b.w	8003a3c <_getpid>

0800a040 <__sread>:
 800a040:	b510      	push	{r4, lr}
 800a042:	460c      	mov	r4, r1
 800a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a048:	f000 f894 	bl	800a174 <_read_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	bfab      	itete	ge
 800a050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a052:	89a3      	ldrhlt	r3, [r4, #12]
 800a054:	181b      	addge	r3, r3, r0
 800a056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a05a:	bfac      	ite	ge
 800a05c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a05e:	81a3      	strhlt	r3, [r4, #12]
 800a060:	bd10      	pop	{r4, pc}

0800a062 <__swrite>:
 800a062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a066:	461f      	mov	r7, r3
 800a068:	898b      	ldrh	r3, [r1, #12]
 800a06a:	05db      	lsls	r3, r3, #23
 800a06c:	4605      	mov	r5, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	4616      	mov	r6, r2
 800a072:	d505      	bpl.n	800a080 <__swrite+0x1e>
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	2302      	movs	r3, #2
 800a07a:	2200      	movs	r2, #0
 800a07c:	f000 f868 	bl	800a150 <_lseek_r>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	4632      	mov	r2, r6
 800a08e:	463b      	mov	r3, r7
 800a090:	4628      	mov	r0, r5
 800a092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	f000 b817 	b.w	800a0c8 <_write_r>

0800a09a <__sseek>:
 800a09a:	b510      	push	{r4, lr}
 800a09c:	460c      	mov	r4, r1
 800a09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a2:	f000 f855 	bl	800a150 <_lseek_r>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	bf15      	itete	ne
 800a0ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0b6:	81a3      	strheq	r3, [r4, #12]
 800a0b8:	bf18      	it	ne
 800a0ba:	81a3      	strhne	r3, [r4, #12]
 800a0bc:	bd10      	pop	{r4, pc}

0800a0be <__sclose>:
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 b813 	b.w	800a0ec <_close_r>
	...

0800a0c8 <_write_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	; (800a0e8 <_write_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f9 fcef 	bl	8003aba <_write>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_write_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_write_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20000570 	.word	0x20000570

0800a0ec <_close_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d06      	ldr	r5, [pc, #24]	; (800a108 <_close_r+0x1c>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f9 fcfb 	bl	8003af2 <_close>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_close_r+0x1a>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_close_r+0x1a>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20000570 	.word	0x20000570

0800a10c <_fstat_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d07      	ldr	r5, [pc, #28]	; (800a12c <_fstat_r+0x20>)
 800a110:	2300      	movs	r3, #0
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	602b      	str	r3, [r5, #0]
 800a11a:	f7f9 fcf6 	bl	8003b0a <_fstat>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d102      	bne.n	800a128 <_fstat_r+0x1c>
 800a122:	682b      	ldr	r3, [r5, #0]
 800a124:	b103      	cbz	r3, 800a128 <_fstat_r+0x1c>
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	bf00      	nop
 800a12c:	20000570 	.word	0x20000570

0800a130 <_isatty_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d06      	ldr	r5, [pc, #24]	; (800a14c <_isatty_r+0x1c>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f9 fcf5 	bl	8003b2a <_isatty>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_isatty_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_isatty_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000570 	.word	0x20000570

0800a150 <_lseek_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d07      	ldr	r5, [pc, #28]	; (800a170 <_lseek_r+0x20>)
 800a154:	4604      	mov	r4, r0
 800a156:	4608      	mov	r0, r1
 800a158:	4611      	mov	r1, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f9 fcee 	bl	8003b40 <_lseek>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_lseek_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_lseek_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000570 	.word	0x20000570

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	; (800a194 <_read_r+0x20>)
 800a178:	4604      	mov	r4, r0
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f9 fc7c 	bl	8003a80 <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20000570 	.word	0x20000570

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
