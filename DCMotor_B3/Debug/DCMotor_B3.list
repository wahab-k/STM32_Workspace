
DCMotor_B3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005694  08005694  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800569c  0800569c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08005714  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005714  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5d  00000000  00000000  0002ef64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d22  00000000  00000000  000327b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f18b  00000000  00000000  000494d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097151  00000000  00000000  0005865d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000ef800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055e8 	.word	0x080055e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055e8 	.word	0x080055e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ADC_Select_CH>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rcv_intpt_flag = 0;
uint16_t rpm_tick_count = 0;
void ADC_Select_CH(int CH){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
	switch(CH){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	f200 814b 	bhi.w	8000848 <ADC_Select_CH+0x2b4>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <ADC_Select_CH+0x24>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080005f9 	.word	0x080005f9
 80005bc:	0800061b 	.word	0x0800061b
 80005c0:	0800063d 	.word	0x0800063d
 80005c4:	0800065f 	.word	0x0800065f
 80005c8:	08000681 	.word	0x08000681
 80005cc:	080006a3 	.word	0x080006a3
 80005d0:	080006c5 	.word	0x080006c5
 80005d4:	080006e7 	.word	0x080006e7
 80005d8:	08000709 	.word	0x08000709
 80005dc:	0800072b 	.word	0x0800072b
 80005e0:	0800074b 	.word	0x0800074b
 80005e4:	0800076b 	.word	0x0800076b
 80005e8:	0800078b 	.word	0x0800078b
 80005ec:	080007ab 	.word	0x080007ab
 80005f0:	080007cb 	.word	0x080007cb
 80005f4:	080007eb 	.word	0x080007eb
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	4619      	mov	r1, r3
 8000606:	4892      	ldr	r0, [pc, #584]	; (8000850 <ADC_Select_CH+0x2bc>)
 8000608:	f001 f8f8 	bl	80017fc <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	f000 80fb 	beq.w	800080a <ADC_Select_CH+0x276>
		Error_Handler();
 8000614:	f000 fc94 	bl	8000f40 <Error_Handler>
	}
	break;
 8000618:	e0f7      	b.n	800080a <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4889      	ldr	r0, [pc, #548]	; (8000850 <ADC_Select_CH+0x2bc>)
 800062a:	f001 f8e7 	bl	80017fc <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80ec 	beq.w	800080e <ADC_Select_CH+0x27a>
		Error_Handler();
 8000636:	f000 fc83 	bl	8000f40 <Error_Handler>
	}
	break;
 800063a:	e0e8      	b.n	800080e <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	4619      	mov	r1, r3
 800064a:	4881      	ldr	r0, [pc, #516]	; (8000850 <ADC_Select_CH+0x2bc>)
 800064c:	f001 f8d6 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	f000 80dd 	beq.w	8000812 <ADC_Select_CH+0x27e>
		Error_Handler();
 8000658:	f000 fc72 	bl	8000f40 <Error_Handler>
	}
	break;
 800065c:	e0d9      	b.n	8000812 <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	4878      	ldr	r0, [pc, #480]	; (8000850 <ADC_Select_CH+0x2bc>)
 800066e:	f001 f8c5 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80ce 	beq.w	8000816 <ADC_Select_CH+0x282>
		Error_Handler();
 800067a:	f000 fc61 	bl	8000f40 <Error_Handler>
	}
	break;
 800067e:	e0ca      	b.n	8000816 <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 8000680:	2304      	movs	r3, #4
 8000682:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	4619      	mov	r1, r3
 800068e:	4870      	ldr	r0, [pc, #448]	; (8000850 <ADC_Select_CH+0x2bc>)
 8000690:	f001 f8b4 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	f000 80bf 	beq.w	800081a <ADC_Select_CH+0x286>
		Error_Handler();
 800069c:	f000 fc50 	bl	8000f40 <Error_Handler>
	}
	break;
 80006a0:	e0bb      	b.n	800081a <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 80006a2:	2305      	movs	r3, #5
 80006a4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4619      	mov	r1, r3
 80006b0:	4867      	ldr	r0, [pc, #412]	; (8000850 <ADC_Select_CH+0x2bc>)
 80006b2:	f001 f8a3 	bl	80017fc <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f000 80b0 	beq.w	800081e <ADC_Select_CH+0x28a>
		Error_Handler();
 80006be:	f000 fc3f 	bl	8000f40 <Error_Handler>
	}
	break;
 80006c2:	e0ac      	b.n	800081e <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	485f      	ldr	r0, [pc, #380]	; (8000850 <ADC_Select_CH+0x2bc>)
 80006d4:	f001 f892 	bl	80017fc <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80a1 	beq.w	8000822 <ADC_Select_CH+0x28e>
		Error_Handler();
 80006e0:	f000 fc2e 	bl	8000f40 <Error_Handler>
	}
	break;
 80006e4:	e09d      	b.n	8000822 <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	4856      	ldr	r0, [pc, #344]	; (8000850 <ADC_Select_CH+0x2bc>)
 80006f6:	f001 f881 	bl	80017fc <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f000 8092 	beq.w	8000826 <ADC_Select_CH+0x292>
		Error_Handler();
 8000702:	f000 fc1d 	bl	8000f40 <Error_Handler>
	}
	break;
 8000706:	e08e      	b.n	8000826 <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8000708:	2308      	movs	r3, #8
 800070a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4619      	mov	r1, r3
 8000716:	484e      	ldr	r0, [pc, #312]	; (8000850 <ADC_Select_CH+0x2bc>)
 8000718:	f001 f870 	bl	80017fc <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	f000 8083 	beq.w	800082a <ADC_Select_CH+0x296>
		Error_Handler();
 8000724:	f000 fc0c 	bl	8000f40 <Error_Handler>
	}
	break;
 8000728:	e07f      	b.n	800082a <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 800072a:	2309      	movs	r3, #9
 800072c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4619      	mov	r1, r3
 8000738:	4845      	ldr	r0, [pc, #276]	; (8000850 <ADC_Select_CH+0x2bc>)
 800073a:	f001 f85f 	bl	80017fc <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d074      	beq.n	800082e <ADC_Select_CH+0x29a>
		Error_Handler();
 8000744:	f000 fbfc 	bl	8000f40 <Error_Handler>
	}
	break;
 8000748:	e071      	b.n	800082e <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 800074a:	230a      	movs	r3, #10
 800074c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	483d      	ldr	r0, [pc, #244]	; (8000850 <ADC_Select_CH+0x2bc>)
 800075a:	f001 f84f 	bl	80017fc <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d066      	beq.n	8000832 <ADC_Select_CH+0x29e>
		Error_Handler();
 8000764:	f000 fbec 	bl	8000f40 <Error_Handler>
	}
	break;
 8000768:	e063      	b.n	8000832 <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 800076a:	230b      	movs	r3, #11
 800076c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4619      	mov	r1, r3
 8000778:	4835      	ldr	r0, [pc, #212]	; (8000850 <ADC_Select_CH+0x2bc>)
 800077a:	f001 f83f 	bl	80017fc <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d058      	beq.n	8000836 <ADC_Select_CH+0x2a2>
		Error_Handler();
 8000784:	f000 fbdc 	bl	8000f40 <Error_Handler>
	}
	break;
 8000788:	e055      	b.n	8000836 <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 800078a:	230c      	movs	r3, #12
 800078c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4619      	mov	r1, r3
 8000798:	482d      	ldr	r0, [pc, #180]	; (8000850 <ADC_Select_CH+0x2bc>)
 800079a:	f001 f82f 	bl	80017fc <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d04a      	beq.n	800083a <ADC_Select_CH+0x2a6>
		Error_Handler();
 80007a4:	f000 fbcc 	bl	8000f40 <Error_Handler>
	}
	break;
 80007a8:	e047      	b.n	800083a <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 80007aa:	230d      	movs	r3, #13
 80007ac:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4619      	mov	r1, r3
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <ADC_Select_CH+0x2bc>)
 80007ba:	f001 f81f 	bl	80017fc <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d03c      	beq.n	800083e <ADC_Select_CH+0x2aa>
		Error_Handler();
 80007c4:	f000 fbbc 	bl	8000f40 <Error_Handler>
	}
	break;
 80007c8:	e039      	b.n	800083e <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 80007ca:	230e      	movs	r3, #14
 80007cc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <ADC_Select_CH+0x2bc>)
 80007da:	f001 f80f 	bl	80017fc <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d02e      	beq.n	8000842 <ADC_Select_CH+0x2ae>
		Error_Handler();
 80007e4:	f000 fbac 	bl	8000f40 <Error_Handler>
	}
	break;
 80007e8:	e02b      	b.n	8000842 <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	4815      	ldr	r0, [pc, #84]	; (8000850 <ADC_Select_CH+0x2bc>)
 80007fa:	f000 ffff 	bl	80017fc <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d020      	beq.n	8000846 <ADC_Select_CH+0x2b2>
		Error_Handler();
 8000804:	f000 fb9c 	bl	8000f40 <Error_Handler>
	}
	break;
 8000808:	e01d      	b.n	8000846 <ADC_Select_CH+0x2b2>
	break;
 800080a:	bf00      	nop
 800080c:	e01c      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800080e:	bf00      	nop
 8000810:	e01a      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000812:	bf00      	nop
 8000814:	e018      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000816:	bf00      	nop
 8000818:	e016      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800081a:	bf00      	nop
 800081c:	e014      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800081e:	bf00      	nop
 8000820:	e012      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000822:	bf00      	nop
 8000824:	e010      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000826:	bf00      	nop
 8000828:	e00e      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800082a:	bf00      	nop
 800082c:	e00c      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800082e:	bf00      	nop
 8000830:	e00a      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000832:	bf00      	nop
 8000834:	e008      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000836:	bf00      	nop
 8000838:	e006      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800083a:	bf00      	nop
 800083c:	e004      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 800083e:	bf00      	nop
 8000840:	e002      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000842:	bf00      	nop
 8000844:	e000      	b.n	8000848 <ADC_Select_CH+0x2b4>
	break;
 8000846:	bf00      	nop
	}
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000090 	.word	0x20000090

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	; 0x58
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t txd_msg_buffer[64] = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	223c      	movs	r2, #60	; 0x3c
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fa49 	bl	8004cfc <memset>
	uint8_t rpm;
	int controlMode = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fd8f 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f8d7 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 faa9 	bl	8000dcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087a:	f000 fa53 	bl	8000d24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800087e:	f000 f931 	bl	8000ae4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000882:	f000 fa79 	bl	8000d78 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8000886:	f000 f9cd 	bl	8000c24 <MX_TIM5_Init>
  MX_TIM4_Init();
 800088a:	f000 f97d 	bl	8000b88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim5);
 800088e:	4859      	ldr	r0, [pc, #356]	; (80009f4 <main+0x1a0>)
 8000890:	f002 f9c4 	bl	8002c1c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000894:	2100      	movs	r1, #0
 8000896:	4857      	ldr	r0, [pc, #348]	; (80009f4 <main+0x1a0>)
 8000898:	f002 facc 	bl	8002e34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800089c:	2104      	movs	r1, #4
 800089e:	4855      	ldr	r0, [pc, #340]	; (80009f4 <main+0x1a0>)
 80008a0:	f002 fac8 	bl	8002e34 <HAL_TIM_PWM_Start>

uint32_t RPM =0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
uint32_t time = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
uint32_t new_time=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44

sprintf((char*)txd_msg_buffer, "\r\n SETUP MODE");
 80008b0:	463b      	mov	r3, r7
 80008b2:	4951      	ldr	r1, [pc, #324]	; (80009f8 <main+0x1a4>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fa29 	bl	8004d0c <siprintf>
HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80008ba:	463b      	mov	r3, r7
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fc8f 	bl	80001e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4639      	mov	r1, r7
 80008c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008cc:	484b      	ldr	r0, [pc, #300]	; (80009fc <main+0x1a8>)
 80008ce:	f003 f9c0 	bl	8003c52 <HAL_UART_Transmit>

sprintf((char*)txd_msg_buffer, "\r\n MOTOR SPEED - enter 0 for manual mode: ");
 80008d2:	463b      	mov	r3, r7
 80008d4:	494a      	ldr	r1, [pc, #296]	; (8000a00 <main+0x1ac>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fa18 	bl	8004d0c <siprintf>
HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc7e 	bl	80001e0 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4639      	mov	r1, r7
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	4843      	ldr	r0, [pc, #268]	; (80009fc <main+0x1a8>)
 80008f0:	f003 f9af 	bl	8003c52 <HAL_UART_Transmit>
rcv_intpt_flag = 00;
 80008f4:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <main+0x1b0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
HAL_UART_Receive_IT(&huart6, &byte, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x1b4>)
 80008fe:	483f      	ldr	r0, [pc, #252]	; (80009fc <main+0x1a8>)
 8000900:	f003 fa39 	bl	8003d76 <HAL_UART_Receive_IT>

while(rcv_intpt_flag == (00)){}
 8000904:	bf00      	nop
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <main+0x1b0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0fb      	beq.n	8000906 <main+0xb2>

controlMode = byte - '0';
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <main+0x1b4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3b30      	subs	r3, #48	; 0x30
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
HAL_TIM_Base_Start_IT(&htim4);
 8000916:	483d      	ldr	r0, [pc, #244]	; (8000a0c <main+0x1b8>)
 8000918:	f002 f9d0 	bl	8002cbc <HAL_TIM_Base_Start_IT>
time = HAL_GetTick();
 800091c:	f000 fd9e 	bl	800145c <HAL_GetTick>
 8000920:	6538      	str	r0, [r7, #80]	; 0x50
  while (1)
  {
	  //potentiometer code
	  //manual mode

	  ADC_Select_CH(9);
 8000922:	2009      	movs	r0, #9
 8000924:	f7ff fe36 	bl	8000594 <ADC_Select_CH>
	  HAL_ADC_Start(&hadc1);
 8000928:	4839      	ldr	r0, [pc, #228]	; (8000a10 <main+0x1bc>)
 800092a:	f000 fde7 	bl	80014fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800092e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000932:	4837      	ldr	r0, [pc, #220]	; (8000a10 <main+0x1bc>)
 8000934:	f000 fec9 	bl	80016ca <HAL_ADC_PollForConversion>
	  uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 8000938:	4835      	ldr	r0, [pc, #212]	; (8000a10 <main+0x1bc>)
 800093a:	f000 ff51 	bl	80017e0 <HAL_ADC_GetValue>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_ADC_Stop(&hadc1);
 8000944:	4832      	ldr	r0, [pc, #200]	; (8000a10 <main+0x1bc>)
 8000946:	f000 fe8d 	bl	8001664 <HAL_ADC_Stop>
	  if(controlMode == 0){
 800094a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <main+0x106>
		  motorSpeed = ADC_CH9;
 8000950:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000958:	e007      	b.n	800096a <main+0x116>
	  }
	  else{
		  motorSpeed = controlMode*10;
 800095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	4413      	add	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }


	  //motor code
	  if (ADC_CH9 <= 127){
 800096a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800096e:	2b00      	cmp	r3, #0
 8000970:	db09      	blt.n	8000986 <main+0x132>
		  TIM5->CCR2 = 0;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <main+0x1c0>)
 8000974:	2200      	movs	r2, #0
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR1 = 50 + ((255 - 50) / (127 - 0)) * (motorSpeed - 0);
 8000978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800097c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <main+0x1c0>)
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
 8000984:	e008      	b.n	8000998 <main+0x144>
		  //output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)

	  }
	  else{
		  TIM5->CCR1 = 0;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <main+0x1c0>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 50 + ((255 - 50) / (255 - 128)) * (motorSpeed - 128);
 800098c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000990:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <main+0x1c0>)
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
	  }


	  if (HAL_GetTick() - time >= 1000)
 8000998:	f000 fd60 	bl	800145c <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a6:	d3bc      	bcc.n	8000922 <main+0xce>
	     {
		  RPM = (rpm_tick_count/20)*60;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <main+0x1c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <main+0x1c8>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	4613      	mov	r3, r2
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
		  rpm_tick_count =0;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <main+0x1c4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
		  sprintf((char*)txd_msg_buffer, "\r\n RPM: %d",RPM);
 80009c8:	463b      	mov	r3, r7
 80009ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009cc:	4914      	ldr	r1, [pc, #80]	; (8000a20 <main+0x1cc>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f99c 	bl	8004d0c <siprintf>
		  HAL_UART_Transmit(&huart6,txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc02 	bl	80001e0 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4639      	mov	r1, r7
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <main+0x1a8>)
 80009e8:	f003 f933 	bl	8003c52 <HAL_UART_Transmit>
		  time = HAL_GetTick();
 80009ec:	f000 fd36 	bl	800145c <HAL_GetTick>
 80009f0:	6538      	str	r0, [r7, #80]	; 0x50
  {
 80009f2:	e796      	b.n	8000922 <main+0xce>
 80009f4:	20000120 	.word	0x20000120
 80009f8:	08005600 	.word	0x08005600
 80009fc:	200001ac 	.word	0x200001ac
 8000a00:	08005610 	.word	0x08005610
 8000a04:	200001f0 	.word	0x200001f0
 8000a08:	2000008c 	.word	0x2000008c
 8000a0c:	200000d8 	.word	0x200000d8
 8000a10:	20000090 	.word	0x20000090
 8000a14:	40000c00 	.word	0x40000c00
 8000a18:	200001f2 	.word	0x200001f2
 8000a1c:	cccccccd 	.word	0xcccccccd
 8000a20:	0800563c 	.word	0x0800563c

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	2230      	movs	r2, #48	; 0x30
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 f962 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <SystemClock_Config+0xb8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <SystemClock_Config+0xb8>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <SystemClock_Config+0xb8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <SystemClock_Config+0xbc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <SystemClock_Config+0xbc>)
 8000a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <SystemClock_Config+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fc27 	bl	80022ec <HAL_RCC_OscConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000aa4:	f000 fa4c 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fe8a 	bl	80027dc <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ace:	f000 fa37 	bl	8000f40 <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <MX_ADC1_Init+0x9c>)
 8000afa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_ADC1_Init+0xa0>)
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b46:	f000 fc95 	bl	8001474 <HAL_ADC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b50:	f000 f9f6 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b54:	2309      	movs	r3, #9
 8000b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b66:	f000 fe49 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b70:	f000 f9e6 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	40012000 	.word	0x40012000
 8000b84:	0f000001 	.word	0x0f000001

08000b88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <MX_TIM4_Init+0x98>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bac:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000bb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bce:	f002 f825 	bl	8002c1c <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000bd8:	f000 f9b2 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000bea:	f002 fb9d 	bl	8003328 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f000 f9a4 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM4_Init+0x94>)
 8000c06:	f002 ff55 	bl	8003ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f996 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000d8 	.word	0x200000d8
 8000c20:	40000800 	.word	0x40000800

08000c24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c56:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <MX_TIM5_Init+0xfc>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 160-1;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c5c:	229f      	movs	r2, #159	; 0x9f
 8000c5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c68:	2263      	movs	r2, #99	; 0x63
 8000c6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c78:	4828      	ldr	r0, [pc, #160]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c7a:	f001 ffcf 	bl	8002c1c <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000c84:	f000 f95c 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4821      	ldr	r0, [pc, #132]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000c96:	f002 fb47 	bl	8003328 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000ca0:	f000 f94e 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000ca6:	f002 f86b 	bl	8002d80 <HAL_TIM_PWM_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000cb0:	f000 f946 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4816      	ldr	r0, [pc, #88]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000cc4:	f002 fef6 	bl	8003ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000cce:	f000 f937 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	2360      	movs	r3, #96	; 0x60
 8000cd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000cd6:	2331      	movs	r3, #49	; 0x31
 8000cd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000cea:	f002 fa5b 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000cf4:	f000 f924 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000d00:	f002 fa50 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8000d0a:	f000 f919 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM5_Init+0xf8>)
 8000d10:	f000 f9c6 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000120 	.word	0x20000120
 8000d20:	40000c00 	.word	0x40000c00

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART2_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f002 ff2c 	bl	8003bb8 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f8eb 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000168 	.word	0x20000168
 8000d74:	40004400 	.word	0x40004400

08000d78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART6_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000db0:	f002 ff02 	bl	8003bb8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f8c1 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001ac 	.word	0x200001ac
 8000dc8:	40011400 	.word	0x40011400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e58:	f001 fa16 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e74:	f001 f884 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480f      	ldr	r0, [pc, #60]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e90:	f001 f876 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8000e94:	2304      	movs	r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000eaa:	f001 f869 	bl	8001f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f000 ff9b 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000eb8:	2008      	movs	r0, #8
 8000eba:	f000 ffb4 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RPM_TICK_Pin){
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d105      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x1c>
		rpm_tick_count += 1;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x28>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	200001f2 	.word	0x200001f2

08000f04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_UART_RxCpltCallback+0x2c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d108      	bne.n	8000f28 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4906      	ldr	r1, [pc, #24]	; (8000f34 <HAL_UART_RxCpltCallback+0x30>)
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HAL_UART_RxCpltCallback+0x34>)
 8000f1e:	f002 fe98 	bl	8003c52 <HAL_UART_Transmit>
		rcv_intpt_flag = 1;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_UART_RxCpltCallback+0x38>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	}
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40011400 	.word	0x40011400
 8000f34:	2000008c 	.word	0x2000008c
 8000f38:	200001ac 	.word	0x200001ac
 8000f3c:	200001f0 	.word	0x200001f0

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f000 ff24 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_ADC_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d127      	bne.n	800100e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_ADC_MspInit+0x84>)
 800100a:	f000 ffb9 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020400 	.word	0x40020400

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <HAL_TIM_Base_MspInit+0x70>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d116      	bne.n	8001064 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	201e      	movs	r0, #30
 8001058:	f000 fec9 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800105c:	201e      	movs	r0, #30
 800105e:	f000 fee2 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001062:	e012      	b.n	800108a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x78>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10d      	bne.n	800108a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_TIM_Base_MspInit+0x74>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000800 	.word	0x40000800
 8001098:	40023800 	.word	0x40023800
 800109c:	40000c00 	.word	0x40000c00

080010a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_TIM_MspPostInit+0x68>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d11d      	bne.n	80010fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_TIM_MspPostInit+0x6c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_TIM_MspPostInit+0x6c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010de:	2303      	movs	r3, #3
 80010e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_TIM_MspPostInit+0x70>)
 80010fa:	f000 ff41 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000c00 	.word	0x40000c00
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a36      	ldr	r2, [pc, #216]	; (800120c <HAL_UART_MspInit+0xf8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12c      	bne.n	8001190 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_UART_MspInit+0xfc>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_UART_MspInit+0xfc>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_UART_MspInit+0xfc>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_UART_MspInit+0xfc>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <HAL_UART_MspInit+0xfc>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_UART_MspInit+0xfc>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116e:	230c      	movs	r3, #12
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4822      	ldr	r0, [pc, #136]	; (8001214 <HAL_UART_MspInit+0x100>)
 800118a:	f000 fef9 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800118e:	e038      	b.n	8001202 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_UART_MspInit+0x104>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d133      	bne.n	8001202 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_UART_MspInit+0xfc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d2:	23c0      	movs	r3, #192	; 0xc0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011e2:	2308      	movs	r3, #8
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <HAL_UART_MspInit+0x108>)
 80011ee:	f000 fec7 	bl	8001f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2047      	movs	r0, #71	; 0x47
 80011f8:	f000 fdf9 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011fc:	2047      	movs	r0, #71	; 0x47
 80011fe:	f000 fe12 	bl	8001e26 <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000
 8001218:	40011400 	.word	0x40011400
 800121c:	40020800 	.word	0x40020800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8e2 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8001278:	2004      	movs	r0, #4
 800127a:	f001 f81f 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM4_IRQHandler+0x10>)
 800128a:	f001 fe83 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000d8 	.word	0x200000d8

08001298 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART6_IRQHandler+0x10>)
 800129e:	f002 fd9b 	bl	8003dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001ac 	.word	0x200001ac

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f003 fce4 	bl	8004ca8 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20018000 	.word	0x20018000
 800130c:	00000400 	.word	0x00000400
 8001310:	200001f4 	.word	0x200001f4
 8001314:	20000210 	.word	0x20000210

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd7 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f003 fca3 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fa71 	bl	8000854 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001380:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 8001384:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001388:	2000020c 	.word	0x2000020c

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 fd0d 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdc2 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fd25 	bl	8001e42 <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 fced 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000008 	.word	0x20000008
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	200001f8 	.word	0x200001f8

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200001f8 	.word	0x200001f8

08001474 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e033      	b.n	80014f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd82 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ba:	f023 0302 	bic.w	r3, r3, #2
 80014be:	f043 0202 	orr.w	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 faba 	bl	8001a40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
 80014e2:	e001      	b.n	80014e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Start+0x1a>
 8001512:	2302      	movs	r3, #2
 8001514:	e097      	b.n	8001646 <HAL_ADC_Start+0x14a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d018      	beq.n	800155e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <HAL_ADC_Start+0x158>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <HAL_ADC_Start+0x15c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9a      	lsrs	r2, r3, #18
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001550:	e002      	b.n	8001558 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d15f      	bne.n	800162c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001596:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015aa:	d106      	bne.n	80015ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f023 0206 	bic.w	r2, r3, #6
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_ADC_Start+0x160>)
 80015ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d129      	bne.n	8001644 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e020      	b.n	8001644 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_ADC_Start+0x164>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d11b      	bne.n	8001644 <HAL_ADC_Start+0x148>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d114      	bne.n	8001644 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	e00b      	b.n	8001644 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f043 0210 	orr.w	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000
 8001658:	431bde83 	.word	0x431bde83
 800165c:	40012300 	.word	0x40012300
 8001660:	40012000 	.word	0x40012000

08001664 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_ADC_Stop+0x16>
 8001676:	2302      	movs	r3, #2
 8001678:	e021      	b.n	80016be <HAL_ADC_Stop+0x5a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d113      	bne.n	8001710 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e063      	b.n	80017d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001710:	f7ff fea4 	bl	800145c <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001716:	e021      	b.n	800175c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171e:	d01d      	beq.n	800175c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_ADC_PollForConversion+0x6c>
 8001726:	f7ff fe99 	bl	800145c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d212      	bcs.n	800175c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b02      	cmp	r3, #2
 8001742:	d00b      	beq.n	800175c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f043 0204 	orr.w	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e03d      	b.n	80017d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d1d6      	bne.n	8001718 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0212 	mvn.w	r2, #18
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d123      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11f      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d111      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d105      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1c>
 8001814:	2302      	movs	r3, #2
 8001816:	e105      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x228>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d925      	bls.n	8001874 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	3b1e      	subs	r3, #30
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43da      	mvns	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	400a      	ands	r2, r1
 800184c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68d9      	ldr	r1, [r3, #12]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	4603      	mov	r3, r0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4403      	add	r3, r0
 8001866:	3b1e      	subs	r3, #30
 8001868:	409a      	lsls	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	e022      	b.n	80018ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	2207      	movs	r2, #7
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4403      	add	r3, r0
 80018b0:	409a      	lsls	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d824      	bhi.n	800190c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b05      	subs	r3, #5
 80018d4:	221f      	movs	r2, #31
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	400a      	ands	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b05      	subs	r3, #5
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	e04c      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d824      	bhi.n	800195e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b23      	subs	r3, #35	; 0x23
 8001926:	221f      	movs	r2, #31
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43da      	mvns	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	400a      	ands	r2, r1
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b23      	subs	r3, #35	; 0x23
 8001950:	fa00 f203 	lsl.w	r2, r0, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
 800195c:	e023      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b41      	subs	r3, #65	; 0x41
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b41      	subs	r3, #65	; 0x41
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_ADC_ConfigChannel+0x234>)
 80019a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <HAL_ADC_ConfigChannel+0x238>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d109      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1cc>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_ADC_ConfigChannel+0x238>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d123      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x21e>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d003      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x1e6>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b11      	cmp	r3, #17
 80019e0:	d11b      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d111      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_ADC_ConfigChannel+0x23c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_ADC_ConfigChannel+0x240>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9a      	lsrs	r2, r3, #18
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40012300 	.word	0x40012300
 8001a34:	40012000 	.word	0x40012000
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <ADC_Init+0x1f0>)
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	021a      	lsls	r2, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <ADC_Init+0x1f4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d022      	beq.n	8001b1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e00f      	b.n	8001b3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0202 	bic.w	r2, r2, #2
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6899      	ldr	r1, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e1b      	ldrb	r3, [r3, #24]
 8001b58:	005a      	lsls	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	3b01      	subs	r3, #1
 8001b98:	035a      	lsls	r2, r3, #13
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e007      	b.n	8001bb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	051a      	lsls	r2, r3, #20
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bf6:	025a      	lsls	r2, r3, #9
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	029a      	lsls	r2, r3, #10
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	609a      	str	r2, [r3, #8]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40012300 	.word	0x40012300
 8001c34:	0f000001 	.word	0x0f000001

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff29 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff3e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff31 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff faf8 	bl	800145c <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d008      	beq.n	8001e8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e052      	b.n	8001f32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0216 	bic.w	r2, r2, #22
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <HAL_DMA_Abort+0x62>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001edc:	e013      	b.n	8001f06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ede:	f7ff fabd 	bl	800145c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d90c      	bls.n	8001f06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e015      	b.n	8001f32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e4      	bne.n	8001ede <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e00c      	b.n	8001f72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e159      	b.n	8002250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 8148 	bne.w	800224a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d130      	bne.n	8002034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a2 	beq.w	800224a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b54      	ldr	r3, [pc, #336]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_GPIO_Init+0x2ec>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a49      	ldr	r2, [pc, #292]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d019      	beq.n	8002182 <HAL_GPIO_Init+0x202>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_GPIO_Init+0x2f4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_GPIO_Init+0x1fe>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_GPIO_Init+0x2f8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00d      	beq.n	800217a <HAL_GPIO_Init+0x1fa>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_GPIO_Init+0x2fc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <HAL_GPIO_Init+0x1f6>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <HAL_GPIO_Init+0x300>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_GPIO_Init+0x1f2>
 800216e:	2304      	movs	r3, #4
 8002170:	e008      	b.n	8002184 <HAL_GPIO_Init+0x204>
 8002172:	2307      	movs	r3, #7
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x204>
 8002176:	2303      	movs	r3, #3
 8002178:	e004      	b.n	8002184 <HAL_GPIO_Init+0x204>
 800217a:	2302      	movs	r3, #2
 800217c:	e002      	b.n	8002184 <HAL_GPIO_Init+0x204>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x204>
 8002182:	2300      	movs	r3, #0
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f002 0203 	and.w	r2, r2, #3
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	4093      	lsls	r3, r2
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002194:	4935      	ldr	r1, [pc, #212]	; (800226c <HAL_GPIO_Init+0x2ec>)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_GPIO_Init+0x304>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_GPIO_Init+0x304>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_GPIO_Init+0x304>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_GPIO_Init+0x304>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_GPIO_Init+0x304>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_GPIO_Init+0x304>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_GPIO_Init+0x304>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002244:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <HAL_GPIO_Init+0x304>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	f67f aea2 	bls.w	8001f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40013c00 	.word	0x40013c00

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a4:	e003      	b.n	80022ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fdfc 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e267      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b7e      	ldr	r3, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e242      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b70      	ldr	r3, [pc, #448]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6c      	ldr	r2, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a68      	ldr	r2, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff f85a 	bl	800145c <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff f856 	bl	800145c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e207      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff f846 	bl	800145c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff f842 	bl	800145c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f3      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c7      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_OscConfig+0x244>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fffb 	bl	800145c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fff7 	bl	800145c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a8      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe ffda 	bl	800145c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe ffd6 	bl	800145c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e187      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x248>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe ffba 	bl	800145c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe ffb6 	bl	800145c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e167      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x248>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe ffa3 	bl	800145c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe ff9f 	bl	800145c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e150      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7d      	ldr	r3, [pc, #500]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a7c      	ldr	r2, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b7a      	ldr	r3, [pc, #488]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b77      	ldr	r3, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a73      	ldr	r2, [pc, #460]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7fe ff5f 	bl	800145c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe ff5b 	bl	800145c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ea>
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a63      	ldr	r2, [pc, #396]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x30c>
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025f8:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a57      	ldr	r2, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe ff20 	bl	800145c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe ff1c 	bl	800145c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0cb      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe ff0a 	bl	800145c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe ff06 	bl	800145c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b5      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe feda 	bl	800145c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fed6 	bl	800145c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491b      	ldr	r1, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe feaf 	bl	800145c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe feab 	bl	800145c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e05c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x416>
 8002720:	e054      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fe98 	bl	800145c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fe94 	bl	800145c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e045      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fe fdc6 	bl	800145c <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fdc2 	bl	800145c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fd26 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08005648 	.word	0x08005648
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b094      	sub	sp, #80	; 0x50
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80e1 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e0db      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b73      	ldr	r3, [pc, #460]	; (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029e0:	e0db      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
 8002a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2c:	0150      	lsls	r0, r2, #5
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4621      	mov	r1, r4
 8002a34:	1a51      	subs	r1, r2, r1
 8002a36:	6139      	str	r1, [r7, #16]
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	018b      	lsls	r3, r1, #6
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a56:	4651      	mov	r1, sl
 8002a58:	018a      	lsls	r2, r1, #6
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a60:	4659      	mov	r1, fp
 8002a62:	eb63 0901 	sbc.w	r9, r3, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	eb18 0303 	adds.w	r3, r8, r3
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	462b      	mov	r3, r5
 8002a88:	eb49 0303 	adc.w	r3, r9, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	024b      	lsls	r3, r1, #9
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	024a      	lsls	r2, r1, #9
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab8:	f7fd fbea 	bl	8000290 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	e058      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	0159      	lsls	r1, r3, #5
 8002aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af2:	0150      	lsls	r0, r2, #5
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4641      	mov	r1, r8
 8002afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b18:	ebb2 040a 	subs.w	r4, r2, sl
 8002b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	eb45 0303 	adc.w	r3, r5, r3
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b58:	4621      	mov	r1, r4
 8002b5a:	028a      	lsls	r2, r1, #10
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	61fa      	str	r2, [r7, #28]
 8002b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6c:	f7fd fb90 	bl	8000290 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3750      	adds	r7, #80	; 0x50
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	007a1200 	.word	0x007a1200

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08005658 	.word	0x08005658

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffdc 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08005658 	.word	0x08005658

08002c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e041      	b.n	8002cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe f9ee 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 fc5e 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e044      	b.n	8002d5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_TIM_Base_Start_IT+0xb0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x6c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d013      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x6c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x6c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x6c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x6c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIM_Base_Start_IT+0xc0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d111      	bne.n	8002d4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d010      	beq.n	8002d5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	e007      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40014000 	.word	0x40014000

08002d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e041      	b.n	8002e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f839 	bl	8002e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fbac 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start+0x24>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e022      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d109      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x3e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e015      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x58>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e008      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e068      	b.n	8002f78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0x82>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	e013      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x92>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed4:	e003      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fdbe 	bl	8003a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_TIM_PWM_Start+0x14c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_TIM_PWM_Start+0x14c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d013      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_TIM_PWM_Start+0x150>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_TIM_PWM_Start+0x154>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_TIM_PWM_Start+0x158>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <HAL_TIM_PWM_Start+0x15c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d111      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d010      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	e007      	b.n	8002f76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40014000 	.word	0x40014000

08002f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0202 	mvn.w	r2, #2
 8002fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa81 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa73 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fa84 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0204 	mvn.w	r2, #4
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa57 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa49 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fa5a 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0208 	mvn.w	r2, #8
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa2d 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa1f 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa30 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2208      	movs	r2, #8
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa03 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9f5 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa06 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0201 	mvn.w	r2, #1
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9cf 	bl	80034b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fd30 	bl	8003ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9cb 	bl	8003506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0220 	mvn.w	r2, #32
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fcfa 	bl	8003b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0ae      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	f200 809f 	bhi.w	8003310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003311 	.word	0x08003311
 80031e0:	08003311 	.word	0x08003311
 80031e4:	08003311 	.word	0x08003311
 80031e8:	0800324d 	.word	0x0800324d
 80031ec:	08003311 	.word	0x08003311
 80031f0:	08003311 	.word	0x08003311
 80031f4:	08003311 	.word	0x08003311
 80031f8:	0800328f 	.word	0x0800328f
 80031fc:	08003311 	.word	0x08003311
 8003200:	08003311 	.word	0x08003311
 8003204:	08003311 	.word	0x08003311
 8003208:	080032cf 	.word	0x080032cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa02 	bl	800361c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	619a      	str	r2, [r3, #24]
      break;
 800324a:	e064      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fa48 	bl	80036e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6999      	ldr	r1, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	619a      	str	r2, [r3, #24]
      break;
 800328c:	e043      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fa93 	bl	80037c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0204 	bic.w	r2, r2, #4
 80032b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]
      break;
 80032cc:	e023      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fadd 	bl	8003894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69d9      	ldr	r1, [r3, #28]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
      break;
 800330e:	e002      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
      break;
 8003314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIM_ConfigClockSource+0x1c>
 8003340:	2302      	movs	r3, #2
 8003342:	e0b4      	b.n	80034ae <HAL_TIM_ConfigClockSource+0x186>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d03e      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0xd4>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003382:	f200 8087 	bhi.w	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	f000 8086 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x172>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d87f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d01a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xa6>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d87b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d050      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x11a>
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d877      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d03c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xfa>
 80033a8:	2b50      	cmp	r3, #80	; 0x50
 80033aa:	d873      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d058      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x13a>
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d86f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d064      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d86b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d060      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d867      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d05a      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	e062      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f000 fb23 	bl	8003a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
      break;
 80033fa:	e04f      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f000 fb0c 	bl	8003a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341e:	609a      	str	r2, [r3, #8]
      break;
 8003420:	e03c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fa80 	bl	8003934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2150      	movs	r1, #80	; 0x50
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fad9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003440:	e02c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	461a      	mov	r2, r3
 8003450:	f000 fa9f 	bl	8003992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2160      	movs	r1, #96	; 0x60
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fac9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003460:	e01c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	461a      	mov	r2, r3
 8003470:	f000 fa60 	bl	8003934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fab9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003480:	e00c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f000 fab0 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003492:	e003      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      break;
 8003498:	e000      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800349a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a34      	ldr	r2, [pc, #208]	; (8003600 <TIM_Base_SetConfig+0xe4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a31      	ldr	r2, [pc, #196]	; (8003604 <TIM_Base_SetConfig+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a30      	ldr	r2, [pc, #192]	; (8003608 <TIM_Base_SetConfig+0xec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x38>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a2f      	ldr	r2, [pc, #188]	; (800360c <TIM_Base_SetConfig+0xf0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIM_Base_SetConfig+0xe4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01b      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d017      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a22      	ldr	r2, [pc, #136]	; (8003604 <TIM_Base_SetConfig+0xe8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <TIM_Base_SetConfig+0xec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <TIM_Base_SetConfig+0xf0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <TIM_Base_SetConfig+0xf4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <TIM_Base_SetConfig+0xf8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <TIM_Base_SetConfig+0xfc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <TIM_Base_SetConfig+0xe4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	615a      	str	r2, [r3, #20]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800

0800361c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <TIM_OC1_SetConfig+0xc8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10c      	bne.n	8003692 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0308 	bic.w	r3, r3, #8
 800367e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <TIM_OC1_SetConfig+0xc8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40010000 	.word	0x40010000

080036e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0210 	bic.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0320 	bic.w	r3, r3, #32
 8003732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <TIM_OC2_SetConfig+0xd4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10d      	bne.n	8003764 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <TIM_OC2_SetConfig+0xd4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d113      	bne.n	8003794 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000

080037c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <TIM_OC3_SetConfig+0xd0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10d      	bne.n	800383a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <TIM_OC3_SetConfig+0xd0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d113      	bne.n	800386a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000

08003894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <TIM_OC4_SetConfig+0x9c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d109      	bne.n	8003908 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000

08003934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 030a 	bic.w	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	621a      	str	r2, [r3, #32]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b087      	sub	sp, #28
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e050      	b.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d013      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10c      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40014000 	.word	0x40014000

08003b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e03f      	b.n	8003c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fa98 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fddf 	bl	80047c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b08a      	sub	sp, #40	; 0x28
 8003c56:	af02      	add	r7, sp, #8
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d17c      	bne.n	8003d6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_Transmit+0x2c>
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e075      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Transmit+0x3e>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e06e      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2221      	movs	r2, #33	; 0x21
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd fbd9 	bl	800145c <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d108      	bne.n	8003cd4 <HAL_UART_Transmit+0x82>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	e003      	b.n	8003cdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ce4:	e02a      	b.n	8003d3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb1f 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1cf      	bne.n	8003ce6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 faef 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d11d      	bne.n	8003dcc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Receive_IT+0x26>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e016      	b.n	8003dce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Receive_IT+0x38>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e00f      	b.n	8003dce <HAL_UART_Receive_IT+0x58>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fb24 	bl	8004410 <UART_Start_Receive_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	e000      	b.n	8003dce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b0ba      	sub	sp, #232	; 0xe8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_UART_IRQHandler+0x66>
 8003e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fc07 	bl	800464a <UART_Receive_IT>
      return;
 8003e3c:	e256      	b.n	80042ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80de 	beq.w	8004004 <HAL_UART_IRQHandler+0x22c>
 8003e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80d1 	beq.w	8004004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_UART_IRQHandler+0xae>
 8003e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_UART_IRQHandler+0xd2>
 8003e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f043 0202 	orr.w	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_UART_IRQHandler+0xf6>
 8003eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <HAL_UART_IRQHandler+0x126>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f043 0208 	orr.w	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 81ed 	beq.w	80042e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_UART_IRQHandler+0x14e>
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb92 	bl	800464a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_UART_IRQHandler+0x17a>
 8003f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d04f      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa9a 	bl	800448c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d141      	bne.n	8003fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1d9      	bne.n	8003f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d013      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	4a7d      	ldr	r2, [pc, #500]	; (80041b4 <HAL_UART_IRQHandler+0x3dc>)
 8003fc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd ffb7 	bl	8001f3a <HAL_DMA_Abort_IT>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	e00e      	b.n	8004000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f990 	bl	8004308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	e00a      	b.n	8004000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f98c 	bl	8004308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	e006      	b.n	8004000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f988 	bl	8004308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ffe:	e170      	b.n	80042e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	bf00      	nop
    return;
 8004002:	e16e      	b.n	80042e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	f040 814a 	bne.w	80042a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8143 	beq.w	80042a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 813c 	beq.w	80042a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	f040 80b4 	bne.w	80041b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800405c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8140 	beq.w	80042e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406e:	429a      	cmp	r2, r3
 8004070:	f080 8139 	bcs.w	80042e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800407a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	f000 8088 	beq.w	800419a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1d9      	bne.n	800408a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3314      	adds	r3, #20
 80040f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e1      	bne.n	80040d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800413c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e3      	bne.n	8004112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800417c:	65ba      	str	r2, [r7, #88]	; 0x58
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800418a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e3      	bne.n	8004158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd fe60 	bl	8001e5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8b6 	bl	800431c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041b0:	e099      	b.n	80042e6 <HAL_UART_IRQHandler+0x50e>
 80041b2:	bf00      	nop
 80041b4:	08004553 	.word	0x08004553
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808b 	beq.w	80042ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8086 	beq.w	80042ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004202:	647a      	str	r2, [r7, #68]	; 0x44
 8004204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	623b      	str	r3, [r7, #32]
   return(result);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800423a:	633a      	str	r2, [r7, #48]	; 0x30
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004280:	61fa      	str	r2, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	617b      	str	r3, [r7, #20]
   return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f83e 	bl	800431c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a0:	e023      	b.n	80042ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_UART_IRQHandler+0x4ea>
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f95d 	bl	800457a <UART_Transmit_IT>
    return;
 80042c0:	e014      	b.n	80042ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_UART_IRQHandler+0x514>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f99d 	bl	800461a <UART_EndTransmit_IT>
    return;
 80042e0:	e004      	b.n	80042ec <HAL_UART_IRQHandler+0x514>
    return;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <HAL_UART_IRQHandler+0x514>
      return;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <HAL_UART_IRQHandler+0x514>
      return;
 80042ea:	bf00      	nop
  }
}
 80042ec:	37e8      	adds	r7, #232	; 0xe8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop

080042f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b090      	sub	sp, #64	; 0x40
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	e050      	b.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d04c      	beq.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800434e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <UART_WaitOnFlagUntilTimeout+0x30>
 8004354:	f7fd f882 	bl	800145c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004360:	429a      	cmp	r2, r3
 8004362:	d241      	bcs.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004384:	637a      	str	r2, [r7, #52]	; 0x34
 8004386:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3314      	adds	r3, #20
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	613b      	str	r3, [r7, #16]
   return(result);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b8:	623a      	str	r2, [r7, #32]
 80043ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e00f      	b.n	8004408 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	429a      	cmp	r2, r3
 8004404:	d09f      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3740      	adds	r7, #64	; 0x40
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2222      	movs	r2, #34	; 0x22
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0220 	orr.w	r2, r2, #32
 800447c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b095      	sub	sp, #84	; 0x54
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b4:	643a      	str	r2, [r7, #64]	; 0x40
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e5      	bne.n	80044c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	2b01      	cmp	r3, #1
 8004502:	d119      	bne.n	8004538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60bb      	str	r3, [r7, #8]
   return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004524:	61ba      	str	r2, [r7, #24]
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004546:	bf00      	nop
 8004548:	3754      	adds	r7, #84	; 0x54
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fecb 	bl	8004308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b21      	cmp	r3, #33	; 0x21
 800458c:	d13e      	bne.n	800460c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	d114      	bne.n	80045c2 <UART_Transmit_IT+0x48>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]
 80045c0:	e008      	b.n	80045d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6211      	str	r1, [r2, #32]
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29b      	uxth	r3, r3
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4619      	mov	r1, r3
 80045e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10f      	bne.n	8004608 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800460c:	2302      	movs	r3, #2
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004630:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fe5a 	bl	80042f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b08c      	sub	sp, #48	; 0x30
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b22      	cmp	r3, #34	; 0x22
 800465c:	f040 80ab 	bne.w	80047b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004668:	d117      	bne.n	800469a <UART_Receive_IT+0x50>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d113      	bne.n	800469a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004688:	b29a      	uxth	r2, r3
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
 8004698:	e026      	b.n	80046e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ac:	d007      	beq.n	80046be <UART_Receive_IT+0x74>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <UART_Receive_IT+0x82>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e008      	b.n	80046de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d15a      	bne.n	80047b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0220 	bic.w	r2, r2, #32
 800470a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	d135      	bne.n	80047a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	613b      	str	r3, [r7, #16]
   return(result);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f023 0310 	bic.w	r3, r3, #16
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	623a      	str	r2, [r7, #32]
 8004764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d10a      	bne.n	800479a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fdbb 	bl	800431c <HAL_UARTEx_RxEventCallback>
 80047a6:	e002      	b.n	80047ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fc fbab 	bl	8000f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e002      	b.n	80047b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3730      	adds	r7, #48	; 0x30
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0c0      	sub	sp, #256	; 0x100
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	ea40 0301 	orr.w	r3, r0, r1
 80047e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004818:	f021 010c 	bic.w	r1, r1, #12
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004826:	430b      	orrs	r3, r1
 8004828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	6999      	ldr	r1, [r3, #24]
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	ea40 0301 	orr.w	r3, r0, r1
 8004846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <UART_SetConfig+0x2cc>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d005      	beq.n	8004860 <UART_SetConfig+0xa0>
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <UART_SetConfig+0x2d0>)
 800485c:	429a      	cmp	r2, r3
 800485e:	d104      	bne.n	800486a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe f9c8 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8004864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004868:	e003      	b.n	8004872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486a:	f7fe f9af 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 800486e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487c:	f040 810c 	bne.w	8004a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800488a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800488e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	1891      	adds	r1, r2, r2
 8004898:	65b9      	str	r1, [r7, #88]	; 0x58
 800489a:	415b      	adcs	r3, r3
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048a2:	4621      	mov	r1, r4
 80048a4:	eb12 0801 	adds.w	r8, r2, r1
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb43 0901 	adc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d0:	462b      	mov	r3, r5
 80048d2:	eb49 0303 	adc.w	r3, r9, r3
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048ee:	460b      	mov	r3, r1
 80048f0:	18db      	adds	r3, r3, r3
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
 80048f4:	4613      	mov	r3, r2
 80048f6:	eb42 0303 	adc.w	r3, r2, r3
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004904:	f7fb fcc4 	bl	8000290 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <UART_SetConfig+0x2d4>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011c      	lsls	r4, r3, #4
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004930:	415b      	adcs	r3, r3
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004938:	4641      	mov	r1, r8
 800493a:	eb12 0a01 	adds.w	sl, r2, r1
 800493e:	4649      	mov	r1, r9
 8004940:	eb43 0b01 	adc.w	fp, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004958:	4692      	mov	sl, r2
 800495a:	469b      	mov	fp, r3
 800495c:	4643      	mov	r3, r8
 800495e:	eb1a 0303 	adds.w	r3, sl, r3
 8004962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004966:	464b      	mov	r3, r9
 8004968:	eb4b 0303 	adc.w	r3, fp, r3
 800496c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800497c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004984:	460b      	mov	r3, r1
 8004986:	18db      	adds	r3, r3, r3
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
 800498a:	4613      	mov	r3, r2
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
 8004992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800499a:	f7fb fc79 	bl	8000290 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <UART_SetConfig+0x2d4>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2264      	movs	r2, #100	; 0x64
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	1acb      	subs	r3, r1, r3
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <UART_SetConfig+0x2d4>)
 80049bc:	fba3 2302 	umull	r2, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c8:	441c      	add	r4, r3
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e4:	415b      	adcs	r3, r3
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049ec:	4641      	mov	r1, r8
 80049ee:	1851      	adds	r1, r2, r1
 80049f0:	6339      	str	r1, [r7, #48]	; 0x30
 80049f2:	4649      	mov	r1, r9
 80049f4:	414b      	adcs	r3, r1
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a04:	4659      	mov	r1, fp
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0e:	4651      	mov	r1, sl
 8004a10:	00ca      	lsls	r2, r1, #3
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	4642      	mov	r2, r8
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a20:	464b      	mov	r3, r9
 8004a22:	460a      	mov	r2, r1
 8004a24:	eb42 0303 	adc.w	r3, r2, r3
 8004a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a40:	460b      	mov	r3, r1
 8004a42:	18db      	adds	r3, r3, r3
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a46:	4613      	mov	r3, r2
 8004a48:	eb42 0303 	adc.w	r3, r2, r3
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a56:	f7fb fc1b 	bl	8000290 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <UART_SetConfig+0x2d4>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <UART_SetConfig+0x2d4>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 0207 	and.w	r2, r3, #7
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4422      	add	r2, r4
 8004a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a88:	e105      	b.n	8004c96 <UART_SetConfig+0x4d6>
 8004a8a:	bf00      	nop
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	6239      	str	r1, [r7, #32]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aba:	4641      	mov	r1, r8
 8004abc:	1854      	adds	r4, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb43 0501 	adc.w	r5, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	00eb      	lsls	r3, r5, #3
 8004ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad2:	00e2      	lsls	r2, r4, #3
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	18e3      	adds	r3, r4, r3
 8004adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	eb45 0303 	adc.w	r3, r5, r3
 8004ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b06:	4629      	mov	r1, r5
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b10:	4621      	mov	r1, r4
 8004b12:	008a      	lsls	r2, r1, #2
 8004b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b18:	f7fb fbba 	bl	8000290 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b60      	ldr	r3, [pc, #384]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011c      	lsls	r4, r3, #4
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	61b9      	str	r1, [r7, #24]
 8004b44:	415b      	adcs	r3, r3
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6139      	str	r1, [r7, #16]
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bb6:	f7fb fb6b 	bl	8000290 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	; 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	3332      	adds	r3, #50	; 0x32
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bde:	441c      	add	r4, r3
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	673b      	str	r3, [r7, #112]	; 0x70
 8004be8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bfe:	4641      	mov	r1, r8
 8004c00:	1851      	adds	r1, r2, r1
 8004c02:	6039      	str	r1, [r7, #0]
 8004c04:	4649      	mov	r1, r9
 8004c06:	414b      	adcs	r3, r1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c16:	4659      	mov	r1, fp
 8004c18:	00cb      	lsls	r3, r1, #3
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c20:	4651      	mov	r1, sl
 8004c22:	00ca      	lsls	r2, r1, #3
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	464b      	mov	r3, r9
 8004c32:	460a      	mov	r2, r1
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
 8004c44:	667a      	str	r2, [r7, #100]	; 0x64
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c52:	4649      	mov	r1, r9
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4641      	mov	r1, r8
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c64:	f7fb fb14 	bl	8000290 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4422      	add	r2, r4
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	51eb851f 	.word	0x51eb851f

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4d0d      	ldr	r5, [pc, #52]	; (8004cec <__libc_init_array+0x38>)
 8004cb8:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	4d0b      	ldr	r5, [pc, #44]	; (8004cf4 <__libc_init_array+0x40>)
 8004cc6:	4c0c      	ldr	r4, [pc, #48]	; (8004cf8 <__libc_init_array+0x44>)
 8004cc8:	f000 fc8e 	bl	80055e8 <_init>
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	0800569c 	.word	0x0800569c
 8004cf0:	0800569c 	.word	0x0800569c
 8004cf4:	0800569c 	.word	0x0800569c
 8004cf8:	080056a0 	.word	0x080056a0

08004cfc <memset>:
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <siprintf>:
 8004d0c:	b40e      	push	{r1, r2, r3}
 8004d0e:	b500      	push	{lr}
 8004d10:	b09c      	sub	sp, #112	; 0x70
 8004d12:	ab1d      	add	r3, sp, #116	; 0x74
 8004d14:	9002      	str	r0, [sp, #8]
 8004d16:	9006      	str	r0, [sp, #24]
 8004d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d1c:	4809      	ldr	r0, [pc, #36]	; (8004d44 <siprintf+0x38>)
 8004d1e:	9107      	str	r1, [sp, #28]
 8004d20:	9104      	str	r1, [sp, #16]
 8004d22:	4909      	ldr	r1, [pc, #36]	; (8004d48 <siprintf+0x3c>)
 8004d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d28:	9105      	str	r1, [sp, #20]
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	a902      	add	r1, sp, #8
 8004d30:	f000 f868 	bl	8004e04 <_svfiprintf_r>
 8004d34:	9b02      	ldr	r3, [sp, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	b01c      	add	sp, #112	; 0x70
 8004d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d40:	b003      	add	sp, #12
 8004d42:	4770      	bx	lr
 8004d44:	2000000c 	.word	0x2000000c
 8004d48:	ffff0208 	.word	0xffff0208

08004d4c <__ssputs_r>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	688e      	ldr	r6, [r1, #8]
 8004d52:	429e      	cmp	r6, r3
 8004d54:	4682      	mov	sl, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	4690      	mov	r8, r2
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	d838      	bhi.n	8004dd0 <__ssputs_r+0x84>
 8004d5e:	898a      	ldrh	r2, [r1, #12]
 8004d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d64:	d032      	beq.n	8004dcc <__ssputs_r+0x80>
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	6909      	ldr	r1, [r1, #16]
 8004d6a:	eba5 0901 	sub.w	r9, r5, r1
 8004d6e:	6965      	ldr	r5, [r4, #20]
 8004d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d78:	3301      	adds	r3, #1
 8004d7a:	444b      	add	r3, r9
 8004d7c:	106d      	asrs	r5, r5, #1
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	bf38      	it	cc
 8004d82:	461d      	movcc	r5, r3
 8004d84:	0553      	lsls	r3, r2, #21
 8004d86:	d531      	bpl.n	8004dec <__ssputs_r+0xa0>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f000 fb63 	bl	8005454 <_malloc_r>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	b950      	cbnz	r0, 8004da8 <__ssputs_r+0x5c>
 8004d92:	230c      	movs	r3, #12
 8004d94:	f8ca 3000 	str.w	r3, [sl]
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9e:	81a3      	strh	r3, [r4, #12]
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	6921      	ldr	r1, [r4, #16]
 8004daa:	464a      	mov	r2, r9
 8004dac:	f000 fabe 	bl	800532c <memcpy>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	6126      	str	r6, [r4, #16]
 8004dbe:	6165      	str	r5, [r4, #20]
 8004dc0:	444e      	add	r6, r9
 8004dc2:	eba5 0509 	sub.w	r5, r5, r9
 8004dc6:	6026      	str	r6, [r4, #0]
 8004dc8:	60a5      	str	r5, [r4, #8]
 8004dca:	463e      	mov	r6, r7
 8004dcc:	42be      	cmp	r6, r7
 8004dce:	d900      	bls.n	8004dd2 <__ssputs_r+0x86>
 8004dd0:	463e      	mov	r6, r7
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	f000 fab6 	bl	8005348 <memmove>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	1b9b      	subs	r3, r3, r6
 8004de0:	60a3      	str	r3, [r4, #8]
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	4433      	add	r3, r6
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7db      	b.n	8004da4 <__ssputs_r+0x58>
 8004dec:	462a      	mov	r2, r5
 8004dee:	f000 fba5 	bl	800553c <_realloc_r>
 8004df2:	4606      	mov	r6, r0
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e1      	bne.n	8004dbc <__ssputs_r+0x70>
 8004df8:	6921      	ldr	r1, [r4, #16]
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f000 fabe 	bl	800537c <_free_r>
 8004e00:	e7c7      	b.n	8004d92 <__ssputs_r+0x46>
	...

08004e04 <_svfiprintf_r>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4698      	mov	r8, r3
 8004e0a:	898b      	ldrh	r3, [r1, #12]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	b09d      	sub	sp, #116	; 0x74
 8004e10:	4607      	mov	r7, r0
 8004e12:	460d      	mov	r5, r1
 8004e14:	4614      	mov	r4, r2
 8004e16:	d50e      	bpl.n	8004e36 <_svfiprintf_r+0x32>
 8004e18:	690b      	ldr	r3, [r1, #16]
 8004e1a:	b963      	cbnz	r3, 8004e36 <_svfiprintf_r+0x32>
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	f000 fb19 	bl	8005454 <_malloc_r>
 8004e22:	6028      	str	r0, [r5, #0]
 8004e24:	6128      	str	r0, [r5, #16]
 8004e26:	b920      	cbnz	r0, 8004e32 <_svfiprintf_r+0x2e>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e0d1      	b.n	8004fd6 <_svfiprintf_r+0x1d2>
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	616b      	str	r3, [r5, #20]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e44:	2330      	movs	r3, #48	; 0x30
 8004e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ff0 <_svfiprintf_r+0x1ec>
 8004e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e4e:	f04f 0901 	mov.w	r9, #1
 8004e52:	4623      	mov	r3, r4
 8004e54:	469a      	mov	sl, r3
 8004e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5a:	b10a      	cbz	r2, 8004e60 <_svfiprintf_r+0x5c>
 8004e5c:	2a25      	cmp	r2, #37	; 0x25
 8004e5e:	d1f9      	bne.n	8004e54 <_svfiprintf_r+0x50>
 8004e60:	ebba 0b04 	subs.w	fp, sl, r4
 8004e64:	d00b      	beq.n	8004e7e <_svfiprintf_r+0x7a>
 8004e66:	465b      	mov	r3, fp
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ff6d 	bl	8004d4c <__ssputs_r>
 8004e72:	3001      	adds	r0, #1
 8004e74:	f000 80aa 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7a:	445a      	add	r2, fp
 8004e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a2 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e92:	f10a 0a01 	add.w	sl, sl, #1
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	9307      	str	r3, [sp, #28]
 8004e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea0:	4654      	mov	r4, sl
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea8:	4851      	ldr	r0, [pc, #324]	; (8004ff0 <_svfiprintf_r+0x1ec>)
 8004eaa:	f7fb f9a1 	bl	80001f0 <memchr>
 8004eae:	9a04      	ldr	r2, [sp, #16]
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_svfiprintf_r+0xe6>
 8004eb2:	06d0      	lsls	r0, r2, #27
 8004eb4:	bf44      	itt	mi
 8004eb6:	2320      	movmi	r3, #32
 8004eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebc:	0711      	lsls	r1, r2, #28
 8004ebe:	bf44      	itt	mi
 8004ec0:	232b      	movmi	r3, #43	; 0x2b
 8004ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ecc:	d015      	beq.n	8004efa <_svfiprintf_r+0xf6>
 8004ece:	9a07      	ldr	r2, [sp, #28]
 8004ed0:	4654      	mov	r4, sl
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f04f 0c0a 	mov.w	ip, #10
 8004ed8:	4621      	mov	r1, r4
 8004eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ede:	3b30      	subs	r3, #48	; 0x30
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d94e      	bls.n	8004f82 <_svfiprintf_r+0x17e>
 8004ee4:	b1b0      	cbz	r0, 8004f14 <_svfiprintf_r+0x110>
 8004ee6:	9207      	str	r2, [sp, #28]
 8004ee8:	e014      	b.n	8004f14 <_svfiprintf_r+0x110>
 8004eea:	eba0 0308 	sub.w	r3, r0, r8
 8004eee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	46a2      	mov	sl, r4
 8004ef8:	e7d2      	b.n	8004ea0 <_svfiprintf_r+0x9c>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfbb      	ittet	lt
 8004f06:	425b      	neglt	r3, r3
 8004f08:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0c:	9307      	strge	r3, [sp, #28]
 8004f0e:	9307      	strlt	r3, [sp, #28]
 8004f10:	bfb8      	it	lt
 8004f12:	9204      	strlt	r2, [sp, #16]
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b2e      	cmp	r3, #46	; 0x2e
 8004f18:	d10c      	bne.n	8004f34 <_svfiprintf_r+0x130>
 8004f1a:	7863      	ldrb	r3, [r4, #1]
 8004f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1e:	d135      	bne.n	8004f8c <_svfiprintf_r+0x188>
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	9203      	str	r2, [sp, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfb8      	it	lt
 8004f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f30:	3402      	adds	r4, #2
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005000 <_svfiprintf_r+0x1fc>
 8004f38:	7821      	ldrb	r1, [r4, #0]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	f7fb f957 	bl	80001f0 <memchr>
 8004f42:	b140      	cbz	r0, 8004f56 <_svfiprintf_r+0x152>
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	eba0 000a 	sub.w	r0, r0, sl
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	4303      	orrs	r3, r0
 8004f52:	3401      	adds	r4, #1
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5a:	4826      	ldr	r0, [pc, #152]	; (8004ff4 <_svfiprintf_r+0x1f0>)
 8004f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f60:	2206      	movs	r2, #6
 8004f62:	f7fb f945 	bl	80001f0 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d038      	beq.n	8004fdc <_svfiprintf_r+0x1d8>
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <_svfiprintf_r+0x1f4>)
 8004f6c:	bb1b      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x1b2>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	4433      	add	r3, r6
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e767      	b.n	8004e52 <_svfiprintf_r+0x4e>
 8004f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f86:	460c      	mov	r4, r1
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e7a5      	b.n	8004ed8 <_svfiprintf_r+0xd4>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	3401      	adds	r4, #1
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0c0a 	mov.w	ip, #10
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f9e:	3a30      	subs	r2, #48	; 0x30
 8004fa0:	2a09      	cmp	r2, #9
 8004fa2:	d903      	bls.n	8004fac <_svfiprintf_r+0x1a8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c5      	beq.n	8004f34 <_svfiprintf_r+0x130>
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	e7c3      	b.n	8004f34 <_svfiprintf_r+0x130>
 8004fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e7f0      	b.n	8004f98 <_svfiprintf_r+0x194>
 8004fb6:	ab03      	add	r3, sp, #12
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fbe:	a904      	add	r1, sp, #16
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f3af 8000 	nop.w
 8004fc6:	1c42      	adds	r2, r0, #1
 8004fc8:	4606      	mov	r6, r0
 8004fca:	d1d6      	bne.n	8004f7a <_svfiprintf_r+0x176>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af2c 	bmi.w	8004e2c <_svfiprintf_r+0x28>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	b01d      	add	sp, #116	; 0x74
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fe4:	a904      	add	r1, sp, #16
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f000 f87a 	bl	80050e0 <_printf_i>
 8004fec:	e7eb      	b.n	8004fc6 <_svfiprintf_r+0x1c2>
 8004fee:	bf00      	nop
 8004ff0:	08005660 	.word	0x08005660
 8004ff4:	0800566a 	.word	0x0800566a
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	08004d4d 	.word	0x08004d4d
 8005000:	08005666 	.word	0x08005666

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4699      	mov	r9, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005014:	4293      	cmp	r3, r2
 8005016:	bfb8      	it	lt
 8005018:	4613      	movlt	r3, r2
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005020:	4607      	mov	r7, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc26      	bgt.n	800509a <_printf_common+0x96>
 800504c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005050:	1e13      	subs	r3, r2, #0
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42b      	bmi.n	80050b4 <_printf_common+0xb0>
 800505c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005060:	4649      	mov	r1, r9
 8005062:	4638      	mov	r0, r7
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d01e      	beq.n	80050a8 <_printf_common+0xa4>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	68e5      	ldr	r5, [r4, #12]
 800506e:	6832      	ldr	r2, [r6, #0]
 8005070:	f003 0306 	and.w	r3, r3, #6
 8005074:	2b04      	cmp	r3, #4
 8005076:	bf08      	it	eq
 8005078:	1aad      	subeq	r5, r5, r2
 800507a:	68a3      	ldr	r3, [r4, #8]
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	bf0c      	ite	eq
 8005080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005084:	2500      	movne	r5, #0
 8005086:	4293      	cmp	r3, r2
 8005088:	bfc4      	itt	gt
 800508a:	1a9b      	subgt	r3, r3, r2
 800508c:	18ed      	addgt	r5, r5, r3
 800508e:	2600      	movs	r6, #0
 8005090:	341a      	adds	r4, #26
 8005092:	42b5      	cmp	r5, r6
 8005094:	d11a      	bne.n	80050cc <_printf_common+0xc8>
 8005096:	2000      	movs	r0, #0
 8005098:	e008      	b.n	80050ac <_printf_common+0xa8>
 800509a:	2301      	movs	r3, #1
 800509c:	4652      	mov	r2, sl
 800509e:	4649      	mov	r1, r9
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c0      	blx	r8
 80050a4:	3001      	adds	r0, #1
 80050a6:	d103      	bne.n	80050b0 <_printf_common+0xac>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7c6      	b.n	8005042 <_printf_common+0x3e>
 80050b4:	18e1      	adds	r1, r4, r3
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	2030      	movs	r0, #48	; 0x30
 80050ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050be:	4422      	add	r2, r4
 80050c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c8:	3302      	adds	r3, #2
 80050ca:	e7c7      	b.n	800505c <_printf_common+0x58>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	4649      	mov	r1, r9
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa4>
 80050da:	3601      	adds	r6, #1
 80050dc:	e7d9      	b.n	8005092 <_printf_common+0x8e>
	...

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	7e0f      	ldrb	r7, [r1, #24]
 80050e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e8:	2f78      	cmp	r7, #120	; 0x78
 80050ea:	4691      	mov	r9, r2
 80050ec:	4680      	mov	r8, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	469a      	mov	sl, r3
 80050f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	; 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d8 	beq.w	80052b2 <_printf_i+0x1d2>
 8005102:	2f58      	cmp	r7, #88	; 0x58
 8005104:	f000 80a3 	beq.w	800524e <_printf_i+0x16e>
 8005108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a101      	add	r1, pc, #4	; (adr r1, 8005120 <_printf_i+0x40>)
 800511c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	08005299 	.word	0x08005299
 8005150:	080051bd 	.word	0x080051bd
 8005154:	0800527b 	.word	0x0800527b
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052bb 	.word	0x080052bb
 8005164:	08005109 	.word	0x08005109
 8005168:	080051bd 	.word	0x080051bd
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	08005283 	.word	0x08005283
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	602a      	str	r2, [r5, #0]
 8005180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e0a3      	b.n	80052d4 <_printf_i+0x1f4>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	6829      	ldr	r1, [r5, #0]
 8005190:	0606      	lsls	r6, r0, #24
 8005192:	f101 0304 	add.w	r3, r1, #4
 8005196:	d50a      	bpl.n	80051ae <_printf_i+0xce>
 8005198:	680e      	ldr	r6, [r1, #0]
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	2e00      	cmp	r6, #0
 800519e:	da03      	bge.n	80051a8 <_printf_i+0xc8>
 80051a0:	232d      	movs	r3, #45	; 0x2d
 80051a2:	4276      	negs	r6, r6
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a8:	485e      	ldr	r0, [pc, #376]	; (8005324 <_printf_i+0x244>)
 80051aa:	230a      	movs	r3, #10
 80051ac:	e019      	b.n	80051e2 <_printf_i+0x102>
 80051ae:	680e      	ldr	r6, [r1, #0]
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b6:	bf18      	it	ne
 80051b8:	b236      	sxthne	r6, r6
 80051ba:	e7ef      	b.n	800519c <_printf_i+0xbc>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	6820      	ldr	r0, [r4, #0]
 80051c0:	1d19      	adds	r1, r3, #4
 80051c2:	6029      	str	r1, [r5, #0]
 80051c4:	0601      	lsls	r1, r0, #24
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0xec>
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0xf2>
 80051cc:	0646      	lsls	r6, r0, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0xe8>
 80051d0:	881e      	ldrh	r6, [r3, #0]
 80051d2:	4854      	ldr	r0, [pc, #336]	; (8005324 <_printf_i+0x244>)
 80051d4:	2f6f      	cmp	r7, #111	; 0x6f
 80051d6:	bf0c      	ite	eq
 80051d8:	2308      	moveq	r3, #8
 80051da:	230a      	movne	r3, #10
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e2:	6865      	ldr	r5, [r4, #4]
 80051e4:	60a5      	str	r5, [r4, #8]
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	bfa2      	ittt	ge
 80051ea:	6821      	ldrge	r1, [r4, #0]
 80051ec:	f021 0104 	bicge.w	r1, r1, #4
 80051f0:	6021      	strge	r1, [r4, #0]
 80051f2:	b90e      	cbnz	r6, 80051f8 <_printf_i+0x118>
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	d04d      	beq.n	8005294 <_printf_i+0x1b4>
 80051f8:	4615      	mov	r5, r2
 80051fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80051fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005202:	5dc7      	ldrb	r7, [r0, r7]
 8005204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005208:	4637      	mov	r7, r6
 800520a:	42bb      	cmp	r3, r7
 800520c:	460e      	mov	r6, r1
 800520e:	d9f4      	bls.n	80051fa <_printf_i+0x11a>
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10b      	bne.n	800522c <_printf_i+0x14c>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07de      	lsls	r6, r3, #31
 8005218:	d508      	bpl.n	800522c <_printf_i+0x14c>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	bfde      	ittt	le
 8005222:	2330      	movle	r3, #48	; 0x30
 8005224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800522c:	1b52      	subs	r2, r2, r5
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	464b      	mov	r3, r9
 8005236:	aa03      	add	r2, sp, #12
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f7ff fee2 	bl	8005004 <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	d14c      	bne.n	80052de <_printf_i+0x1fe>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	4835      	ldr	r0, [pc, #212]	; (8005324 <_printf_i+0x244>)
 8005250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005254:	6829      	ldr	r1, [r5, #0]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	f851 6b04 	ldr.w	r6, [r1], #4
 800525c:	6029      	str	r1, [r5, #0]
 800525e:	061d      	lsls	r5, r3, #24
 8005260:	d514      	bpl.n	800528c <_printf_i+0x1ac>
 8005262:	07df      	lsls	r7, r3, #31
 8005264:	bf44      	itt	mi
 8005266:	f043 0320 	orrmi.w	r3, r3, #32
 800526a:	6023      	strmi	r3, [r4, #0]
 800526c:	b91e      	cbnz	r6, 8005276 <_printf_i+0x196>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	f023 0320 	bic.w	r3, r3, #32
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	2310      	movs	r3, #16
 8005278:	e7b0      	b.n	80051dc <_printf_i+0xfc>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f043 0320 	orr.w	r3, r3, #32
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	2378      	movs	r3, #120	; 0x78
 8005284:	4828      	ldr	r0, [pc, #160]	; (8005328 <_printf_i+0x248>)
 8005286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528a:	e7e3      	b.n	8005254 <_printf_i+0x174>
 800528c:	0659      	lsls	r1, r3, #25
 800528e:	bf48      	it	mi
 8005290:	b2b6      	uxthmi	r6, r6
 8005292:	e7e6      	b.n	8005262 <_printf_i+0x182>
 8005294:	4615      	mov	r5, r2
 8005296:	e7bb      	b.n	8005210 <_printf_i+0x130>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	6826      	ldr	r6, [r4, #0]
 800529c:	6961      	ldr	r1, [r4, #20]
 800529e:	1d18      	adds	r0, r3, #4
 80052a0:	6028      	str	r0, [r5, #0]
 80052a2:	0635      	lsls	r5, r6, #24
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0x1cc>
 80052a8:	6019      	str	r1, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <_printf_i+0x1d2>
 80052ac:	0670      	lsls	r0, r6, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0x1c8>
 80052b0:	8019      	strh	r1, [r3, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	4615      	mov	r5, r2
 80052b8:	e7ba      	b.n	8005230 <_printf_i+0x150>
 80052ba:	682b      	ldr	r3, [r5, #0]
 80052bc:	1d1a      	adds	r2, r3, #4
 80052be:	602a      	str	r2, [r5, #0]
 80052c0:	681d      	ldr	r5, [r3, #0]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f7fa ff92 	bl	80001f0 <memchr>
 80052cc:	b108      	cbz	r0, 80052d2 <_printf_i+0x1f2>
 80052ce:	1b40      	subs	r0, r0, r5
 80052d0:	6060      	str	r0, [r4, #4]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	2300      	movs	r3, #0
 80052d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052dc:	e7a8      	b.n	8005230 <_printf_i+0x150>
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4649      	mov	r1, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	47d0      	blx	sl
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0ab      	beq.n	8005244 <_printf_i+0x164>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	079b      	lsls	r3, r3, #30
 80052f0:	d413      	bmi.n	800531a <_printf_i+0x23a>
 80052f2:	68e0      	ldr	r0, [r4, #12]
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bfb8      	it	lt
 80052fa:	4618      	movlt	r0, r3
 80052fc:	e7a4      	b.n	8005248 <_printf_i+0x168>
 80052fe:	2301      	movs	r3, #1
 8005300:	4632      	mov	r2, r6
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d09b      	beq.n	8005244 <_printf_i+0x164>
 800530c:	3501      	adds	r5, #1
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	9903      	ldr	r1, [sp, #12]
 8005312:	1a5b      	subs	r3, r3, r1
 8005314:	42ab      	cmp	r3, r5
 8005316:	dcf2      	bgt.n	80052fe <_printf_i+0x21e>
 8005318:	e7eb      	b.n	80052f2 <_printf_i+0x212>
 800531a:	2500      	movs	r5, #0
 800531c:	f104 0619 	add.w	r6, r4, #25
 8005320:	e7f5      	b.n	800530e <_printf_i+0x22e>
 8005322:	bf00      	nop
 8005324:	08005671 	.word	0x08005671
 8005328:	08005682 	.word	0x08005682

0800532c <memcpy>:
 800532c:	440a      	add	r2, r1
 800532e:	4291      	cmp	r1, r2
 8005330:	f100 33ff 	add.w	r3, r0, #4294967295
 8005334:	d100      	bne.n	8005338 <memcpy+0xc>
 8005336:	4770      	bx	lr
 8005338:	b510      	push	{r4, lr}
 800533a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800533e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005342:	4291      	cmp	r1, r2
 8005344:	d1f9      	bne.n	800533a <memcpy+0xe>
 8005346:	bd10      	pop	{r4, pc}

08005348 <memmove>:
 8005348:	4288      	cmp	r0, r1
 800534a:	b510      	push	{r4, lr}
 800534c:	eb01 0402 	add.w	r4, r1, r2
 8005350:	d902      	bls.n	8005358 <memmove+0x10>
 8005352:	4284      	cmp	r4, r0
 8005354:	4623      	mov	r3, r4
 8005356:	d807      	bhi.n	8005368 <memmove+0x20>
 8005358:	1e43      	subs	r3, r0, #1
 800535a:	42a1      	cmp	r1, r4
 800535c:	d008      	beq.n	8005370 <memmove+0x28>
 800535e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005366:	e7f8      	b.n	800535a <memmove+0x12>
 8005368:	4402      	add	r2, r0
 800536a:	4601      	mov	r1, r0
 800536c:	428a      	cmp	r2, r1
 800536e:	d100      	bne.n	8005372 <memmove+0x2a>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537a:	e7f7      	b.n	800536c <memmove+0x24>

0800537c <_free_r>:
 800537c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800537e:	2900      	cmp	r1, #0
 8005380:	d044      	beq.n	800540c <_free_r+0x90>
 8005382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005386:	9001      	str	r0, [sp, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f1a1 0404 	sub.w	r4, r1, #4
 800538e:	bfb8      	it	lt
 8005390:	18e4      	addlt	r4, r4, r3
 8005392:	f000 f913 	bl	80055bc <__malloc_lock>
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <_free_r+0x94>)
 8005398:	9801      	ldr	r0, [sp, #4]
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	b933      	cbnz	r3, 80053ac <_free_r+0x30>
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	6014      	str	r4, [r2, #0]
 80053a2:	b003      	add	sp, #12
 80053a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053a8:	f000 b90e 	b.w	80055c8 <__malloc_unlock>
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d908      	bls.n	80053c2 <_free_r+0x46>
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	1961      	adds	r1, r4, r5
 80053b4:	428b      	cmp	r3, r1
 80053b6:	bf01      	itttt	eq
 80053b8:	6819      	ldreq	r1, [r3, #0]
 80053ba:	685b      	ldreq	r3, [r3, #4]
 80053bc:	1949      	addeq	r1, r1, r5
 80053be:	6021      	streq	r1, [r4, #0]
 80053c0:	e7ed      	b.n	800539e <_free_r+0x22>
 80053c2:	461a      	mov	r2, r3
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b10b      	cbz	r3, 80053cc <_free_r+0x50>
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	d9fa      	bls.n	80053c2 <_free_r+0x46>
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	1855      	adds	r5, r2, r1
 80053d0:	42a5      	cmp	r5, r4
 80053d2:	d10b      	bne.n	80053ec <_free_r+0x70>
 80053d4:	6824      	ldr	r4, [r4, #0]
 80053d6:	4421      	add	r1, r4
 80053d8:	1854      	adds	r4, r2, r1
 80053da:	42a3      	cmp	r3, r4
 80053dc:	6011      	str	r1, [r2, #0]
 80053de:	d1e0      	bne.n	80053a2 <_free_r+0x26>
 80053e0:	681c      	ldr	r4, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	6053      	str	r3, [r2, #4]
 80053e6:	4421      	add	r1, r4
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	e7da      	b.n	80053a2 <_free_r+0x26>
 80053ec:	d902      	bls.n	80053f4 <_free_r+0x78>
 80053ee:	230c      	movs	r3, #12
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	e7d6      	b.n	80053a2 <_free_r+0x26>
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	1961      	adds	r1, r4, r5
 80053f8:	428b      	cmp	r3, r1
 80053fa:	bf04      	itt	eq
 80053fc:	6819      	ldreq	r1, [r3, #0]
 80053fe:	685b      	ldreq	r3, [r3, #4]
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	bf04      	itt	eq
 8005404:	1949      	addeq	r1, r1, r5
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	6054      	str	r4, [r2, #4]
 800540a:	e7ca      	b.n	80053a2 <_free_r+0x26>
 800540c:	b003      	add	sp, #12
 800540e:	bd30      	pop	{r4, r5, pc}
 8005410:	200001fc 	.word	0x200001fc

08005414 <sbrk_aligned>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	4e0e      	ldr	r6, [pc, #56]	; (8005450 <sbrk_aligned+0x3c>)
 8005418:	460c      	mov	r4, r1
 800541a:	6831      	ldr	r1, [r6, #0]
 800541c:	4605      	mov	r5, r0
 800541e:	b911      	cbnz	r1, 8005426 <sbrk_aligned+0x12>
 8005420:	f000 f8bc 	bl	800559c <_sbrk_r>
 8005424:	6030      	str	r0, [r6, #0]
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f000 f8b7 	bl	800559c <_sbrk_r>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d00a      	beq.n	8005448 <sbrk_aligned+0x34>
 8005432:	1cc4      	adds	r4, r0, #3
 8005434:	f024 0403 	bic.w	r4, r4, #3
 8005438:	42a0      	cmp	r0, r4
 800543a:	d007      	beq.n	800544c <sbrk_aligned+0x38>
 800543c:	1a21      	subs	r1, r4, r0
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f8ac 	bl	800559c <_sbrk_r>
 8005444:	3001      	adds	r0, #1
 8005446:	d101      	bne.n	800544c <sbrk_aligned+0x38>
 8005448:	f04f 34ff 	mov.w	r4, #4294967295
 800544c:	4620      	mov	r0, r4
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	20000200 	.word	0x20000200

08005454 <_malloc_r>:
 8005454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005458:	1ccd      	adds	r5, r1, #3
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	2d00      	cmp	r5, #0
 8005468:	4607      	mov	r7, r0
 800546a:	db01      	blt.n	8005470 <_malloc_r+0x1c>
 800546c:	42a9      	cmp	r1, r5
 800546e:	d905      	bls.n	800547c <_malloc_r+0x28>
 8005470:	230c      	movs	r3, #12
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	2600      	movs	r6, #0
 8005476:	4630      	mov	r0, r6
 8005478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800547c:	4e2e      	ldr	r6, [pc, #184]	; (8005538 <_malloc_r+0xe4>)
 800547e:	f000 f89d 	bl	80055bc <__malloc_lock>
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	461c      	mov	r4, r3
 8005486:	bb34      	cbnz	r4, 80054d6 <_malloc_r+0x82>
 8005488:	4629      	mov	r1, r5
 800548a:	4638      	mov	r0, r7
 800548c:	f7ff ffc2 	bl	8005414 <sbrk_aligned>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	4604      	mov	r4, r0
 8005494:	d14d      	bne.n	8005532 <_malloc_r+0xde>
 8005496:	6834      	ldr	r4, [r6, #0]
 8005498:	4626      	mov	r6, r4
 800549a:	2e00      	cmp	r6, #0
 800549c:	d140      	bne.n	8005520 <_malloc_r+0xcc>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	4631      	mov	r1, r6
 80054a2:	4638      	mov	r0, r7
 80054a4:	eb04 0803 	add.w	r8, r4, r3
 80054a8:	f000 f878 	bl	800559c <_sbrk_r>
 80054ac:	4580      	cmp	r8, r0
 80054ae:	d13a      	bne.n	8005526 <_malloc_r+0xd2>
 80054b0:	6821      	ldr	r1, [r4, #0]
 80054b2:	3503      	adds	r5, #3
 80054b4:	1a6d      	subs	r5, r5, r1
 80054b6:	f025 0503 	bic.w	r5, r5, #3
 80054ba:	3508      	adds	r5, #8
 80054bc:	2d0c      	cmp	r5, #12
 80054be:	bf38      	it	cc
 80054c0:	250c      	movcc	r5, #12
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ffa5 	bl	8005414 <sbrk_aligned>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d02b      	beq.n	8005526 <_malloc_r+0xd2>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	442b      	add	r3, r5
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	e00e      	b.n	80054f4 <_malloc_r+0xa0>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	1b52      	subs	r2, r2, r5
 80054da:	d41e      	bmi.n	800551a <_malloc_r+0xc6>
 80054dc:	2a0b      	cmp	r2, #11
 80054de:	d916      	bls.n	800550e <_malloc_r+0xba>
 80054e0:	1961      	adds	r1, r4, r5
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	bf18      	it	ne
 80054e8:	6059      	strne	r1, [r3, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	bf08      	it	eq
 80054ee:	6031      	streq	r1, [r6, #0]
 80054f0:	5162      	str	r2, [r4, r5]
 80054f2:	604b      	str	r3, [r1, #4]
 80054f4:	4638      	mov	r0, r7
 80054f6:	f104 060b 	add.w	r6, r4, #11
 80054fa:	f000 f865 	bl	80055c8 <__malloc_unlock>
 80054fe:	f026 0607 	bic.w	r6, r6, #7
 8005502:	1d23      	adds	r3, r4, #4
 8005504:	1af2      	subs	r2, r6, r3
 8005506:	d0b6      	beq.n	8005476 <_malloc_r+0x22>
 8005508:	1b9b      	subs	r3, r3, r6
 800550a:	50a3      	str	r3, [r4, r2]
 800550c:	e7b3      	b.n	8005476 <_malloc_r+0x22>
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	42a3      	cmp	r3, r4
 8005512:	bf0c      	ite	eq
 8005514:	6032      	streq	r2, [r6, #0]
 8005516:	605a      	strne	r2, [r3, #4]
 8005518:	e7ec      	b.n	80054f4 <_malloc_r+0xa0>
 800551a:	4623      	mov	r3, r4
 800551c:	6864      	ldr	r4, [r4, #4]
 800551e:	e7b2      	b.n	8005486 <_malloc_r+0x32>
 8005520:	4634      	mov	r4, r6
 8005522:	6876      	ldr	r6, [r6, #4]
 8005524:	e7b9      	b.n	800549a <_malloc_r+0x46>
 8005526:	230c      	movs	r3, #12
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4638      	mov	r0, r7
 800552c:	f000 f84c 	bl	80055c8 <__malloc_unlock>
 8005530:	e7a1      	b.n	8005476 <_malloc_r+0x22>
 8005532:	6025      	str	r5, [r4, #0]
 8005534:	e7de      	b.n	80054f4 <_malloc_r+0xa0>
 8005536:	bf00      	nop
 8005538:	200001fc 	.word	0x200001fc

0800553c <_realloc_r>:
 800553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005540:	4680      	mov	r8, r0
 8005542:	4614      	mov	r4, r2
 8005544:	460e      	mov	r6, r1
 8005546:	b921      	cbnz	r1, 8005552 <_realloc_r+0x16>
 8005548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	4611      	mov	r1, r2
 800554e:	f7ff bf81 	b.w	8005454 <_malloc_r>
 8005552:	b92a      	cbnz	r2, 8005560 <_realloc_r+0x24>
 8005554:	f7ff ff12 	bl	800537c <_free_r>
 8005558:	4625      	mov	r5, r4
 800555a:	4628      	mov	r0, r5
 800555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005560:	f000 f838 	bl	80055d4 <_malloc_usable_size_r>
 8005564:	4284      	cmp	r4, r0
 8005566:	4607      	mov	r7, r0
 8005568:	d802      	bhi.n	8005570 <_realloc_r+0x34>
 800556a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800556e:	d812      	bhi.n	8005596 <_realloc_r+0x5a>
 8005570:	4621      	mov	r1, r4
 8005572:	4640      	mov	r0, r8
 8005574:	f7ff ff6e 	bl	8005454 <_malloc_r>
 8005578:	4605      	mov	r5, r0
 800557a:	2800      	cmp	r0, #0
 800557c:	d0ed      	beq.n	800555a <_realloc_r+0x1e>
 800557e:	42bc      	cmp	r4, r7
 8005580:	4622      	mov	r2, r4
 8005582:	4631      	mov	r1, r6
 8005584:	bf28      	it	cs
 8005586:	463a      	movcs	r2, r7
 8005588:	f7ff fed0 	bl	800532c <memcpy>
 800558c:	4631      	mov	r1, r6
 800558e:	4640      	mov	r0, r8
 8005590:	f7ff fef4 	bl	800537c <_free_r>
 8005594:	e7e1      	b.n	800555a <_realloc_r+0x1e>
 8005596:	4635      	mov	r5, r6
 8005598:	e7df      	b.n	800555a <_realloc_r+0x1e>
	...

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fb fe80 	bl	80012ac <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000204 	.word	0x20000204

080055bc <__malloc_lock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__malloc_lock+0x8>)
 80055be:	f000 b811 	b.w	80055e4 <__retarget_lock_acquire_recursive>
 80055c2:	bf00      	nop
 80055c4:	20000208 	.word	0x20000208

080055c8 <__malloc_unlock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__malloc_unlock+0x8>)
 80055ca:	f000 b80c 	b.w	80055e6 <__retarget_lock_release_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000208 	.word	0x20000208

080055d4 <_malloc_usable_size_r>:
 80055d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d8:	1f18      	subs	r0, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfbc      	itt	lt
 80055de:	580b      	ldrlt	r3, [r1, r0]
 80055e0:	18c0      	addlt	r0, r0, r3
 80055e2:	4770      	bx	lr

080055e4 <__retarget_lock_acquire_recursive>:
 80055e4:	4770      	bx	lr

080055e6 <__retarget_lock_release_recursive>:
 80055e6:	4770      	bx	lr

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
